/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

#if YYBISON == 1
// explicitly define stack growing support
// yacc cannot handle stack growing by default YYLTYPE is overriden - which the Postgres parser overrides with an `int`
// so we need to copy these definitions here explicitly
/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short int yyss;
  YYSTYPE yyvs;
  YYLTYPE yyls;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))
#endif

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 297 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANTI = 37,                      /* ANTI  */
  YYSYMBOL_ANY = 38,                       /* ANY  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASOF = 42,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 43,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 44,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 45,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 46,                        /* AT  */
  YYSYMBOL_ATTACH = 47,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 48,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 49,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 50,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 51,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 52,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 53,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 54,                    /* BIGINT  */
  YYSYMBOL_BINARY = 55,                    /* BINARY  */
  YYSYMBOL_BIT = 56,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 57,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 58,                      /* BOTH  */
  YYSYMBOL_BY = 59,                        /* BY  */
  YYSYMBOL_CACHE = 60,                     /* CACHE  */
  YYSYMBOL_CALL_P = 61,                    /* CALL_P  */
  YYSYMBOL_CALLED = 62,                    /* CALLED  */
  YYSYMBOL_CASCADE = 63,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 64,                  /* CASCADED  */
  YYSYMBOL_CASE = 65,                      /* CASE  */
  YYSYMBOL_CAST = 66,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 67,                 /* CATALOG_P  */
  YYSYMBOL_CENTURIES_P = 68,               /* CENTURIES_P  */
  YYSYMBOL_CENTURY_P = 69,                 /* CENTURY_P  */
  YYSYMBOL_CHAIN = 70,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 71,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 72,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 73,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 74,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 75,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 76,                     /* CLASS  */
  YYSYMBOL_CLOSE = 77,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 78,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 79,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 80,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 81,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 82,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 83,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 84,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 85,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 86,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 87,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 88,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 89,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 90,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 91,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 92,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 93,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 94,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 95,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 96,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 97,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 98,                      /* COPY  */
  YYSYMBOL_COST = 99,                      /* COST  */
  YYSYMBOL_CREATE_P = 100,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 101,                    /* CROSS  */
  YYSYMBOL_CSV = 102,                      /* CSV  */
  YYSYMBOL_CUBE = 103,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 104,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 105,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 106,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 107,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 108,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 109,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 110,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 111,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 112,                      /* DEC  */
  YYSYMBOL_DECADE_P = 113,                 /* DECADE_P  */
  YYSYMBOL_DECADES_P = 114,                /* DECADES_P  */
  YYSYMBOL_DECIMAL_P = 115,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 116,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 117,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 118,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 119,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 120,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 121,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 122,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 123,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 124,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 125,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 126,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 127,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 128,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 129,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 130,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 131,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 132,                 /* DISTINCT  */
  YYSYMBOL_DO = 133,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 134,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 135,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 136,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 137,                     /* DROP  */
  YYSYMBOL_EACH = 138,                     /* EACH  */
  YYSYMBOL_EDGES = 139,                    /* EDGES  */
  YYSYMBOL_ELSE = 140,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 141,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 142,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 143,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 144,                    /* END_P  */
  YYSYMBOL_ENUM_P = 145,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 146,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 147,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 148,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 149,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 150,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 151,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 152,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 153,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 154,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 155,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 156,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 157,                /* EXTENSION  */
  YYSYMBOL_EXTENSIONS = 158,               /* EXTENSIONS  */
  YYSYMBOL_EXTERNAL = 159,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 160,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 161,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 162,                   /* FAMILY  */
  YYSYMBOL_FEATURES = 163,                 /* FEATURES  */
  YYSYMBOL_FETCH = 164,                    /* FETCH  */
  YYSYMBOL_FILTER = 165,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 166,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 167,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 168,                /* FOLLOWING  */
  YYSYMBOL_FOR = 169,                      /* FOR  */
  YYSYMBOL_FORCE = 170,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 171,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 172,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 173,                   /* FREEZE  */
  YYSYMBOL_FROM = 174,                     /* FROM  */
  YYSYMBOL_FULL = 175,                     /* FULL  */
  YYSYMBOL_FUNCTION = 176,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 177,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 178,                /* GENERATED  */
  YYSYMBOL_GLOB = 179,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 180,                   /* GLOBAL  */
  YYSYMBOL_GNN = 181,                      /* GNN  */
  YYSYMBOL_GRANT = 182,                    /* GRANT  */
  YYSYMBOL_GRANTED = 183,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 184,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 185,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 186,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 187,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 188,                  /* HANDLER  */
  YYSYMBOL_HAVING = 189,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 190,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 191,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 192,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 193,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 194,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 195,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 196,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 197,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 198,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 199,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 200,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 201,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 202,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 203,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 204,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 205,                /* INCREMENT  */
  YYSYMBOL_INDEX = 206,                    /* INDEX  */
  YYSYMBOL_INDEXES = 207,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 208,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 209,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 210,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 211,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 212,                  /* INNER_P  */
  YYSYMBOL_INOUT = 213,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 214,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 215,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 216,                   /* INSERT  */
  YYSYMBOL_INSTALL = 217,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 218,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 219,                    /* INT_P  */
  YYSYMBOL_INTEGER = 220,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 221,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 222,                 /* INTERVAL  */
  YYSYMBOL_INTO = 223,                     /* INTO  */
  YYSYMBOL_INVOKER = 224,                  /* INVOKER  */
  YYSYMBOL_IS = 225,                       /* IS  */
  YYSYMBOL_ISNULL = 226,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 227,                /* ISOLATION  */
  YYSYMBOL_JOIN = 228,                     /* JOIN  */
  YYSYMBOL_JSON = 229,                     /* JSON  */
  YYSYMBOL_KEY = 230,                      /* KEY  */
  YYSYMBOL_LABEL = 231,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 232,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 233,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 234,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 235,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 236,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 237,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 238,                     /* LEFT  */
  YYSYMBOL_LEVEL = 239,                    /* LEVEL  */
  YYSYMBOL_LIKE = 240,                     /* LIKE  */
  YYSYMBOL_LIMIT = 241,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 242,                   /* LISTEN  */
  YYSYMBOL_LLM = 243,                      /* LLM  */
  YYSYMBOL_LOAD = 244,                     /* LOAD  */
  YYSYMBOL_LOCAL = 245,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 246,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 247,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 248,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 249,                   /* LOGGED  */
  YYSYMBOL_MACRO = 250,                    /* MACRO  */
  YYSYMBOL_MAP = 251,                      /* MAP  */
  YYSYMBOL_MAPPING = 252,                  /* MAPPING  */
  YYSYMBOL_MATCH = 253,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 254,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 255,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 256,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 257,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 258,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLENNIA_P = 259,              /* MILLENNIA_P  */
  YYSYMBOL_MILLENNIUM_P = 260,             /* MILLENNIUM_P  */
  YYSYMBOL_MILLISECOND_P = 261,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 262,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 263,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 264,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 265,                 /* MINVALUE  */
  YYSYMBOL_MODE = 266,                     /* MODE  */
  YYSYMBOL_MODEL = 267,                    /* MODEL  */
  YYSYMBOL_MONTH_P = 268,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 269,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 270,                     /* MOVE  */
  YYSYMBOL_NAME_P = 271,                   /* NAME_P  */
  YYSYMBOL_NAMES = 272,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 273,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 274,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 275,                    /* NCHAR  */
  YYSYMBOL_NEW = 276,                      /* NEW  */
  YYSYMBOL_NEXT = 277,                     /* NEXT  */
  YYSYMBOL_NO = 278,                       /* NO  */
  YYSYMBOL_NODES = 279,                    /* NODES  */
  YYSYMBOL_NONE = 280,                     /* NONE  */
  YYSYMBOL_NOT = 281,                      /* NOT  */
  YYSYMBOL_NOTHING = 282,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 283,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 284,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 285,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 286,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 287,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 288,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 289,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 290,                 /* OBJECT_P  */
  YYSYMBOL_OF = 291,                       /* OF  */
  YYSYMBOL_OFF = 292,                      /* OFF  */
  YYSYMBOL_OFFSET = 293,                   /* OFFSET  */
  YYSYMBOL_OIDS = 294,                     /* OIDS  */
  YYSYMBOL_OLD = 295,                      /* OLD  */
  YYSYMBOL_ON = 296,                       /* ON  */
  YYSYMBOL_ONLY = 297,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 298,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 299,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 300,                  /* OPTIONS  */
  YYSYMBOL_OR = 301,                       /* OR  */
  YYSYMBOL_ORDER = 302,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 303,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 304,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 305,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 306,                  /* OUTER_P  */
  YYSYMBOL_OUTPUT = 307,                   /* OUTPUT  */
  YYSYMBOL_OVER = 308,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 309,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 310,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 311,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 312,                    /* OWNED  */
  YYSYMBOL_OWNER = 313,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 314,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 315,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 316,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 317,                /* PARTITION  */
  YYSYMBOL_PASSING = 318,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 319,                 /* PASSWORD  */
  YYSYMBOL_PATH = 320,                     /* PATH  */
  YYSYMBOL_PERCENT = 321,                  /* PERCENT  */
  YYSYMBOL_PERSISTENT = 322,               /* PERSISTENT  */
  YYSYMBOL_PIVOT = 323,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 324,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 325,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 326,                  /* PLACING  */
  YYSYMBOL_PLANS = 327,                    /* PLANS  */
  YYSYMBOL_POLICY = 328,                   /* POLICY  */
  YYSYMBOL_POSITION = 329,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 330,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 331,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 332,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 333,                /* PRECISION  */
  YYSYMBOL_PREDICT = 334,                  /* PREDICT  */
  YYSYMBOL_PREPARE = 335,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 336,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 337,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 338,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 339,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 340,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 341,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 342,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 343,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 344,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 345,                  /* QUALIFY  */
  YYSYMBOL_QUARTER_P = 346,                /* QUARTER_P  */
  YYSYMBOL_QUARTERS_P = 347,               /* QUARTERS_P  */
  YYSYMBOL_QUOTE = 348,                    /* QUOTE  */
  YYSYMBOL_RANGE = 349,                    /* RANGE  */
  YYSYMBOL_READ_P = 350,                   /* READ_P  */
  YYSYMBOL_REAL = 351,                     /* REAL  */
  YYSYMBOL_REASSIGN = 352,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 353,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 354,                /* RECURSIVE  */
  YYSYMBOL_REF = 355,                      /* REF  */
  YYSYMBOL_REFERENCES = 356,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 357,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 358,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 359,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 360,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 361,                  /* RELEASE  */
  YYSYMBOL_RENAME = 362,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 363,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 364,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 365,                  /* REPLICA  */
  YYSYMBOL_RESET = 366,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 367,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 368,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 369,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 370,                /* RETURNING  */
  YYSYMBOL_RETURNS = 371,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 372,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 373,                    /* RIGHT  */
  YYSYMBOL_ROLE = 374,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 375,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 376,                   /* ROLLUP  */
  YYSYMBOL_ROW = 377,                      /* ROW  */
  YYSYMBOL_ROWS = 378,                     /* ROWS  */
  YYSYMBOL_RULE = 379,                     /* RULE  */
  YYSYMBOL_SAMPLE = 380,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 381,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 382,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 383,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 384,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 385,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 386,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 387,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 388,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 389,                   /* SECRET  */
  YYSYMBOL_SECURITY = 390,                 /* SECURITY  */
  YYSYMBOL_SELECT = 391,                   /* SELECT  */
  YYSYMBOL_SEMI = 392,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 393,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 394,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 395,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 396,                   /* SERVER  */
  YYSYMBOL_SESSION = 397,                  /* SESSION  */
  YYSYMBOL_SET = 398,                      /* SET  */
  YYSYMBOL_SETOF = 399,                    /* SETOF  */
  YYSYMBOL_SETS = 400,                     /* SETS  */
  YYSYMBOL_SHARE = 401,                    /* SHARE  */
  YYSYMBOL_SHOW = 402,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 403,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 404,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 405,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 406,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 407,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 408,                     /* SOME  */
  YYSYMBOL_SQL_P = 409,                    /* SQL_P  */
  YYSYMBOL_STABLE = 410,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 411,             /* STANDALONE_P  */
  YYSYMBOL_START = 412,                    /* START  */
  YYSYMBOL_STATEMENT = 413,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 414,               /* STATISTICS  */
  YYSYMBOL_STDIN = 415,                    /* STDIN  */
  YYSYMBOL_STDOUT = 416,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 417,                  /* STORAGE  */
  YYSYMBOL_STORED = 418,                   /* STORED  */
  YYSYMBOL_STRICT_P = 419,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 420,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 421,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 422,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 423,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 424,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 425,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 426,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 427,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 428,                    /* TABLE  */
  YYSYMBOL_TABLES = 429,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 430,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 431,               /* TABLESPACE  */
  YYSYMBOL_TABULAR = 432,                  /* TABULAR  */
  YYSYMBOL_TAKES = 433,                    /* TAKES  */
  YYSYMBOL_TEMP = 434,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 435,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 436,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 437,                   /* TEXT_P  */
  YYSYMBOL_THEN = 438,                     /* THEN  */
  YYSYMBOL_TIES = 439,                     /* TIES  */
  YYSYMBOL_TIME = 440,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 441,                /* TIMESTAMP  */
  YYSYMBOL_TO = 442,                       /* TO  */
  YYSYMBOL_TRAILING = 443,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 444,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 445,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 446,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 447,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 448,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 449,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 450,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 451,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 452,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 453,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 454,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 455,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 456,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 457,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 458,                    /* UNION  */
  YYSYMBOL_UNIQUE = 459,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 460,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 461,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 462,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 463,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 464,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 465,                   /* UPDATE  */
  YYSYMBOL_USE_P = 466,                    /* USE_P  */
  YYSYMBOL_USER = 467,                     /* USER  */
  YYSYMBOL_USING = 468,                    /* USING  */
  YYSYMBOL_VACUUM = 469,                   /* VACUUM  */
  YYSYMBOL_VALID = 470,                    /* VALID  */
  YYSYMBOL_VALIDATE = 471,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 472,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 473,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 474,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 475,                  /* VARCHAR  */
  YYSYMBOL_VARIABLE_P = 476,               /* VARIABLE_P  */
  YYSYMBOL_VARIADIC = 477,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 478,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 479,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 480,                /* VERSION_P  */
  YYSYMBOL_VIEW = 481,                     /* VIEW  */
  YYSYMBOL_VIEWS = 482,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 483,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 484,                 /* VOLATILE  */
  YYSYMBOL_WEEK_P = 485,                   /* WEEK_P  */
  YYSYMBOL_WEEKS_P = 486,                  /* WEEKS_P  */
  YYSYMBOL_WHEN = 487,                     /* WHEN  */
  YYSYMBOL_WHERE = 488,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 489,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 490,                   /* WINDOW  */
  YYSYMBOL_WITH = 491,                     /* WITH  */
  YYSYMBOL_WITHIN = 492,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 493,                  /* WITHOUT  */
  YYSYMBOL_WORK = 494,                     /* WORK  */
  YYSYMBOL_WRAPPER = 495,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 496,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 497,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 498,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 499,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 500,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 501,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 502,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 503,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 504,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 505,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 506,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 507,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 508,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 509,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 510,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 511,                    /* YES_P  */
  YYSYMBOL_ZONE = 512,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 513,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 514,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 515,                  /* WITH_LA  */
  YYSYMBOL_516_ = 516,                     /* '<'  */
  YYSYMBOL_517_ = 517,                     /* '>'  */
  YYSYMBOL_518_ = 518,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 519,                /* POSTFIXOP  */
  YYSYMBOL_520_ = 520,                     /* '+'  */
  YYSYMBOL_521_ = 521,                     /* '-'  */
  YYSYMBOL_522_ = 522,                     /* '*'  */
  YYSYMBOL_523_ = 523,                     /* '/'  */
  YYSYMBOL_524_ = 524,                     /* '%'  */
  YYSYMBOL_525_ = 525,                     /* '^'  */
  YYSYMBOL_UMINUS = 526,                   /* UMINUS  */
  YYSYMBOL_527_ = 527,                     /* '['  */
  YYSYMBOL_528_ = 528,                     /* ']'  */
  YYSYMBOL_529_ = 529,                     /* '('  */
  YYSYMBOL_530_ = 530,                     /* ')'  */
  YYSYMBOL_531_ = 531,                     /* '.'  */
  YYSYMBOL_532_ = 532,                     /* ';'  */
  YYSYMBOL_533_ = 533,                     /* '{'  */
  YYSYMBOL_534_ = 534,                     /* '}'  */
  YYSYMBOL_535_ = 535,                     /* ','  */
  YYSYMBOL_536_ = 536,                     /* '?'  */
  YYSYMBOL_537_ = 537,                     /* '#'  */
  YYSYMBOL_538_ = 538,                     /* '$'  */
  YYSYMBOL_539_ = 539,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 540,                 /* $accept  */
  YYSYMBOL_stmtblock = 541,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 542,                /* stmtmulti  */
  YYSYMBOL_stmt = 543,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 544,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 545,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 546,               /* SeqOptList  */
  YYSYMBOL_opt_with = 547,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 548,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 549,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 550,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 551,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 552,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 553, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 554,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 555, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 556, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 557,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 558,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 559, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 560,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 561,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 562,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 563,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 564,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 565,               /* DetachStmt  */
  YYSYMBOL_opt_database = 566,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 567,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 568,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 569,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 570,               /* opt_col_id  */
  YYSYMBOL_CommentOnStmt = 571,            /* CommentOnStmt  */
  YYSYMBOL_comment_value = 572,            /* comment_value  */
  YYSYMBOL_comment_on_type_any_name = 573, /* comment_on_type_any_name  */
  YYSYMBOL_qualified_name = 574,           /* qualified_name  */
  YYSYMBOL_ColId = 575,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 576,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 577,                   /* Sconst  */
  YYSYMBOL_indirection = 578,              /* indirection  */
  YYSYMBOL_indirection_el = 579,           /* indirection_el  */
  YYSYMBOL_attr_name = 580,                /* attr_name  */
  YYSYMBOL_ColLabel = 581,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 582,                 /* CopyStmt  */
  YYSYMBOL_copy_database_flag = 583,       /* copy_database_flag  */
  YYSYMBOL_copy_from = 584,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 585,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 586, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 587,                /* opt_using  */
  YYSYMBOL_opt_as = 588,                   /* opt_as  */
  YYSYMBOL_opt_program = 589,              /* opt_program  */
  YYSYMBOL_copy_options = 590,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 591,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 592,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 593,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 594,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 595,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 596,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 597, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 598,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 599,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 600,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 601,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 602,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 603, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 604,       /* generic_option_arg  */
  YYSYMBOL_key_action = 605,               /* key_action  */
  YYSYMBOL_ColConstraint = 606,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 607,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 608,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 609,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 610,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 611,      /* generic_option_elem  */
  YYSYMBOL_key_update = 612,               /* key_update  */
  YYSYMBOL_key_actions = 613,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 614,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 615,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 616,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 617,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 618,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 619,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 620,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 621,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 622,                  /* OptWith  */
  YYSYMBOL_definition = 623,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 624,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 625,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 626,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 627,                /* columnDef  */
  YYSYMBOL_def_list = 628,                 /* def_list  */
  YYSYMBOL_index_name = 629,               /* index_name  */
  YYSYMBOL_TableElement = 630,             /* TableElement  */
  YYSYMBOL_def_elem = 631,                 /* def_elem  */
  YYSYMBOL_opt_definition = 632,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 633,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 634,               /* columnElem  */
  YYSYMBOL_opt_column_list = 635,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 636,              /* ColQualList  */
  YYSYMBOL_key_delete = 637,               /* key_delete  */
  YYSYMBOL_reloption_elem = 638,           /* reloption_elem  */
  YYSYMBOL_columnList = 639,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 640,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 641,                /* func_type  */
  YYSYMBOL_ConstraintElem = 642,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 643,         /* TableElementList  */
  YYSYMBOL_key_match = 644,                /* key_match  */
  YYSYMBOL_TableLikeClause = 645,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 646,                  /* OptTemp  */
  YYSYMBOL_generated_when = 647,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 648,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 649,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 650,         /* create_as_target  */
  YYSYMBOL_CreateFunctionStmt = 651,       /* CreateFunctionStmt  */
  YYSYMBOL_table_macro_definition = 652,   /* table_macro_definition  */
  YYSYMBOL_table_macro_definition_parens = 653, /* table_macro_definition_parens  */
  YYSYMBOL_table_macro_list_internal = 654, /* table_macro_list_internal  */
  YYSYMBOL_table_macro_list = 655,         /* table_macro_list  */
  YYSYMBOL_macro_definition = 656,         /* macro_definition  */
  YYSYMBOL_macro_definition_list = 657,    /* macro_definition_list  */
  YYSYMBOL_macro_alias = 658,              /* macro_alias  */
  YYSYMBOL_param_list = 659,               /* param_list  */
  YYSYMBOL_CreateModelStmt = 660,          /* CreateModelStmt  */
  YYSYMBOL_model_type_value = 661,         /* model_type_value  */
  YYSYMBOL_model_on = 662,                 /* model_on  */
  YYSYMBOL_opt_feat_col_list = 663,        /* opt_feat_col_list  */
  YYSYMBOL_feat_col_list = 664,            /* feat_col_list  */
  YYSYMBOL_with_result_col_list = 665,     /* with_result_col_list  */
  YYSYMBOL_result_col_list = 666,          /* result_col_list  */
  YYSYMBOL_opt_option = 667,               /* opt_option  */
  YYSYMBOL_CreateSchemaStmt = 668,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 669,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 670,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 671,         /* CreateSecretStmt  */
  YYSYMBOL_opt_secret_name = 672,          /* opt_secret_name  */
  YYSYMBOL_opt_persist = 673,              /* opt_persist  */
  YYSYMBOL_opt_storage_specifier = 674,    /* opt_storage_specifier  */
  YYSYMBOL_CreateSeqStmt = 675,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 676,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 677,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 678,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 679,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 680,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 681,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 682,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 683,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 684,             /* using_clause  */
  YYSYMBOL_unreserved_keyword = 685,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 686,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 687,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 688,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 689,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 690,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 691,         /* reserved_keyword  */
  YYSYMBOL_DropStmt = 692,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 693,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 694,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 695,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 696,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 697, /* drop_type_name_on_any_name  */
  YYSYMBOL_DropSecretStmt = 698,           /* DropSecretStmt  */
  YYSYMBOL_opt_storage_drop_specifier = 699, /* opt_storage_drop_specifier  */
  YYSYMBOL_ExecuteStmt = 700,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 701,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 702,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 703,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 704,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 705,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 706,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 707,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 708,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 709, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 710,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 711,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 712,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 713,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 714,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 715,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 716,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 717,                /* IndexStmt  */
  YYSYMBOL_access_method = 718,            /* access_method  */
  YYSYMBOL_access_method_clause = 719,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 720,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 721,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 722,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 723,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 724,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 725,              /* insert_rest  */
  YYSYMBOL_insert_target = 726,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 727,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 728,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 729,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 730,       /* insert_column_item  */
  YYSYMBOL_set_clause = 731,               /* set_clause  */
  YYSYMBOL_opt_or_action = 732,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 733,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 734,               /* index_elem  */
  YYSYMBOL_returning_clause = 735,         /* returning_clause  */
  YYSYMBOL_override_kind = 736,            /* override_kind  */
  YYSYMBOL_set_target_list = 737,          /* set_target_list  */
  YYSYMBOL_opt_collate = 738,              /* opt_collate  */
  YYSYMBOL_opt_class = 739,                /* opt_class  */
  YYSYMBOL_insert_column_list = 740,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 741,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 742, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 743,             /* index_params  */
  YYSYMBOL_set_target = 744,               /* set_target  */
  YYSYMBOL_LoadStmt = 745,                 /* LoadStmt  */
  YYSYMBOL_opt_force = 746,                /* opt_force  */
  YYSYMBOL_file_name = 747,                /* file_name  */
  YYSYMBOL_opt_ext_version = 748,          /* opt_ext_version  */
  YYSYMBOL_PragmaStmt = 749,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 750,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 751,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 752,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 753,               /* RenameStmt  */
  YYSYMBOL_opt_column = 754,               /* opt_column  */
  YYSYMBOL_SelectStmt = 755,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 756,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 757,         /* select_no_parens  */
  YYSYMBOL_select_clause = 758,            /* select_clause  */
  YYSYMBOL_opt_select = 759,               /* opt_select  */
  YYSYMBOL_simple_select = 760,            /* simple_select  */
  YYSYMBOL_value_or_values = 761,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 762,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 763,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 764,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 765, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 766,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 767,              /* with_clause  */
  YYSYMBOL_cte_list = 768,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 769,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 770,         /* opt_materialized  */
  YYSYMBOL_into_clause = 771,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 772,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 773,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 774,          /* all_or_distinct  */
  YYSYMBOL_by_name = 775,                  /* by_name  */
  YYSYMBOL_distinct_clause = 776,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 777,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 778,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 779,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 780,              /* sort_clause  */
  YYSYMBOL_sortby_list = 781,              /* sortby_list  */
  YYSYMBOL_sortby = 782,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 783,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 784,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 785,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 786,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 787,             /* limit_clause  */
  YYSYMBOL_offset_clause = 788,            /* offset_clause  */
  YYSYMBOL_sample_count = 789,             /* sample_count  */
  YYSYMBOL_sample_clause = 790,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 791,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 792,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 793,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 794,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 795,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 796,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 797,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 798, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 799,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 800,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 801,            /* first_or_next  */
  YYSYMBOL_group_clause = 802,             /* group_clause  */
  YYSYMBOL_group_by_list = 803,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 804,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 805,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 806,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 807,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 808,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 809,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 810,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 811,            /* having_clause  */
  YYSYMBOL_qualify_clause = 812,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 813,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 814,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 815,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 816,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 817,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 818,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 819,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 820,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 821,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 822,              /* from_clause  */
  YYSYMBOL_from_list = 823,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 824,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 825,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 826,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 827,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 828,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 829,             /* pivot_header  */
  YYSYMBOL_pivot_value = 830,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 831,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 832,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 833,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 834,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 835,             /* joined_table  */
  YYSYMBOL_alias_clause = 836,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 837,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 838,        /* func_alias_clause  */
  YYSYMBOL_join_type = 839,                /* join_type  */
  YYSYMBOL_join_outer = 840,               /* join_outer  */
  YYSYMBOL_join_qual = 841,                /* join_qual  */
  YYSYMBOL_relation_expr = 842,            /* relation_expr  */
  YYSYMBOL_func_table = 843,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 844,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 845,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 846,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 847,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 848,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 849,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 850,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 851,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 852,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 853,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 854,             /* opt_Typename  */
  YYSYMBOL_Typename = 855,                 /* Typename  */
  YYSYMBOL_qualified_typename = 856,       /* qualified_typename  */
  YYSYMBOL_opt_array_bounds = 857,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 858,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 859,            /* ConstTypename  */
  YYSYMBOL_GenericType = 860,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 861,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 862,                  /* Numeric  */
  YYSYMBOL_opt_float = 863,                /* opt_float  */
  YYSYMBOL_Bit = 864,                      /* Bit  */
  YYSYMBOL_ConstBit = 865,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 866,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 867,         /* BitWithoutLength  */
  YYSYMBOL_Character = 868,                /* Character  */
  YYSYMBOL_ConstCharacter = 869,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 870,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 871,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 872,                /* character  */
  YYSYMBOL_opt_varying = 873,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 874,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 875,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 876,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 877,             /* year_keyword  */
  YYSYMBOL_month_keyword = 878,            /* month_keyword  */
  YYSYMBOL_day_keyword = 879,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 880,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 881,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 882,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 883,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 884,      /* microsecond_keyword  */
  YYSYMBOL_week_keyword = 885,             /* week_keyword  */
  YYSYMBOL_quarter_keyword = 886,          /* quarter_keyword  */
  YYSYMBOL_decade_keyword = 887,           /* decade_keyword  */
  YYSYMBOL_century_keyword = 888,          /* century_keyword  */
  YYSYMBOL_millennium_keyword = 889,       /* millennium_keyword  */
  YYSYMBOL_opt_interval = 890,             /* opt_interval  */
  YYSYMBOL_a_expr = 891,                   /* a_expr  */
  YYSYMBOL_b_expr = 892,                   /* b_expr  */
  YYSYMBOL_c_expr = 893,                   /* c_expr  */
  YYSYMBOL_d_expr = 894,                   /* d_expr  */
  YYSYMBOL_indirection_expr_or_a_expr = 895, /* indirection_expr_or_a_expr  */
  YYSYMBOL_indirection_expr = 896,         /* indirection_expr  */
  YYSYMBOL_list_expr = 897,                /* list_expr  */
  YYSYMBOL_struct_expr = 898,              /* struct_expr  */
  YYSYMBOL_map_expr = 899,                 /* map_expr  */
  YYSYMBOL_func_application = 900,         /* func_application  */
  YYSYMBOL_func_expr = 901,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 902,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 903, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension_lhs = 904,   /* list_comprehension_lhs  */
  YYSYMBOL_list_comprehension = 905,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 906,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 907,            /* filter_clause  */
  YYSYMBOL_export_clause = 908,            /* export_clause  */
  YYSYMBOL_window_clause = 909,            /* window_clause  */
  YYSYMBOL_window_definition_list = 910,   /* window_definition_list  */
  YYSYMBOL_window_definition = 911,        /* window_definition  */
  YYSYMBOL_over_clause = 912,              /* over_clause  */
  YYSYMBOL_window_specification = 913,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 914, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 915,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 916,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 917,             /* frame_extent  */
  YYSYMBOL_frame_bound = 918,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 919, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 920,            /* qualified_row  */
  YYSYMBOL_row = 921,                      /* row  */
  YYSYMBOL_dict_arg = 922,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 923,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 924, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 925,                  /* map_arg  */
  YYSYMBOL_map_arguments = 926,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 927,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 928, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 929,                 /* sub_type  */
  YYSYMBOL_all_Op = 930,                   /* all_Op  */
  YYSYMBOL_MathOp = 931,                   /* MathOp  */
  YYSYMBOL_qual_Op = 932,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 933,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 934,              /* subquery_Op  */
  YYSYMBOL_any_operator = 935,             /* any_operator  */
  YYSYMBOL_c_expr_list = 936,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 937,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 938,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 939,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 940,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 941,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 942,            /* func_arg_expr  */
  YYSYMBOL_type_list = 943,                /* type_list  */
  YYSYMBOL_extract_list = 944,             /* extract_list  */
  YYSYMBOL_extract_arg = 945,              /* extract_arg  */
  YYSYMBOL_overlay_list = 946,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 947,          /* overlay_placing  */
  YYSYMBOL_position_list = 948,            /* position_list  */
  YYSYMBOL_substr_list = 949,              /* substr_list  */
  YYSYMBOL_substr_from = 950,              /* substr_from  */
  YYSYMBOL_substr_for = 951,               /* substr_for  */
  YYSYMBOL_trim_list = 952,                /* trim_list  */
  YYSYMBOL_in_expr = 953,                  /* in_expr  */
  YYSYMBOL_case_expr = 954,                /* case_expr  */
  YYSYMBOL_when_clause_list = 955,         /* when_clause_list  */
  YYSYMBOL_when_clause = 956,              /* when_clause  */
  YYSYMBOL_case_default = 957,             /* case_default  */
  YYSYMBOL_case_arg = 958,                 /* case_arg  */
  YYSYMBOL_columnrefList = 959,            /* columnrefList  */
  YYSYMBOL_columnref = 960,                /* columnref  */
  YYSYMBOL_columnref_opt_indirection = 961, /* columnref_opt_indirection  */
  YYSYMBOL_opt_slice_bound = 962,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 963,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 964,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 965,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 966, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 967,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 968, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 969,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 970,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 971,                /* target_el  */
  YYSYMBOL_except_list = 972,              /* except_list  */
  YYSYMBOL_opt_except_list = 973,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 974,          /* replace_list_el  */
  YYSYMBOL_replace_list = 975,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 976,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 977,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 978,      /* qualified_name_list  */
  YYSYMBOL_name_list = 979,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 980,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 981, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 982,                     /* name  */
  YYSYMBOL_func_name = 983,                /* func_name  */
  YYSYMBOL_AexprConst = 984,               /* AexprConst  */
  YYSYMBOL_Iconst = 985,                   /* Iconst  */
  YYSYMBOL_type_function_name = 986,       /* type_function_name  */
  YYSYMBOL_function_name_token = 987,      /* function_name_token  */
  YYSYMBOL_type_name_token = 988,          /* type_name_token  */
  YYSYMBOL_any_name = 989,                 /* any_name  */
  YYSYMBOL_attrs = 990,                    /* attrs  */
  YYSYMBOL_opt_name_list = 991,            /* opt_name_list  */
  YYSYMBOL_param_name = 992,               /* param_name  */
  YYSYMBOL_ColLabelOrString = 993,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 994,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 995,          /* opt_transaction  */
  YYSYMBOL_opt_transaction_type = 996,     /* opt_transaction_type  */
  YYSYMBOL_UpdateStmt = 997,               /* UpdateStmt  */
  YYSYMBOL_UpdateExtensionsStmt = 998,     /* UpdateExtensionsStmt  */
  YYSYMBOL_UseStmt = 999,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 1000,              /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 1001,      /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 1002,                /* opt_full  */
  YYSYMBOL_vacuum_option_list = 1003,      /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 1004,              /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 1005,       /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 1006,           /* generic_reset  */
  YYSYMBOL_reset_rest = 1007,              /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 1008,         /* VariableSetStmt  */
  YYSYMBOL_set_rest = 1009,                /* set_rest  */
  YYSYMBOL_generic_set = 1010,             /* generic_set  */
  YYSYMBOL_var_value = 1011,               /* var_value  */
  YYSYMBOL_zone_value = 1012,              /* zone_value  */
  YYSYMBOL_var_list = 1013,                /* var_list  */
  YYSYMBOL_VariableShowStmt = 1014,        /* VariableShowStmt  */
  YYSYMBOL_describe_or_desc = 1015,        /* describe_or_desc  */
  YYSYMBOL_show_or_describe = 1016,        /* show_or_describe  */
  YYSYMBOL_opt_tables = 1017,              /* opt_tables  */
  YYSYMBOL_var_name = 1018,                /* var_name  */
  YYSYMBOL_table_id = 1019,                /* table_id  */
  YYSYMBOL_ViewStmt = 1020,                /* ViewStmt  */
  YYSYMBOL_opt_check_option = 1021         /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  888
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   75278

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  540
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  482
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2194
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3663

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   772


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   537,   538,   524,     2,     2,
     529,   530,   522,   520,   535,   521,   531,   523,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   539,   532,
     516,   518,   517,   536,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   527,     2,   528,   525,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   533,     2,   534,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   519,   526
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   515,   515,   531,   543,   552,   553,   554,   555,   556,
     557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,   575,   576,
     577,   578,   579,   580,   581,   582,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,   595,     7,    26,
      50,    73,    80,    85,    86,    87,    88,    89,     8,    21,
      34,    47,    65,    87,    88,    89,    90,     7,    14,    22,
       2,    10,    17,    24,    32,    40,    51,    52,    53,    57,
      58,    59,     7,    18,    19,    23,    24,    25,    26,    27,
      28,     7,     7,    14,    31,    51,    55,    65,    69,    75,
      76,     3,    10,    17,    24,    31,    38,    45,    52,    61,
      61,    63,    63,    65,    65,    67,    68,    72,    73,     8,
      33,    62,    66,    67,    72,    73,    78,    79,    83,    84,
      89,    90,     1,    30,    49,    61,    62,    63,    67,    68,
      73,    77,    82,    86,    94,    95,    99,   100,   105,   106,
     110,   111,   116,   117,   118,   119,   120,   121,   122,   123,
     128,   136,   140,   145,   146,   151,   155,   160,   164,   168,
     172,   176,   180,   184,   188,   192,   196,   200,   204,   208,
     212,   216,   220,   228,   233,   234,   235,   236,   237,   243,
     247,     8,    22,    36,    48,    56,    70,    71,    72,    73,
      74,    87,    88,    93,    94,    98,    99,     7,    17,    27,
      40,    41,    45,    46,    47,    51,    52,     9,    17,    29,
      30,    34,    35,    36,    41,    42,    43,    48,    52,    56,
      60,    64,    68,    72,    76,    80,    84,    88,    92,    97,
     101,   105,   112,   113,   117,   118,   119,     2,     9,    23,
      37,    54,    55,    56,    60,    67,    73,    85,    86,    90,
      96,   105,   106,   107,   111,   115,   122,   126,     7,    15,
      26,    27,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,     5,    12,    22,    23,     7,    16,    28,
      35,    42,    51,    52,    56,    57,     7,    16,    25,    34,
      43,    52,     8,    18,    29,    39,    49,    59,    71,    81,
      91,    95,   102,   106,   110,   119,   123,   130,   131,   135,
     139,    10,    16,    22,    28,    34,    44,    45,    53,    64,
      76,    84,    95,   101,   105,   109,   124,   131,   132,   133,
     137,   138,     9,    19,    29,    42,    43,     9,    19,     7,
       9,    18,    27,    36,    45,    54,    63,    72,    85,    87,
      93,    94,    99,   103,   107,   118,   126,   130,   139,   148,
     157,   166,   175,   184,   192,   200,   209,   218,   227,   236,
     253,   262,   271,   280,   290,   303,   318,   327,   335,   350,
     358,   368,   378,   385,   392,   400,   407,   418,   419,   424,
     428,   433,   438,   446,   447,   452,   456,   457,   458,     6,
      15,    25,    35,    45,    55,    65,    75,    85,    95,   106,
     117,   127,   140,   141,     6,     9,    13,    44,    45,    46,
      50,    51,    55,    59,    60,    64,    70,    75,    76,    77,
      78,    11,    24,    37,    54,    55,    56,    61,     7,    13,
      19,    25,     7,    21,    36,    56,    57,    84,    85,    86,
      87,    88,    89,    93,    94,    99,   104,   105,   106,   107,
     108,   113,   120,   121,   122,   139,   146,   153,   163,   173,
     185,   193,   202,   220,   221,   225,   226,   230,   239,   262,
     276,   283,   288,   290,   292,   294,   297,   300,   301,   302,
     303,   308,   312,   313,   318,   325,   330,   331,   332,   333,
     334,   335,   336,   337,   343,   344,   348,   353,   360,   367,
     374,   386,   387,   388,   389,   393,   398,   399,   400,   405,
     410,   411,   412,   413,   414,   415,   420,   440,   469,   470,
     474,   478,   479,   480,   484,   488,   496,   497,   502,   503,
     504,   508,   516,   517,   522,   523,   527,   532,   536,   540,
     545,   553,   554,   558,   559,   563,   564,   570,   581,   594,
     608,   622,   636,   650,   673,   677,   684,   688,   696,   701,
     708,   718,   719,   720,   721,   722,   729,   736,   737,   742,
     743,     7,    17,    26,    35,    46,    47,    49,    50,    53,
      54,    55,    47,    48,    52,    53,    54,    72,    73,    80,
      88,    96,   104,   112,   120,   131,   132,   159,   164,   172,
     188,   205,   222,   239,   240,   259,   263,   267,   271,   275,
     285,   296,   306,   315,   326,   337,   349,   364,   382,   382,
     386,   386,   390,   390,   394,   400,   407,   411,   412,   416,
     417,   431,   438,   445,   455,   456,   459,   472,   473,   474,
     478,   489,   497,   502,   507,   512,   517,   525,   533,   538,
     543,   550,   551,   555,   556,   557,   561,   568,   569,   573,
     574,   578,   579,   580,   584,   585,   589,   590,   606,   607,
     610,   619,   630,   631,   632,   635,   636,   637,   641,   642,
     643,   644,   648,   649,   653,   655,   671,   673,   678,   681,
     689,   693,   697,   701,   705,   709,   716,   721,   728,   729,
     733,   738,   742,   746,   754,   761,   762,   767,   768,   772,
     773,   778,   780,   782,   787,   807,   808,   810,   815,   816,
     820,   821,   824,   825,   850,   851,   856,   860,   861,   865,
     866,   870,   871,   872,   873,   874,   878,   891,   898,   905,
     912,   913,   917,   918,   922,   923,   927,   928,   932,   933,
     937,   938,   942,   953,   954,   955,   956,   960,   961,   966,
     967,   968,   977,   983,   992,   993,  1006,  1007,  1011,  1012,
    1016,  1017,  1023,  1029,  1037,  1046,  1054,  1063,  1072,  1076,
    1081,  1092,  1103,  1111,  1124,  1125,  1128,  1129,  1130,  1133,
    1141,  1150,  1151,  1152,  1153,  1156,  1164,  1173,  1177,  1184,
    1185,  1189,  1198,  1202,  1227,  1231,  1244,  1258,  1273,  1285,
    1298,  1312,  1326,  1339,  1354,  1373,  1379,  1384,  1390,  1397,
    1398,  1406,  1410,  1414,  1420,  1427,  1432,  1433,  1434,  1435,
    1436,  1437,  1441,  1442,  1454,  1455,  1460,  1467,  1474,  1481,
    1513,  1524,  1537,  1542,  1543,  1546,  1547,  1550,  1551,  1556,
    1557,  1562,  1566,  1572,  1593,  1601,  1614,  1617,  1621,  1621,
    1624,  1625,  1627,  1632,  1639,  1644,  1650,  1655,  1661,  1665,
    1672,  1679,  1689,  1690,  1694,  1696,  1699,  1703,  1704,  1705,
    1706,  1707,  1708,  1713,  1733,  1734,  1735,  1736,  1747,  1761,
    1762,  1768,  1773,  1778,  1783,  1788,  1793,  1798,  1803,  1809,
    1815,  1821,  1828,  1850,  1859,  1863,  1871,  1875,  1883,  1895,
    1916,  1920,  1926,  1930,  1943,  1951,  1961,  1963,  1965,  1967,
    1969,  1971,  1976,  1977,  1984,  1993,  2001,  2010,  2021,  2029,
    2030,  2031,  2035,  2035,  2038,  2038,  2041,  2041,  2044,  2044,
    2047,  2047,  2050,  2050,  2053,  2053,  2056,  2056,  2059,  2059,
    2062,  2062,  2065,  2065,  2068,  2068,  2071,  2071,  2074,  2076,
    2078,  2080,  2082,  2084,  2086,  2088,  2090,  2092,  2094,  2096,
    2098,  2100,  2105,  2110,  2116,  2123,  2128,  2134,  2140,  2171,
    2173,  2175,  2183,  2198,  2200,  2202,  2204,  2206,  2208,  2210,
    2212,  2214,  2216,  2218,  2220,  2222,  2224,  2226,  2228,  2231,
    2233,  2235,  2238,  2240,  2242,  2244,  2246,  2251,  2256,  2263,
    2268,  2275,  2280,  2287,  2292,  2300,  2308,  2316,  2324,  2342,
    2350,  2358,  2366,  2374,  2382,  2390,  2394,  2410,  2418,  2426,
    2434,  2442,  2450,  2458,  2462,  2466,  2470,  2474,  2482,  2490,
    2498,  2506,  2526,  2548,  2559,  2566,  2580,  2589,  2597,  2605,
    2625,  2627,  2629,  2631,  2633,  2635,  2637,  2639,  2641,  2643,
    2645,  2647,  2649,  2651,  2653,  2655,  2657,  2659,  2661,  2663,
    2665,  2667,  2671,  2675,  2679,  2693,  2694,  2708,  2709,  2710,
    2721,  2745,  2756,  2766,  2770,  2774,  2781,  2785,  2792,  2796,
    2800,  2804,  2806,  2809,  2812,  2823,  2828,  2835,  2841,  2847,
    2854,  2874,  2878,  2885,  2893,  2901,  2912,  2932,  2968,  2979,
    2980,  2987,  2993,  2995,  2997,  3001,  3010,  3015,  3022,  3037,
    3044,  3048,  3052,  3056,  3060,  3070,  3078,  3087,  3109,  3110,
    3114,  3115,  3116,  3120,  3121,  3128,  3129,  3133,  3134,  3139,
    3147,  3149,  3163,  3166,  3193,  3194,  3197,  3198,  3206,  3214,
    3222,  3231,  3241,  3259,  3305,  3314,  3323,  3332,  3341,  3353,
    3354,  3355,  3356,  3357,  3371,  3372,  3375,  3376,  3380,  3390,
    3391,  3395,  3396,  3400,  3407,  3408,  3413,  3414,  3419,  3420,
    3423,  3424,  3425,  3428,  3429,  3432,  3433,  3434,  3435,  3436,
    3437,  3438,  3439,  3440,  3441,  3442,  3443,  3444,  3445,  3448,
    3450,  3455,  3457,  3462,  3464,  3466,  3468,  3470,  3472,  3474,
    3476,  3490,  3492,  3497,  3501,  3508,  3513,  3519,  3523,  3530,
    3535,  3542,  3547,  3555,  3559,  3565,  3569,  3578,  3589,  3590,
    3594,  3598,  3605,  3606,  3607,  3608,  3609,  3610,  3611,  3612,
    3613,  3614,  3615,  3616,  3617,  3618,  3619,  3629,  3633,  3640,
    3647,  3648,  3664,  3668,  3673,  3677,  3692,  3697,  3701,  3704,
    3707,  3708,  3709,  3712,  3719,  3720,  3721,  3731,  3745,  3746,
    3750,  3761,  3762,  3765,  3766,  3770,  3771,  3774,  3780,  3784,
    3791,  3799,  3807,  3815,  3825,  3826,  3831,  3832,  3836,  3837,
    3838,  3842,  3851,  3859,  3867,  3876,  3891,  3892,  3897,  3898,
    3908,  3909,  3913,  3914,  3918,  3919,  3922,  3938,  3946,  3956,
    3957,  3960,  3961,  3964,  3968,  3969,  3973,  3974,  3977,  3978,
    3979,  3989,  3990,  3994,  3996,  4002,  4003,  4007,  4008,  4011,
    4022,  4025,  4036,  4040,  4044,  4056,  4060,  4069,  4076,  4114,
    4118,  4122,  4126,  4130,  4134,  4138,  4144,  4161,  4162,  4163,
    4166,  4167,  4168,  4171,  4172,  4173,  4176,  4177,  4180,  4182,
    4187,  4188,  4191,  4195,  4196,     7,    19,    33,     9,    19,
      29,    39,    49,    59,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    96,    97,    98,    99,   100,   101,   106,
     107,   112,   113,   114,   119,   120,   121,     7,    16,    25,
      46,    47,    50,    54,     2,     7,    12,    17,    22,    31,
      38,    48,    49,    56,     9,    23,    29,    36,    42,    49,
      59,    63,    71,    72,    73,    77,    86,    95,   102,   103,
     108,   120,   125,   150,   155,   160,   166,   176,   186,   192,
     203,   214,   229,   230,   236,   237,   242,   243,   249,   250,
     254,   255,   260,   262,   268,   269,   273,   274,   277,   278,
     283,     7,    16,    28,    29,     9,    16,    26,    33,    44,
      45,    50,    51,    52,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    92,    93,    94,    99,
     100,   105,   109,   117,   118,   123,   124,   125,   131,   136,
     144,   145,     7,    18,    31,    35,    42,    53,    54,    60,
      61,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    66,    66,    66,    66,    66,    66,    66,    66,    66,
      66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
      66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
      66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
      66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
      66,    66,    66,    66,    66,    67,    67,    67,    67,    67,
      67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
      67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
      67,    67,    67,    68,    68,    68,    68,    68,    68,    68,
      68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
      68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
      68,    68,    69,    69,    69,    69,    69,    69,    69,    69,
      69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
      69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
      69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
      69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
      69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
      69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
      69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
      69,    69,    69,    70,    70,    70,    70,    70,    70,    70,
      70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
      70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
      70,    70,    70,    70,    70,    71,    71,    71,    71,    71,
      71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
      71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
      71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
      71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
      71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
      71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
      71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
      71,    71,    71,    71,    71
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY", "ARRAY", "AS",
  "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P",
  "CENTURIES_P", "CENTURY_P", "CHAIN", "CHAR_P", "CHARACTER",
  "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
  "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
  "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY",
  "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
  "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P",
  "CROSS", "CSV", "CUBE", "CURRENT_P", "CURSOR", "CYCLE", "DATA_P",
  "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC", "DECADE_P",
  "DECADES_P", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "EDGES", "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P",
  "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE",
  "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION",
  "EXTENSIONS", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FEATURES",
  "FETCH", "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE",
  "FOREIGN", "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
  "GENERATED", "GLOB", "GLOBAL", "GNN", "GRANT", "GRANTED", "GROUP_P",
  "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER", "HAVING", "HEADER_P",
  "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE",
  "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDE_P",
  "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", "INHERITS",
  "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE",
  "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER", "INTERSECT",
  "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN",
  "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P",
  "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN",
  "LLM", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED", "LOGGED",
  "MACRO", "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD",
  "MICROSECOND_P", "MICROSECONDS_P", "MILLENNIA_P", "MILLENNIUM_P",
  "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE",
  "MODE", "MODEL", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P", "NAMES",
  "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NODES", "NONE",
  "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF",
  "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD",
  "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER",
  "ORDINALITY", "OTHERS", "OUT_P", "OUTER_P", "OUTPUT", "OVER", "OVERLAPS",
  "OVERLAY", "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER",
  "PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PATH", "PERCENT",
  "PERSISTENT", "PIVOT", "PIVOT_LONGER", "PIVOT_WIDER", "PLACING", "PLANS",
  "POLICY", "POSITION", "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION",
  "PREDICT", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR",
  "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM", "PUBLICATION",
  "QUALIFY", "QUARTER_P", "QUARTERS_P", "QUOTE", "RANGE", "READ_P", "REAL",
  "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING",
  "REFRESH", "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE",
  "REPLACE", "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT",
  "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP",
  "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS",
  "SCOPE", "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P", "SECRET",
  "SECURITY", "SELECT", "SEMI", "SEQUENCE", "SEQUENCES", "SERIALIZABLE",
  "SERVER", "SESSION", "SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR",
  "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION",
  "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TABULAR", "TAKES", "TEMP",
  "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIES", "TIME", "TIMESTAMP",
  "TO", "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM",
  "TRUE_P", "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P",
  "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN",
  "UNLISTEN", "UNLOGGED", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER",
  "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIABLE_P", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P",
  "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WEEK_P", "WEEKS_P", "WHEN",
  "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK",
  "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
  "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE",
  "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "'{'", "'}'", "','", "'?'", "'#'",
  "'$'", "':'", "$accept", "stmtblock", "stmtmulti", "stmt",
  "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "CallStmt", "CheckPointStmt", "opt_col_id",
  "CommentOnStmt", "comment_value", "comment_on_type_any_name",
  "qualified_name", "ColId", "ColIdOrString", "Sconst", "indirection",
  "indirection_el", "attr_name", "ColLabel", "CopyStmt",
  "copy_database_flag", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "CreateFunctionStmt",
  "table_macro_definition", "table_macro_definition_parens",
  "table_macro_list_internal", "table_macro_list", "macro_definition",
  "macro_definition_list", "macro_alias", "param_list", "CreateModelStmt",
  "model_type_value", "model_on", "opt_feat_col_list", "feat_col_list",
  "with_result_col_list", "result_col_list", "opt_option",
  "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt",
  "CreateSecretStmt", "opt_secret_name", "opt_persist",
  "opt_storage_specifier", "CreateSeqStmt", "OptSeqOptList",
  "CreateTypeStmt", "opt_enum_val_list", "enum_val_list", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "unreserved_keyword", "col_name_keyword",
  "func_name_keyword", "type_name_keyword", "other_keyword",
  "type_func_name_keyword", "reserved_keyword", "DropStmt",
  "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "DropSecretStmt",
  "opt_storage_drop_specifier", "ExecuteStmt", "execute_param_expr",
  "execute_param_list", "execute_param_clause", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "opt_force", "file_name",
  "opt_ext_version", "PragmaStmt", "PrepareStmt", "prep_type_clause",
  "PreparableStmt", "RenameStmt", "opt_column", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause", "opt_select",
  "simple_select", "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "opt_materialized",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "by_name", "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "qualified_typename", "opt_array_bounds", "SimpleTypename",
  "ConstTypename", "GenericType", "opt_type_modifiers", "Numeric",
  "opt_float", "Bit", "ConstBit", "BitWithLength", "BitWithoutLength",
  "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "week_keyword",
  "quarter_keyword", "decade_keyword", "century_keyword",
  "millennium_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr_or_a_expr", "indirection_expr", "list_expr",
  "struct_expr", "map_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr",
  "list_comprehension_lhs", "list_comprehension", "within_group_clause",
  "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "opt_window_exclusion_clause", "qualified_row", "row",
  "dict_arg", "dict_arguments", "dict_arguments_opt_comma", "map_arg",
  "map_arguments", "map_arguments_opt_comma",
  "opt_map_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "c_expr_list",
  "c_expr_list_opt_comma", "expr_list", "expr_list_opt_comma",
  "opt_expr_list_opt_comma", "func_arg_list", "func_arg_expr", "type_list",
  "extract_list", "extract_arg", "overlay_list", "overlay_placing",
  "position_list", "substr_list", "substr_from", "substr_for", "trim_list",
  "in_expr", "case_expr", "when_clause_list", "when_clause",
  "case_default", "case_arg", "columnrefList", "columnref",
  "columnref_opt_indirection", "opt_slice_bound", "opt_indirection",
  "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "opt_transaction_type",
  "UpdateStmt", "UpdateExtensionsStmt", "UseStmt", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "VariableResetStmt", "generic_reset", "reset_rest", "VariableSetStmt",
  "set_rest", "generic_set", "var_value", "zone_value", "var_list",
  "VariableShowStmt", "describe_or_desc", "show_or_describe", "opt_tables",
  "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3122)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2115)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    6495,   567,   675, -3122, -3122,   676,   567, 50883, 67188,   198,
     567,   120,  3176, 52923, -3122, -3122, 47313,  8763,   567, 56493,
   74749,   522,   368, 32262,   556, 57003, -3122, -3122, -3122, 67188,
   56493, 57513,   567,   524, 67698, -3122,   567, 34812, 53433,   371,
   -3122, 56493,    58,   440, 58023, 56493,  2176,   979,   485, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122,   585, -3122, -3122, -3122, -3122,   301,
   -3122,   862, -3122, -3122, -3122, -3122,   162, -3122,   171,   170,
   32262, 32262,    51,   576, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, 34302, -3122, -3122, -3122, -3122, 58533,
   56493, 59043, 53943, 59553, -3122,   839,  1167,   826,   179, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122,   192, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122,   661, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122,   199, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,   505,   201,
   -3122, -3122, -3122,   672, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122,  1306, -3122, -3122,  1127,  2667, 56493,   723,   789,
     886, -3122, 60063, -3122,   871, 56493, -3122, -3122,  1388,   880,
    1072, -3122, -3122, 54453, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   47823, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122,  1030, -3122, -3122,   852, -3122,   151,
   -3122, -3122,   888,   855, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122,   934, -3122, -3122, -3122,   951, 68208,
   60573, 61083, -3122,   817,  2764,  8775, 42273, 31751, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122,   585, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, 57003, 67188,   825,   835,  1206,   861, 32772,   874,
   35323,   878,   894,   910,  1219,   912,   926,   962,   975,   440,
   31241,   893,   505, -3122, 61593, 61593,   -51,  4473, -3122, 61593,
   62103, -3122,   890, -3122,  1167, -3122, -3122, -3122, -3122,   -81,
     981, -3122, 62613, 62613, 62613,   913,  1205, 62613, -3122, -3122,
   -3122,   947, -3122, -3122,  1204, 20096, 20096, 68718, 68718,  1167,
   68718,  1012, 68718, -3122, -3122,    50,   826, -3122, -3122,    51,
     989,   505, -3122, -3122, 53433, -3122, -3122,   252,  1360, 20096,
   56493,   992, -3122,  1006,   992,  1016,  1024,  1035, -3122,  6495,
   -3122, 56493,  1400,  1280, 54963, 57003,   746,   746,  1526,   746,
     257,   646,  2671,  3470, -3122,  1554, -3122,  1061,  1165,  1088,
    1383, -3122,   989,  1473,   896,  1272,  1508,  6940,  1511,   908,
    1523,  1065,  1530,  1645,    66, -3122, 20096, 48333,   505, -3122,
   12056, 20096, -3122, -3122, -3122,  1251, -3122, -3122, -3122, -3122,
   -3122, -3122, 56493, 67188,  1157,  1162, -3122, -3122, -3122, -3122,
    1596,  1412, -3122,  1655, -3122, -3122, -3122, -3122,  1223, 63123,
   63633, -3122, 64143, 64653,  1444, 69228,  1625, -3122, -3122,  1564,
   -3122, -3122, -3122,  1227, -3122, -3122, -3122,   271, 69738,  1571,
    1200,   113, -3122,  1580,   180, -3122,  1598,  1457, 15808, -3122,
    1393, -3122, -3122, -3122,   440, -3122, -3122, -3122,   548, -3122,
   -3122, 44386, 42273,  1335,  1257, -3122, 20096, 20096,  1265,  5206,
   61593, 62103, 20096, 56493, -3122, 20096, 24920, 56493,  1281, 20096,
   20096, 13128, 20096, 30221, 61593,  4473,  1292, -3122,   939, 56493,
    1300, -3122,  1401,  1401,   524, 32262,  1610, -3122,   734,  1618,
    1547, -3122, 32262,  1547,  1117,  1326,  1632,  1547, -3122,   273,
    1640,  1401, 35833,  1338, -3122,  1401,  1567, -3122, -3122, 20096,
   15808, 72288,  1831, -3122, -3122, -3122, -3122,  1633, -3122, 67188,
    1346, -3122, -3122, -3122, -3122, -3122, -3122,   707,  1874,   174,
    1875, 20096,   174,   174,  1352,   206,   206, -3122,  1549,  1355,
   -3122,   217,  1356,  1358,  1878,  1885,   189,   152,  1073,   174,
   20096, -3122,   206,  1363,  1888,  1365,  1891,   154,   184, -3122,
     218, 20096, 20096, 20096,   736, 20096, 10984, 56493, -3122,  1889,
   48333,   571, -3122,   505,  1372,  1167, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122,  1373, -3122,   194,  7218, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122,  1411, -3122, -3122, -3122, -3122,  1595,
   20096, -3122, -3122,  1370,  1610, -3122,   221, -3122, -3122,  1610,
   -3122, -3122, -3122, -3122, -3122,   233, -3122,  1802, 20096, 20096,
   -3122, 67188,   505, -3122, 70248, -3122, -3122, -3122, -3122, -3122,
   -3122,   645, -3122,   585, 45970,  1374,  1380,   992, 56493, 56493,
    1871, -3122, -3122, -3122, -3122,  1006, 53433,   169,  1690,   164,
    1516,   110, -3122, -3122,    51,    51, 16344,  1759,   641,    70,
   16880, 20632,  1746,  1626,   260,   769,  1761, -3122,  1634,  1869,
   24920, 20096, 20096,   257,   646, 20096, -3122, -3122, -3122,  1695,
   56493, 51393,   369,  1047,  1409,  1498,  1413,    59,  1848, -3122,
    1408, -3122,  1509, 56493, 74283,   235, -3122,  1893,   235,   235,
     527,  1904,  1524,   242,  1696,   418,   299,  1814, -3122,  1408,
   53433,   220,   818,  1408, 56493,  1529,   946,  1408,  1860, 67188,
    1257, -3122, -3122, 41796,  1433, -3122, -3122, -3122,   178, 15808,
   -3122,  1347,  1440,  1470,   376,   147,  1484,  1579, 15808,  1639,
    1706,   188,  1713,  1723,  1725,  1727,  1732,  1734,  1742,  1748,
     168,  1750,  1752,  1754,  1756,  1758,  1760, -3122,  1769,   195,
    1771,   239, 15808,  1778, -3122,   215, -3122, 45970,   -12, -3122,
   -3122,  1786, 46024, -3122,  1749,  1534,  1535, 67188,  1488, 56493,
    2411,  1594,  1833,  1884, 72783, 56493,  1707,  1814,  1709,  1458,
    1951,  1714,  1162,  1715,  1465, 65163,  1717, -3122,  1797, -3122,
   70758, 48333, -3122, -3122, -3122, -3122, -3122,  1851,  1827, 67188,
   48333,  1479, -3122, -3122, 67188, -3122, 56493, 56493, -3122, 56493,
   67188, -3122,   687, 45970,  2000,   897, 42273, 49863, -3122, -3122,
   -3122, -3122,  1239,  1264, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122,  1167, 48333, -3122,  3477, 45020,  1485, 20096,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122,  1486,  1840, -3122, -3122,  6768,  1487, 45068,  1490, 24920,
   24920,   505,  2430, -3122, -3122, 24920,  1491,  1492, 50373, 44932,
    1494,  1510, 45322, 17416, 20096, 17416, 17416, 45422, -3122,  1512,
   45596, 61593,  1517, 56493, 55473, -3122, -3122, -3122, 20096, 20096,
    4473, 55983,  1550, -3122, 32262, -3122,  1813, 32262, -3122, -3122,
    3880, -3122, 32262,  1819, 20096, 32262, -3122,  1762,  1764,  1519,
   32262, -3122, 56493,  1527, 56493, -3122, -3122, 45970, -3122,  1518,
     758,  1528, -3122, -3122, -3122, -3122, -3122,  1577, -3122,  1577,
    1577, -3122, -3122, -3122, -3122,  1532,  1532,  1533, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122,  1537,  1073, -3122,  1577, -3122,  1532, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, 74283, -3122, -3122, -3122, -3122,   622,
     623, -3122,  1538, -3122, -3122, -3122, -3122,  1539, -3122,  1545,
    2018, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
    6869,   760,  1532,  6031, -3122, -3122, 20096, 20096, -3122, -3122,
    1541, 45970,  1590, -3122, -3122, 20096, 20096, -3122, -3122, -3122,
   -3122,  2069, -3122, 20096,  1577,  1577, -3122,  7254, -3122, 40425,
   17952,  1641,  1647,  2069, -3122,  2069, -3122,  7254,  2074,  2074,
    1551, 38383, -3122,  1724, 45635, -3122,  1561,  1960,  7889,  1555,
    1552, -3122,  1558,  1562, -3122, -3122, 42856,   153,   505,   505,
   20096, -3122,  2069, 20096, 41316, 41316, -3122,   219, 72288, 20096,
   20096, 20096, 20096, 20096, 20096, 20096, 20096, 46803,  1658,   187,
   67188, 20096, 20096, 29192,  1092, -3122, 20096,  1809, -3122,  1573,
   20096,  1661,   207, 20096, 20096, 20096, 20096, 20096, 20096, 20096,
   20096, 20096, -3122, -3122, 28672,   263,   592,  1921,  1941,   -41,
     526, 20096,  1933, 12056, -3122,  1933, -3122, -3122, -3122, -3122,
   -3122,   222, -3122, -3122,  1518,  1518, -3122, 67188, -3122, 56493,
     252, 52413, 20096, -3122, -3122,  1578,  1582,   651, -3122,  1646,
   -3122, -3122, 56493, -3122, 38893, 57003, 57003, -3122,  1894, -3122,
     390,  1581, -3122, 44893,  1849,  1894,    51, -3122, -3122, 25992,
    1718,  1897,  1835, -3122, -3122,  1807,  1817, -3122,  1606, 46162,
   21168, 21168, -3122,  1425, 45970,  1427, -3122, -3122, -3122, -3122,
   -3122, -3122,    74, -3122, 56493,   160, 36343, -3122,  1608,    87,
   -3122,  3522,  1961,  1925,  1746,   769,  1619, -3122,  1229,  1622,
   71268, 56493,  1922,  1872,  1924,   -62, 72288, -3122, -3122, -3122,
   -3122, 56493, 67188, 65673, 71778, 48843, 56493, 48333, -3122, -3122,
   -3122, -3122, 56493,   486, 56493,  7449, -3122, -3122, -3122, -3122,
     235, -3122, -3122, -3122, -3122, -3122, 67188, 56493, -3122, -3122,
     235, 67188, 56493,   235, -3122,  1259, 56493, 56493, 56493, 56493,
    1330, 56493, 56493,  1167, -3122, -3122, -3122, 21704,    16,    16,
    1854, 13664,   143, -3122, 20096, 20096,   267,   280, 67188,  1818,
   -3122, -3122,   766,  1870,   331, -3122,  1682, 56493, 56493, 56493,
   56493,  1898, 67188, 56493,  1572, -3122, -3122, -3122, -3122, -3122,
   -3122,  1644, -3122,  1649,  2017,  1814, -3122,  2021, 51903,   784,
     906,  2022,  1688,  2027, 14200, -3122, -3122,  1650, -3122, -3122,
    1653,  2151,  1911,  1873,  2041,  2192,  1667,  1918, -3122, -3122,
    1906, -3122, 67188,  2203, -3122,   113, -3122, 48333, -3122,   180,
   -3122,  1912,   202, -3122, 15808, 20096, -3122, -3122, -3122, -3122,
   -3122, -3122,  1257, 29709, -3122,   772, -3122, -3122,  2169,  1167,
    2169,   573, -3122, -3122,  2169, -3122,  2152,  2169, -3122, 72288,
   -3122,  8059, -3122, 20096, 20096, -3122, 20096,  2036, -3122,  2201,
    2201, 72288, 24920, 24920, 24920, 24920, 24920, 24920,   506,  1363,
   24920, 24920, 24920, 24920, 24920, 24920, 24920, 24920, 24920, 26528,
     313, -3122, 32262, -3122,   779,  2175, 20096, 20096,  2048,  2036,
   20096, -3122, 72288,  1689, -3122,  1691,  1693, 20096, -3122, 72288,
   -3122, 56493,  1697,     0,   112, -3122,  1699,  1700, -3122,  1610,
   -3122,   823,   864, 56493,  3642,  4136,  4540, -3122, -3122, 20096,
    2034,  3880, 32262, -3122, 20096,  1701, -3122, -3122, 32262,  2056,
   -3122, -3122, -3122, 36853,  3880, 72288,   780, -3122, 56493, 72288,
     828, 20096, -3122, 15808,  2231, 72288,  2196, 67188, 67188,  2233,
    1712,  1720,  2069,  1798, -3122,  1803,  1808,  1810, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, 72288, -3122,
   -3122, -3122, -3122,   314, -3122, -3122, -3122, -3122,  1719,  1716,
   20096, 20096,    91, -3122,  8362,  1721,  1728,  4963, -3122,  1722,
   -3122,  1733, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,  1738,
   -3122,  1743, -3122,  1745,  1766,  1767,  1751,  1757, 20096, 56493,
   -3122, 22240, -3122, 67188, -3122, -3122, 20096, 20096, 56493, -3122,
    2106, -3122,  1765,  1774,  8473, -3122, -3122, -3122,   234,  1054,
    6162,   526,  3193,  3193,  3193,  7254, -3122, -3122, -3122,  1768,
   -3122, 24920, 24920, -3122,  3793,  4440, 10984, -3122, -3122, -3122,
   -3122,  2102, -3122,   980, -3122,  1753, -3122, -3122,  5496, -3122,
   40425, 46299, 20096,   190, -3122, 20096, 29192, 20096,  1844,  3193,
    3193,  3193,   322,   322,   234,   234,   234,  1054,   526, -3122,
   -3122, -3122,  1770, 20096, 48333, -3122,  1772,  1776,  2133,  1365,
   20096, -3122, -3122, 32262,  1550,   -12,  1550,  2069, 41316, -3122,
    1006, -3122, -3122,  1006, 45970, 56493, -3122, -3122,  2053,  1779,
   32262,  1821,  2250,  2251, 67188, -3122, -3122,  1777,  1933,  1793,
    1834,  1834, -3122, -3122, -3122, -3122,  1799, 20096,  1824,  1799,
   -3122,  1894,    65,  2019,  1382,  1382,  1425,  2020, -3122, -3122,
    1850, -3122, -3122, -3122, 20096, 14736,  1429, -3122,  1435, -3122,
   -3122, -3122, -3122, -3122,  1784, -3122,  2072, -3122, 56493, -3122,
   -3122, 24920,  2264, 20096, 37363,  2265,  2054, -3122, -3122, -3122,
    1887,  1408, 20096,  2045, -3122,   111,  1801,  2174,   -49,  2125,
   67188, -3122,   395,   456, -3122,   853,  2179,   202,  2181,   202,
   48333, 48333, 48333,   859, -3122, -3122, -3122,  1167, -3122,   293,
     876, -3122, -3122, -3122, -3122,  1895,   990,  1814,  1408, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122,   223,  1003,  1408,  1901,
   -3122,  1913, -3122,  1914,  1055,  1408, -3122, -3122,  1645,  9374,
   45970,   630,   143,   143,   143, 15808, -3122,  2047,  2066,  1838,
   45970, 45970,   163, -3122, -3122, -3122, -3122,  1828, -3122,   327,
   -3122, 67188, -3122, -3122, -3122,  1818,  1884, 56493,  1814,  1836,
    2323,  1162,  1465, 56493,  1797, -3122,  2005,   949,   183, -3122,
   67188, 56493, 56493, 56493, 66183, -3122, -3122, -3122,  1841,  1839,
   -3122,    75,  2076,  2077, 56493,  1886, 56493,  1413,  2335, 56493,
   -3122,   883,  1465,  1465, 18488,  2223,  2373, 67188, -3122, 48333,
    2226, 56493,  1827, -3122, -3122, -3122, -3122, 67188, -3122, -3122,
   45970, -3122,  1847, -3122, 20096, 49353, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, 48333, -3122,  1167, -3122,  1167,  2095, 67188,
   43366,  1167, 43876,  1167,  1853, -3122, 45970,  8613, 45970,  2048,
   -3122,   245,  2201,   801,   801,   801,  6357,  2210,   211,  1857,
     801,   801,   801,   441,   441,   245,   245,   245,  2201,   313,
    2876,   890, 50373,  1859, -3122, 45970, 45970, -3122, -3122,  1861,
   -3122, -3122, -3122, -3122,  1863,  1864, -3122, -3122, -3122, -3122,
   -3122, -3122, 67188,  1415,  1550,   371,   371,   371,   371, -3122,
   56493, 56493, 56493, 45970,  2331,  2206, -3122,  3880, 45970, 56493,
   -3122, 27600, 56493, -3122,  2227, -3122,  2318, -3122, 56493,   903,
   -3122, -3122, -3122,   915,  1877,  1720, 72288,   944,   971, -3122,
    2069,   177,  1879,  1546,   925,   796,  1437, -3122, 53433, -3122,
   -3122,  1880, 45723, 20096, -3122,  2255, -3122, -3122, -3122, 20096,
   20096, -3122, 40425, -3122, -3122, -3122, -3122,   290,   290, 40943,
    1881, 10984, 45771, -3122, -3122,  2200,  1868, -3122, 40965, 45970,
   -3122,  1724, -3122, -3122, 41316, 20096,  4397,  5083, 20096,  1882,
   20096,  2232, -3122, -3122,  1890, -3122, -3122, 72288, 20096,  1883,
    5706, 24920, 24920,  5861, -3122,  6551, 20096, 10984, -3122, 42045,
    1866,  1892,  1854, 19024, -3122,  2107,  1896, -3122,  2034,   143,
    2034,  1899, -3122, -3122, -3122, -3122,  6031, -3122, 20096,  2044,
   67188,   713,  2696,   995, -3122,   505, 38893,  1821, 20096, -3122,
   -3122,   231, -3122, -3122,  1903, -3122,  1799, -3122, -3122, -3122,
    2123, -3122, -3122, -3122, 56493, -3122,  1900, -3122, 36343,  2238,
   11520, -3122, 36343, 56493, 56493, 41013,  2270, -3122, 67188, 67188,
   67188, -3122, 67188,  1902,  1910,   253,  1905,   909, -3122,  1980,
     253,  2239,   265,  1413,   242,  3486,   428, -3122, -3122, -3122,
    1972, 56493, -3122, 67188, -3122, -3122, -3122, -3122, -3122, 48843,
   -3122, -3122, 39914, 48333, -3122, 48333, 56493, 56493, 56493, 56493,
   56493, 56493, 56493, 56493, 56493, 56493,  1257, 20096, -3122, 20096,
    1923,  1926,  1927,  1854, -3122, -3122, -3122,   227, -3122,  1928,
   -3122, -3122, -3122,   299, -3122,   327,  1915, -3122, 51903,  2667,
    1688, -3122,  1653,  2113,  1929,  1884,   948, 66678, -3122,  1930,
    1908,  1004,  1814,  1932,  2386, -3122,   784, 51903, -3122, -3122,
   -3122,  2341, -3122,   817,   213, -3122,  1162, -3122,  2667,  1465,
   -3122, -3122,  2412, -3122,  2414,  2667, 45970, 56493,  2170,  1797,
    1008, 67188,  1999, -3122,   202,  1014, -3122, -3122, -3122, -3122,
   -3122, 67188,  1934, -3122,  1934, -3122, -3122,  1934, -3122, -3122,
   -3122, -3122, 24920,  2294,  1944, 72288, 61593, 32262, -3122, -3122,
   56493, -3122, -3122, -3122,  1025,  1946,  2034, 56493, 56493, 56493,
   56493, -3122, -3122, -3122, 19560, 20096,  1984, -3122,  1947, 12592,
    2276, -3122, 27064, -3122, -3122,  1950, 36853, 67188, -3122, -3122,
   -3122, -3122,  2069, -3122, -3122, 67188, -3122,  1954, -3122,  1955,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122, 20096,
   45970, -3122, 45970, -3122, -3122, -3122, -3122, -3122, -3122,  7349,
   -3122,  1949,  1956, 67188, 20096, 67188, -3122, -3122, -3122,   433,
   20096, 20096,  3793, -3122,  5753, 20096, 72288,  1027,  3793,   311,
   20096,  5566,  5873, 20096, 20096,  6655, 41035, -3122, 22776, 15272,
   -3122,  1959, 20096, 41113, 39403, -3122, 32262,  2206,  1965,  2206,
    1167,  1966, 45970, 20096, -3122, -3122, -3122, -3122,  2023,    33,
   33792,  2207, -3122,  1988, 67188, -3122,  2044, 45970, -3122, -3122,
   40425, -3122, -3122, -3122, -3122, -3122,  2448,   335,  1978,  1981,
   -3122,  1354, -3122, -3122, 67188,  1990, -3122,  1993,   253, -3122,
   67188,  2038, -3122,   283,  2302,   129, -3122, 20096, -3122,  2397,
    2487,  1980,  2002, 67188, 56493, 24920, -3122,   288,   277, -3122,
    2307, 56493,  2038,  2452, -3122, -3122, -3122,   909, -3122,  2346,
    2261, -3122,   235, -3122, 20096,   909,  2262,   205, 67188, -3122,
   -3122,  2432, -3122, 72288,   202,   202, -3122,  1528,  2026,  2028,
    2029,  2031,  2033,  2037,  2042,  2046,  2050,  2051, -3122,  2052,
    2057,  2058,  2062,  2067,  2068,  2071,  2075,  1537,  2081, -3122,
    2082,  1903,  2088,  2089,  2091,  2092,  2103, 73278,  2104,  2105,
    2109,  2110,  1538,  2111,  1239,  1264, -3122, -3122, -3122, -3122,
    2112, -3122, -3122, -3122,  1200,  2035, -3122, -3122, -3122,  2127,
   -3122,  2130, -3122, -3122, -3122, -3122, -3122, -3122,  2079,  2080,
   -3122, -3122, -3122,   143,  2055,  2096, 67188,  1257,   116, 67188,
    2108,  1886,  2511,  2560, 48333,  1361,  2295,  2115, -3122,  1167,
    1688, -3122, 51903,  1973,   851,  2077, -3122,   279,  1886, -3122,
    2477,  1688,  2154, -3122,  1653,  2218, 20096,   155, -3122,  2327,
     214,  2342,  2119, -3122,  2355, 67188,  2124, -3122, -3122, 49353,
    1934,  6517, 24920, 72288,  1048, -3122,  3746,  1052, -3122,  2643,
    2293,  2206, -3122, -3122, -3122, -3122, -3122,  2128,    -9,  2129,
   10448,  2131, -3122, -3122, -3122, -3122, -3122, -3122, 45970, 45970,
   67188,  2314, -3122, -3122,  2134,  2132, 37873,  2601,  2135, -3122,
   -3122,  2461, -3122, 30731, -3122,  1720,  2136,  1720, 72288,  1720,
   -3122, -3122, 45970, 20096, -3122, -3122, 42156,  2473, -3122,  3793,
    3793,  5753,  1079, -3122,  3793, 20096, 20096,  3793,  3793, 20096,
   -3122,  9911,   632, -3122,  1081, -3122, 41343, -3122, 73773, -3122,
   -3122,  1984,  1167,  1984, -3122, -3122,  2139, -3122, -3122, -3122,
    2197, -3122, -3122,  1083,  2580,  2044, 20096, -3122, -3122,  2147,
   36343, -3122, -3122, -3122, -3122, 36343,   253, -3122,  2325,  2038,
    2150, -3122, -3122, -3122, -3122, -3122, -3122, 41426, -3122,    69,
   20096, -3122,   808,  6357, -3122, -3122, -3122, -3122,  2038,  1162,
   -3122, 56493,  2645,  2530, -3122, -3122, 45970, -3122, -3122,  2069,
    2069, -3122, -3122,  2318, -3122, -3122,  2157, -3122, -3122,  1200,
     643, 39914, 56493, 56493, -3122, -3122,  2163, -3122, -3122, -3122,
   -3122, -3122,   299,  2565,  1087,   784, -3122,  2667,  2170,  1089,
   56493,  2541, 51903, -3122,  2655,  2166, 56493,  1886,   204,   204,
   -3122,  2320, -3122,  2321, -3122, -3122,  2660,   307, -3122,  1355,
    2697,   704, 56493, 56493, -3122,  2172, 48333, 56493, -3122, -3122,
   33282, -3122,  6517,  1102, -3122, 61593, -3122,  2173,  2180, -3122,
    1984, 20096,  2183, 20096, -3122, 23312,  2675,  2182, -3122, 20096,
    2248, 28136, -3122, 20096, -3122, 56493, 61593,  2189, 61593, -3122,
   -3122, -3122, -3122, -3122, 20096, -3122,  3793,  3793,  3793, 20096,
   -3122, 20096, -3122, -3122, -3122,  2402,  2314, -3122,  2314, 20096,
    2667,   505,  2649, 67188,     7, -3122, 45970, -3122, -3122, -3122,
   56493, -3122, 48333, -3122,   253,   409,  2193, 20096, 41596,  2435,
   -3122, -3122,  2470, -3122,  2531, -3122,  2258,   674,  2279, -3122,
   -3122, -3122, -3122,  1257,  1167,  1688,  2077,  2154,  2429, -3122,
    2211, 56493,  2667,   784,   817, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122, -3122, -3122, -3122, -3122, -3122,  2667,  2668,
    2442,  2669, -3122,  2170,  2106, 56493,  2588,  2588, 67188,  1105,
    1999, 20096,   247, -3122,  1130,  2684, -3122, -3122, -3122,  2758,
    2314,  2240, 23312,  2241, -3122,  2244, 67188, 45970,  2388, -3122,
   -3122,  2247, -3122, -3122, 20096, -3122, 42349,  2263,  2266,  2710,
    1854,  2248,  2248, -3122,    33, -3122, -3122,  2686, 33282,  2659,
    1162,   253,  2277,  1145, -3122, -3122, -3122, -3122, -3122,  1814,
   -3122, 41673,  2518,   124,  2503,  2193, 20096, -3122,  2348, -3122,
   -3122, -3122,  2766, -3122, -3122,  2278, 51903,  2280,  2154,  2077,
    1886,  2154,  2512, -3122,  2513,  2507, -3122,  2285,  2677, -3122,
   -3122, -3122,  2287,  2275, -3122,  2290, 41743, 67188, 67188,  1688,
   33282, 67188,  2291,  2248, -3122,  2292, -3122, -3122, -3122, 55473,
   -3122,  2296, -3122, -3122, -3122, 20096,   125, -3122, -3122,  2351,
   56493,  1171,    82,  2470, 39914, -3122, 48333,   870,   409,  2619,
   -3122, -3122, -3122, -3122,   159,  2532, -3122,  2533, -3122, 45970,
   -3122,  2667, 67188, 51903, -3122, -3122, -3122, -3122, -3122, -3122,
    2301, -3122, 56493,  2534, 67188, 33282,  2684, -3122,   390, -3122,
    1550, -3122,   390, -3122, -3122, -3122, -3122, -3122,  1494, 23848,
   23848, 23848,  2303,  2667, -3122,  1550, -3122,  2433,  2503, -3122,
   -3122, -3122, -3122, -3122,   191,   191,  2713, -3122,  2371, -3122,
    2154,  2312, 67188,  2588,  2315, -3122, -3122,  1173, 67188,  1799,
   -3122,  1799, 25456,  2468,   237, 44971,  2700, -3122,  2700,  2700,
   -3122, -3122, -3122, 38893, -3122, -3122,  2825, -3122,   209, -3122,
   -3122, -3122,  2534,  2322, -3122, 56493,  1688,   390, -3122, -3122,
    2815, -3122, -3122, -3122, -3122, -3122,   325, -3122, -3122, -3122,
    1550,   253, -3122, -3122, -3122, -3122,  2534,  2326,  1550,  1799,
   24384,  2479, -3122,  2553, -3122, -3122, -3122, -3122, -3122, -3122,
   -3122, -3122, -3122
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
    1459,    78,     0,  1544,  1543,   293,    78,     0,   286,     0,
      78,   166,   588,     0,   110,   109,     0,   212,    78,     0,
    1459,     0,   596,     0,     0,     0,   640,   643,   641,     0,
       0,     0,    78,   680,     0,   111,    78,     0,     0,   672,
     642,     0,   202,     0,     0,     0,     0,     0,     2,     4,
       5,     6,     7,     8,     9,    24,    10,    11,    12,    13,
      20,    14,    15,    16,    17,    18,    19,    21,    22,    23,
      26,    25,    27,    28,  1500,    29,    30,    31,    32,     0,
      33,     0,    34,    35,    36,    37,   616,   602,   685,   615,
       0,     0,  1458,   784,   623,    38,    40,    39,    41,    42,
      43,    44,    45,   112,   108,    46,    77,    76,    70,     0,
       0,     0,     0,     0,   292,     0,     0,    81,   427,  1561,
    1562,  1563,  1564,  1565,  1566,  1567,  1568,  1569,  1570,  1571,
    1945,  1572,  1573,  1574,  1575,  1576,  1946,  1577,  1578,  1579,
    1891,  1892,  1947,  1893,  1894,  1580,  1581,  1582,  1583,  1584,
    1585,  1586,  1587,  1588,  1589,  1895,  1896,  1590,  1591,  1592,
    1593,  1594,  1897,  1948,  1898,  1595,  1596,  1597,  1598,  1599,
    1949,  1600,  1601,  1602,  1603,  1604,  1605,  1606,  1607,  1608,
    1950,  1609,  1610,  1611,  1612,  1613,  1614,  1615,  1616,  1617,
    1618,  1899,  1619,  1620,  1900,  1621,  1622,  1623,  1624,  1625,
    1626,  1627,  1628,  1629,  1630,  1631,  1632,  1633,  1634,  1635,
    1636,  1637,  1638,  1639,  1640,  1641,  1642,  1643,  1644,  1645,
    1646,  1647,  1648,  1901,  1649,  1650,  1651,  1652,  1653,  1654,
    1902,  1655,  1656,  1657,  1903,  1658,  1659,  1660,  1951,  1952,
    1661,  1662,  1904,  1954,  1663,  1664,  1905,  1906,  1665,  1666,
    1667,  1668,  1669,  1670,  1671,  1672,  1673,  1955,  1674,  1675,
    1676,  1677,  1678,  1679,  1680,  1681,  1682,  1683,  1684,  1685,
    1956,  1907,  1686,  1687,  1688,  1689,  1690,  1908,  1909,  1910,
    1691,  1957,  1958,  1692,  1959,  1693,  1694,  1695,  1696,  1697,
    1698,  1699,  1960,  1700,  1961,  1701,  1702,  1703,  1704,  1705,
    1706,  1707,  1708,  1911,  1709,  1710,  1711,  1712,  1713,  1714,
    1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,
    1725,  1726,  1727,  1728,  1729,  1912,  1963,  1913,  1730,  1731,
    1732,  1733,  1914,  1734,  1735,  1964,  1736,  1915,  1737,  1916,
    1738,  1739,  1740,  1741,  1742,  1743,  1744,  1745,  1746,  1747,
    1917,  1965,  1748,  1749,  1966,  1918,  1750,  1751,  1752,  1753,
    1754,  1755,  1756,  1757,  1758,  1759,  1760,  1761,  1762,  1763,
    1919,  1967,  1764,  1765,  1920,  1766,  1767,  1768,  1769,  1770,
    1771,  1772,  1773,  1774,  1775,  1776,  1777,  1778,  1779,  1921,
    1780,  1781,  1782,  1783,  1784,  1785,  1786,  1787,  1788,  1789,
    1790,  1791,  1792,  1793,  1794,  1795,  1796,  1797,  1798,  1968,
    1799,  1800,  1801,  1922,  1802,  1803,  1804,  1805,  1806,  1807,
    1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,  1816,  1817,
    1818,  1819,  1820,  1923,  1821,  1822,  1969,  1823,  1824,  1924,
    1825,  1826,  1827,  1828,  1829,  1830,  1831,  1832,  1833,  1834,
    1835,  1836,  1837,  1925,  1838,  1926,  1839,  1840,  1841,  1971,
    1842,  1843,  1844,  1845,  1846,  1847,  1848,  1927,  1928,  1849,
    1850,  1929,  1851,  1930,  1852,  1853,  1931,  1854,  1855,  1856,
    1857,  1858,  1859,  1860,  1861,  1862,  1863,  1864,  1865,  1866,
    1867,  1868,  1869,  1870,  1932,  1933,  1871,  1872,  1972,  1873,
    1874,  1875,  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,
    1884,  1885,  1886,  1934,  1935,  1936,  1937,  1938,  1939,  1940,
    1941,  1942,  1943,  1944,  1887,  1888,  1889,  1890,     0,   428,
     429,  1372,   424,     0,  1350,   427,  1904,  1911,  1925,   284,
     285,   428,     0,    73,   165,     0,     0,     0,     0,     0,
       0,   214,     0,   582,   581,     0,   130,   587,     0,     0,
       0,   431,   450,  1766,   430,  1349,   448,   437,  2115,  2116,
    2117,  2118,  2002,  2119,  2120,  2121,  2122,  2003,  2123,  2004,
    2005,  2006,  2007,  2008,  2009,  2124,  2125,  2126,  2011,  2010,
    2127,  2012,  2128,  2013,  2129,  2014,  2015,  2130,  2131,  2016,
    1615,  2017,  2018,  2132,  2133,  2134,  2135,  2136,  2137,  2138,
    2139,  2140,  2019,  2020,  2141,  2142,  2143,  2021,  2144,  2145,
    2022,  2146,  2023,  2024,  2025,  2147,  2148,  2149,  2026,  2027,
    2150,  2028,  2151,  2152,  2029,  2030,  2033,  2031,  2153,  2032,
    2154,  2034,  2035,  2036,  2155,  2156,  2037,  2038,  2157,  2158,
    2039,  2040,  2041,  2042,  2043,  2159,  2044,  2160,  2045,  2046,
    2161,  2162,  2163,  2164,  2165,  2048,  2047,  2049,  2050,  2166,
    2167,  2168,  2169,  2051,  2052,  2053,  2170,  2171,  2172,  2054,
    2173,  2174,  2055,  2056,  2175,  2057,  2058,  2176,  2059,  2060,
    2177,  2061,  2062,  2178,  2179,  2180,  2063,  2181,  2182,  2064,
    2065,  2183,  2184,  2066,  2067,  2185,  2068,  2186,  2187,  2188,
    2189,  2069,  2070,  2190,  2071,  2191,  2192,  2193,  2194,  2072,
    2073,  2074,  2075,  2076,  2077,  2078,  2079,  2080,  2081,  2082,
     289,   439,   438,   440,     0,  1404,  1405,     0,  1415,     0,
    1397,  1402,  1398,     0,  1396,  1424,  1417,  1425,  1406,  1395,
    1418,  1407,  1394,   213,     0,  1426,  1412,  1400,     0,     0,
       0,     0,    74,   100,   588,     0,  1459,     0,  1504,  1505,
    1506,  1507,  1508,  1509,  1515,  1510,  1511,  1514,  1512,  1513,
    1516,  1517,  1518,  1519,  1520,  1495,  1500,  1521,  1522,  1523,
    1524,  1525,  1526,  1527,  1528,  1529,  1530,  1531,  1532,  1533,
    1534,  1535,     0,   286,     0,  1897,  1948,  1902,     0,  1915,
       0,  1918,  1919,     0,  1802,  1926,  1929,  1930,  1931,  1932,
       0,   856,   430,   425,   840,     0,   618,   788,   798,   840,
     845,  1129,   868,  1130,     0,   432,   598,   597,   591,    67,
      84,  1440,  1663,  1703,  1819,  1927,  1849,  1871,   115,  1441,
    1434,  1439,    75,   679,   677,     0,  1321,  1663,  1703,  1806,
    1819,  1927,  1871,   321,   326,     0,    81,   117,   102,     0,
     103,   430,   624,   671,     0,   247,   201,     0,   206,     0,
    1782,   651,   654,  1381,   652,   616,     0,     0,     1,  1459,
    1499,   347,     0,  1465,     0,     0,   675,   675,     0,   675,
       0,   608,     0,     0,   616,   611,   615,   785,   114,  1927,
    1849,   101,   104,  1672,     0,     0,  1672,     0,  1672,     0,
    1672,     0,     0,   295,     0,    71,  1305,     0,  1351,   433,
       0,     0,   279,   275,   280,   276,   274,   281,   273,   272,
     282,   278,     0,     0,     0,   553,   586,   585,   584,   583,
     588,  1672,    52,     0,   317,   253,   252,   318,     0,     0,
       0,   251,     0,     0,     0,   210,   125,   451,   449,  1672,
     290,  1413,  1414,     0,  1403,  1399,  1401,     0,     0,  1672,
    1376,  1423,  1419,  1672,  1423,  1343,  1672,     0,     0,    92,
       0,   581,  1497,  1536,  2069,  1537,  1538,  1550,     0,  1551,
    1541,  1503,  1459,     0,   164,   283,     0,     0,     0,  1251,
     840,   845,     0,     0,   858,     0,  1271,     0,     0,  1277,
       0,     0,     0,   840,   623,     0,   798,   857,   426,     0,
     838,   839,   726,   726,   680,     0,   661,   850,     0,     0,
     853,   851,     0,   853,     0,     0,     0,   853,   849,   808,
       0,   726,     0,   838,   841,   726,     0,   860,  1387,     0,
       0,     0,     0,  1437,  1435,  1436,  1442,     0,  1438,     0,
       0,  1353,  1355,  1356,  1219,  1366,  1107,     0,  1892,  1893,
    1894,  1294,  1895,  1896,  1898,  1899,  1900,  1065,  1635,  1901,
    1364,  1903,  1905,  1906,  1908,  1909,  1910,  1911,  1912,  1913,
       0,  1365,  1916,  1743,  1921,  1922,  1924,  1927,  1928,  1363,
    1933,     0,     0,     0,  1332,  1242,     0,     0,  1106,     0,
       0,  1298,  1306,  1099,     0,     0,   904,   905,   926,   927,
     906,   932,   933,   935,   907,     0,  1328,   999,  1095,  1316,
    1104,  1112,  1108,  1109,  1149,  1110,  1128,  1113,  1186,  1105,
       0,  1111,  1097,  1324,   661,  1322,     0,  1098,  1352,   661,
    1320,   324,   322,   329,   323,     0,   325,     0,     0,     0,
      72,     0,   426,  1553,  1554,   200,   198,   199,   197,   196,
     203,     0,   205,  1500,  1237,  1239,     0,   653,     0,     0,
       0,   605,   604,   606,     3,  1381,     0,     0,     0,  1653,
       0,   599,   673,   674,     0,     0,     0,     0,     0,     0,
       0,     0,   769,   700,   701,   703,   766,   770,   778,     0,
       0,     0,     0,     0,   612,     0,   113,   107,   105,     0,
       0,     0,   423,   423,     0,     0,     0,     0,     0,   403,
     352,   396,     0,     0,     0,     0,   230,   243,     0,     0,
       0,     0,     0,   240,     0,     0,   223,   217,   219,   354,
       0,   423,     0,   350,     0,     0,     0,   356,   293,     0,
     164,    79,    80,  1304,     0,   435,   436,   434,   427,     0,
    2083,  1945,  1946,  1947,  1948,  1898,  1949,  1950,     0,  1951,
    1952,  1904,  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,
    1911,  1963,  1964,  1965,  1966,  1967,  1968,  2109,  1969,  1925,
    1971,  1931,     0,  1972,  1121,   428,  1369,  1245,   685,  1243,
    1382,     0,     0,   277,     0,     0,     0,     0,   162,     0,
       0,     0,     0,    48,     0,     0,  1672,   346,  1672,   553,
       0,  1672,   553,  1672,     0,     0,  1672,   211,   215,   124,
     127,     0,  1416,  1411,  1409,  1408,  1410,  1672,  1493,     0,
       0,  1377,  1421,  1422,     0,  1389,     0,     0,  1391,     0,
       0,    97,     0,    95,     0,   588,  1459,     0,   224,  1546,
    1547,  1545,     0,     0,  1502,   227,  1540,  1549,  1539,  1548,
    1501,   244,  1496,     0,     0,  1385,   150,     0,     0,     0,
    1252,   975,   974,   956,   957,   972,   973,   958,   959,   966,
     967,   977,   976,   964,   965,   960,   961,   954,   955,   970,
     971,   962,   963,   968,   969,   952,   953,  1266,  1253,  1254,
    1255,  1256,  1257,  1258,  1259,  1260,  1261,  1262,  1263,  1264,
    1265,     0,     0,   797,   795,     0,     0,     0,     0,     0,
       0,  1298,     0,  1070,  1105,     0,     0,     0,     0,  1237,
    1276,     0,     0,     0,     0,     0,     0,  1237,  1282,     0,
       0,   824,   836,     0,   719,   725,   796,   794,     0,  1321,
     789,     0,   870,   850,     0,   849,     0,     0,   852,   846,
       0,   847,     0,     0,     0,     0,   848,     0,     0,     0,
       0,   792,     0,   836,     0,   793,   867,   332,   340,    68,
       0,  1373,  1973,  1974,  1975,   914,  1976,   943,   921,   943,
     943,  1977,  1978,  1979,  1980,   910,   910,   923,  1981,  1982,
    1983,  1984,  1985,   911,   912,   948,  1986,  1987,  1988,  1989,
    1990,     0,     0,  1991,   943,  1992,   910,  1993,  1994,  1995,
     915,  1996,   878,  1997,     0,  1998,   913,   879,  1999,   951,
     951,  2000,     0,   938,  2001,  1374,  1375,     0,  1248,   888,
     896,   897,   898,   899,   924,   925,   900,   930,   931,   901,
     998,     0,   910,  1459,  1443,   116,     0,  1242,  1114,   942,
     929,  1293,     0,   937,   936,     0,  1242,   919,   918,   917,
    1101,     0,   916,  1199,   943,   943,   941,  1024,   920,     0,
       0,     0,     0,     0,   947,     0,   945,  1025,  1003,  1004,
       0,     0,  1331,  1340,  1237,  1241,     0,  1099,  1237,     0,
       0,  1189,  1191,     0,  1116,  1117,     0,  1299,  1354,  1100,
       0,  1359,     0,     0,   998,   998,  1327,  1219,     0,  1209,
    1212,     0,     0,  1216,  1217,  1218,     0,     0,     0,  1319,
       0,  1227,  1229,     0,     0,  1040,  1225,     0,  1043,     0,
       0,     0,     0,  1213,  1214,  1215,  1205,  1206,  1207,  1208,
    1210,  1211,  1223,  1204,  1021,     0,  1096,     0,  1152,     0,
    1020,  1325,   787,     0,  1357,   787,   334,   338,   339,   337,
     333,     0,   328,   327,   330,   331,   118,     0,  1555,   194,
       0,   191,  1240,   782,   655,  1345,     0,   659,   348,  1560,
    1464,  1463,     0,    91,     0,     0,     0,   592,   628,   627,
     694,   686,   688,   694,     0,   626,     0,   742,   743,     0,
       0,     0,     0,   775,   773,  1353,  1366,   730,   704,   729,
       0,     0,   708,     0,   734,   999,   768,   610,   698,   699,
     702,   609,     0,   771,     0,   781,     0,   647,   649,   632,
     646,   644,   629,   637,   769,   703,     0,   106,     0,     0,
       0,     0,     0,  1672,     0,     0,   881,   387,   368,   505,
     422,     0,     0,     0,     0,     0,     0,     0,   395,   392,
     393,   394,     0,     0,     0,     0,  1373,   228,   229,   242,
       0,   233,   234,   231,   235,   236,     0,     0,   221,   222,
       0,     0,     0,     0,   220,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   294,   287,  1300,  1305,   685,   685,
     685,     0,   683,   684,     0,     0,     0,     0,     0,   149,
     551,   561,     0,     0,     0,    52,     0,     0,     0,     0,
       0,     0,   210,     0,   588,    53,    56,    51,    55,    54,
      57,  1642,  1429,     0,     0,   345,   342,     0,   550,   524,
       0,     0,   129,     0,     0,   312,   310,   313,   302,   315,
     305,     0,  1672,     0,     0,     0,     0,  1672,   540,   126,
       0,   291,     0,     0,  1491,  1423,  1378,     0,  1420,  1423,
    1344,     0,  1423,    99,     0,     0,  1498,  1542,   225,   245,
     226,   246,   164,   159,   189,     0,   167,   172,   147,     0,
     147,     0,   169,   173,   147,   168,     0,   147,   163,     0,
    1144,     0,  1134,     0,     0,   859,     0,     0,  1135,  1072,
    1073,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1090,
    1089,  1136,     0,   863,     0,   866,     0,     0,  1274,  1275,
       0,  1137,     0,     0,  1281,     0,     0,     0,  1142,     0,
     799,     0,     0,     0,   714,   718,   721,     0,   724,   661,
     617,  1663,  1703,     0,   672,   672,   672,   670,   660,     0,
     746,     0,     0,   825,     0,     0,   827,   829,     0,     0,
     832,   807,   806,     0,     0,     0,     0,   871,     0,  1349,
       0,     0,    69,     0,     0,     0,   896,     0,     0,     0,
     886,   882,     0,   978,   979,   980,   981,   982,   983,   984,
     985,   986,   987,   988,   989,   990,   902,    83,     0,   908,
      88,    89,    86,     0,    82,    85,    87,    90,     0,     0,
       0,     0,  1292,  1288,     0,     0,     0,     0,  1194,  1196,
    1198,     0,   940,   939,  1203,  1209,  1212,  1216,  1217,  1218,
    1213,  1214,  1215,  1205,  1206,  1207,  1208,  1210,  1211,     0,
    1231,     0,  1185,     0,     0,     0,     0,     0,     0,     0,
    1330,     0,  1068,     0,  1118,  1103,     0,     0,  1192,  1119,
    1332,  1307,     0,     0,     0,  1362,  1361,  1000,  1009,  1012,
    1044,  1045,  1016,  1017,  1018,  1022,  1384,  1383,  1326,     0,
    1318,     0,     0,  1001,  1026,  1031,     0,  1283,  1286,  1061,
    1285,     0,  1049,     0,  1039,     0,  1047,  1051,  1027,  1042,
       0,  1023,     0,  1319,  1228,  1230,     0,  1226,     0,  1013,
    1014,  1015,  1005,  1006,  1007,  1008,  1010,  1011,  1019,  1202,
    1200,  1201,     0,  1305,     0,  1317,     0,     0,  1154,     0,
       0,  1046,  1323,     0,   870,   685,   870,     0,   998,  1556,
    1381,   204,   193,  1381,  1238,  1346,  1380,   657,     0,     0,
       0,  1558,  1450,  1454,     0,  1306,  1484,  1486,   787,     0,
     599,   599,   601,   600,   692,   693,   697,     0,     0,   697,
     676,   625,  1922,  1802,     0,     0,     0,     0,   735,   776,
       0,   767,   732,   733,     0,   731,  1353,   736,  1352,   737,
     740,   741,   709,  1341,   777,   779,     0,   772,     0,  1347,
     631,   650,     0,     0,     0,     0,     0,   614,   613,   783,
       0,   353,     0,  1672,   370,     0,     0,     0,     0,     0,
       0,   455,     0,   555,   455,   408,  1672,  1423,  1672,  1423,
    1565,  1636,  1820,     0,   366,   529,   399,     0,   416,   558,
       0,   514,   389,   404,   409,     0,     0,   218,   355,   232,
     237,   412,   241,   238,   298,   239,   423,     0,   351,     0,
     410,     0,   296,     0,     0,   357,   414,   300,   295,     0,
    1304,     0,   683,   683,   683,     0,  1244,     0,     0,     0,
    1246,  1247,  1039,   269,   270,   271,   268,   135,   148,     0,
     552,     0,   161,   138,   139,   149,    50,     0,   346,   553,
       0,   553,     0,     0,   215,    52,     0,     0,  1431,  1427,
       0,     0,     0,     0,   551,   543,   541,   574,     0,   548,
     542,     0,     0,   500,     0,   446,     0,     0,     0,     0,
     319,     0,     0,     0,     0,     0,     0,   210,   216,     0,
       0,     0,  1493,  1494,  1388,  1379,  1390,     0,  1392,    98,
      96,  1386,  2039,   155,  1242,     0,   153,   160,   152,   154,
     157,   158,   151,     0,   146,     0,   182,     0,     0,     0,
       0,     0,     0,     0,     0,  1131,  1250,     0,  1269,  1268,
    1071,  1078,  1081,  1085,  1086,  1087,  1270,     0,     0,     0,
    1082,  1083,  1084,  1074,  1075,  1076,  1077,  1079,  1080,  1088,
       0,   868,     0,     0,   862,  1279,  1278,  1272,  1273,     0,
    1139,  1140,  1141,  1280,     0,     0,   837,   712,   710,   713,
     715,   711,     0,     0,   870,   672,   672,   672,   672,   669,
       0,     0,     0,   869,     0,   763,   831,     0,   855,     0,
     828,   811,     0,   819,     0,   826,   875,   842,     0,     0,
     844,   341,   892,     0,   887,   883,     0,     0,     0,   893,
       0,     0,     0,     0,     0,     0,     0,  1249,     0,   678,
    1115,     0,     0,     0,  1289,     0,  1067,   909,   922,     0,
    1197,  1120,     0,  1220,  1184,   950,   949,   951,   951,     0,
       0,     0,     0,  1339,  1297,     0,  1145,  1295,  1238,  1188,
    1190,  1340,  1102,   934,   998,     0,     0,     0,     0,     0,
       0,     0,  1050,  1041,     0,  1048,  1052,     0,     0,     0,
    1035,     0,     0,  1033,  1062,  1029,     0,     0,  1063,  1304,
       0,  1308,     0,     0,  1153,  1162,   790,   786,   746,   683,
     746,     0,   335,   195,   192,   658,  1459,  1559,     0,  1473,
       0,     0,     0,     0,  1476,  1490,  1487,  1558,     0,   593,
     594,     0,   687,   689,     0,  1221,   697,   691,   739,   738,
       0,   707,   774,   705,     0,   780,     0,   648,     0,   634,
       0,   810,     0,     0,     0,     0,     0,   504,     0,     0,
       0,   455,     0,   563,     0,   570,     0,     0,   555,   536,
     388,     0,     0,     0,   362,   407,   380,   372,   358,   386,
       0,     0,   391,     0,   384,   401,   402,   400,   405,     0,
     465,   490,     0,     0,   501,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   164,  1305,  1301,  1305,
       0,     0,     0,   685,   681,   682,  1122,     0,   134,   188,
     185,   186,   184,   223,   562,     0,     0,   344,   550,     0,
     129,   304,   307,     0,     0,    49,   588,     0,  1432,     0,
    1430,     0,   346,   553,     0,   528,   524,   549,   522,   521,
     523,     0,   447,   100,     0,   441,   553,   128,     0,     0,
     320,   311,     0,   316,     0,     0,   314,     0,     0,   215,
       0,     0,   123,  1492,  1423,     0,   142,   183,   190,   170,
     175,     0,   181,   177,   176,   171,   179,   178,   174,  1132,
    1143,  1267,     0,     0,     0,     0,   840,     0,   861,   864,
       0,  1138,  1133,   835,     0,     0,   746,     0,     0,     0,
       0,   663,   662,   668,     0,     0,  1156,   830,     0,     0,
       0,   817,   805,   812,   813,     0,     0,     0,   873,   872,
     843,   896,     0,   876,   896,     0,   896,     0,   894,     0,
     903,   991,   992,   993,   994,   995,   996,   997,   928,     0,
    1291,  1287,  1193,  1195,  1232,   946,   944,  1066,  1329,  1237,
    1334,  1336,     0,     0,     0,     0,  1187,  1069,  1360,  1002,
       0,     0,  1032,  1284,  1053,     0,     0,     0,  1028,  1220,
       0,     0,     0,     0,     0,  1037,     0,  1312,  1305,     0,
    1311,     0,     0,     0,     0,  1127,   791,   763,     0,   763,
       0,     0,  1557,     0,  1552,  1451,  1452,  1453,     0,     0,
       0,  1468,  1445,     0,     0,  1485,  1473,  1461,   695,   696,
       0,   690,   706,  1342,  1348,   633,     0,  1099,     0,     0,
     630,     0,   417,   455,     0,     0,   369,     0,   572,   516,
     564,   547,   531,     0,     0,     0,   456,     0,   589,     0,
       0,   537,     0,     0,     0,     0,   517,     0,     0,   476,
       0,     0,   547,     0,   554,   472,   473,     0,   361,   381,
       0,   377,     0,   406,     0,     0,     0,     0,     0,   364,
     376,     0,   359,     0,  1423,  1423,   367,  1373,  1973,  1974,
    1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,  2093,  1983,
    1984,  1985,  1986,  1987,  1988,  1989,  1990,  2102,  1991,   462,
    1992,  1743,  1993,  1994,  1995,  1996,  1997,     0,  1998,   879,
    1999,  2000,  2186,  2001,  1205,  1206,   460,   461,   557,   457,
    1374,   458,   565,   459,     0,   560,   515,   413,   299,     0,
     411,     0,   297,   420,   418,   415,   301,   288,     0,     0,
    1125,  1126,  1123,   683,     0,     0,     0,   164,   141,     0,
       0,   446,     0,     0,     0,     0,  1672,     0,  1428,     0,
     129,   343,   550,     0,   580,   500,   575,     0,   446,   444,
       0,   129,    66,   303,   306,     0,     0,   616,   308,     0,
       0,     0,     0,   207,     0,     0,     0,  1393,   156,     0,
     180,  1091,     0,     0,     0,   802,     0,     0,   722,     0,
     728,   763,   667,   666,   665,   664,   745,  1610,  1905,  1801,
       0,   749,   744,   747,   752,   754,   753,   755,   751,   762,
       0,   765,   854,  1233,  1235,     0,     0,     0,     0,   818,
     820,     0,   822,     0,   874,   890,     0,   891,     0,   889,
     884,   895,  1290,  1337,  1338,  1333,     0,   999,  1296,  1059,
    1057,  1054,     0,  1055,  1036,     0,     0,  1034,  1030,     0,
    1064,     0,     0,  1309,     0,  1148,     0,  1151,  1165,  1161,
    1160,  1156,  1122,  1156,   336,   656,  1472,  1449,  1475,  1474,
       0,  1306,  1482,     0,     0,  1473,     0,  1477,   349,     0,
       0,   645,   809,   638,   639,     0,   568,   371,     0,   547,
       0,   455,   533,   532,   535,   530,   534,     0,   590,     0,
       0,   474,     0,   481,   519,   520,   518,   475,   547,   553,
     477,     0,     0,     0,   373,   363,   360,   365,   374,     0,
       0,   375,   378,   875,   390,   383,  1373,  2102,  2111,     0,
       0,     0,     0,     0,  1303,  1302,     0,   137,   136,   187,
     133,   144,   223,     0,     0,   524,   443,     0,     0,     0,
       0,     0,   550,  1433,     0,     0,     0,   446,     0,     0,
     452,     0,   497,     0,    93,   445,     0,     0,    58,     0,
       0,     0,     0,     0,   255,     0,     0,     0,   121,   122,
       0,   143,  1092,     0,  1093,   840,   865,     0,     0,   720,
    1156,     0,     0,     0,   756,   750,     0,  1155,  1157,     0,
     717,  1236,   814,     0,   816,     0,   840,     0,   840,   823,
     885,   877,  1335,  1146,     0,  1056,  1060,  1058,  1038,  1305,
    1313,  1305,  1310,  1150,  1164,  1167,   765,  1358,   765,     0,
       0,  1460,     0,     0,  1457,  1444,  1462,  1222,   635,   636,
       0,   455,     0,   546,   569,   486,   464,     0,     0,     0,
     471,   478,   579,   480,     0,   382,   398,     0,     0,   559,
     421,   419,  1124,   164,     0,   129,   500,    66,     0,   209,
       0,     0,     0,   524,   100,   442,   513,   506,   507,   508,
     509,   510,   511,   512,   527,   526,   498,   499,     0,     0,
       0,     0,   309,     0,  1332,     0,   258,   258,   263,     0,
     123,     0,  1479,  1488,     0,  1479,  1094,   803,   723,     0,
     765,     0,     0,     0,   748,     0,     0,   764,     0,   621,
    1234,     0,   804,   800,     0,   801,     0,     0,     0,     0,
     685,   717,   717,  1446,     0,  1447,  1483,     0,     0,     0,
     553,   571,   545,     0,   538,   484,   483,   485,   489,     0,
     487,     0,   503,     0,   496,   464,     0,   385,     0,   566,
     132,   140,     0,   454,    60,     0,   550,     0,    66,   500,
     446,    66,     0,    63,     0,     0,   260,     0,     0,   257,
     254,   264,     0,   261,   208,     0,     0,     0,  1481,   129,
       0,  1481,     0,   717,   758,     0,   757,  1159,  1158,   719,
     815,     0,  1147,  1315,  1314,     0,  1171,   620,   619,     0,
       0,     0,     0,   579,     0,   525,     0,     0,   486,     0,
     479,   576,   577,   578,     0,   492,   482,   493,   379,   397,
     567,     0,   263,   550,    61,   453,    94,    59,    64,    65,
       0,   259,     0,   267,   262,     0,  1479,  1478,   694,  1480,
     870,  1489,   694,   727,   622,   759,   716,   821,  1166,     0,
       0,     0,     0,     0,  1456,   870,  1467,     0,   496,   544,
     539,   463,   488,   502,     0,     0,     0,   494,     0,   495,
      66,     0,   263,   258,     0,   248,   265,     0,  1481,   697,
     119,   697,  1891,  1611,  1856,     0,  1183,  1172,  1183,  1183,
    1163,  1448,  1455,     0,   455,   468,     0,   467,     0,   556,
     491,    62,   267,     0,   256,     0,   129,   694,  1469,  1470,
       0,  1176,  1175,  1174,  1178,  1177,     0,  1170,  1168,  1169,
     870,   573,   466,   470,   469,   250,   267,     0,   870,   697,
       0,     0,  1180,     0,  1181,  1466,   249,   266,   120,  1471,
    1173,  1179,  1182
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3122, -3122, -3122,  1975,    94,    96,  -904, -1217,  -953, -1221,
   -3122,  -106,    97, -3122, -3122,   196, -3122,  1066, -3122,   197,
    -828,   583, -3122,  1163, -3122, -3122,  1605,   549,    98,    99,
    2078, -3122,  1031, -3122,  2159,  2505,    95,  2812,  -525,  -899,
   -1247,     1,    18, -3122, -3122, -3122, -3122, -3122,  -743,   525,
   -1236, -3122,   459, -3122, -3122, -3122, -3122,  -205,   173, -2313,
       2, -2212, -2965,  -576, -3122,  -695, -3122,  -321, -3122,  -635,
   -3122, -1003,  -643,  -683, -2887, -1171, -3122,  1665,  -371, -3122,
     619, -3122, -2616, -3122, -3122,   609, -3122, -1203, -3122, -2234,
     165,  -625, -2661, -2608, -2216,  -925,   246,  -632,   225, -2163,
   -1318, -3122,   631, -3122,  -618, -3122,  -903, -1873,   102, -2821,
   -1684,   103, -3122,   516, -3122, -2166,   519, -2152,  1586,  -557,
       4, -1295, -2935, -3082,  -161, -2502, -3122, -3002,   104, -1687,
   -3122, -3122, -1708,    68, -2184,     5, -2141,   106, -3122, -3122,
     109,    19,  -591,   303, -3122,    -7, -3122, -3122, -3122,  -737,
   -3122, -2566,   115, -3122, -3122,  1563,  -938, -3122, -3122,   521,
     127,  1007, -3122, -2607, -3122,  -570, -3122,  -642,  -641, -3122,
   -3122,    39,  -920,  1548, -3122, -3122, -3122,     6, -3122,  -486,
   -3122, -3122, -2630, -3122,    24, -3122, -3122, -3122, -3122, -1519,
    -417,   315, -3122, -3122,  -573, -2618,  -515, -3122, -3059, -3121,
   -3122, -3122,  -681, -3094, -2096,   130, -3122,  2061,  -372,   131,
     132, -3122,   330,   133, -1166,    15,  3070,   -35,   -39, -3122,
     -26, -3122, -3122, -3122,   679, -3122, -3122,    22,    47,  1755,
   -3122, -1054, -3122, -1611,   477, -3122,  1931,  1937, -2185,  -884,
     -87, -3122,   706, -1696, -2173,  -679,  1174,  1744,  1729,   476,
   -2372, -3122,  -548, -3122,   122, -3122, -3122,   719,  1225, -1585,
   -1581, -3122, -2253, -3122,  -454,  -330, -3122, -3122, -3122, -3122,
   -3122, -2572, -2440,  -659,  1202, -3122,  1763, -3122, -3122, -3122,
   -3122,    21, -1508,  2955,   770,   -83, -3122, -3122, -3122, -3122,
     175, -3122,   958,  -151, -3122,  2165,  -680,  -797,  1977,  -215,
      89, -1834,   -11,  2178,   531, -3122, -3122,   528, -2126, -1433,
     487,  -237,   959, -3122, -3122, -1260, -3122, -1883, -1199, -3122,
   -3122,  -751,   446, -3122, -3122, -3122,  1128,  1876, -3122, -3122,
    2120,  2552, -3122,  -716,  2692,  -300, -1045,  1989,  -948,  1994,
    -947,  -958,  -954,  1995,  1996,  1997,  2001,  2003,  2004,  2006,
   -1557,  4823,   793,  3379, -2190, -3122, -1584,  1076,  1085,  1093,
      53, -3122, -1425,   128, -3122, -3122, -3122, -3122, -3122, -2271,
   -3122,  -424, -3122,  -408, -3122, -3122, -3122, -1720, -2760, -1751,
   -3122,  4283,   900, -3122,  -603,   484, -3122, -3122, -3122, -3122,
   -1560, -3122,  5869,   797, -3122, -2078, -3122, -3122,  -993,  -838,
    -636, -1020, -1239, -1960, -3122, -3122, -3122, -3122, -3122, -3122,
   -1509, -1807,  -219,   872, -3122, -3122,   964, -3122, -3122, -3122,
     182, -1496, -1768, -2137, -3122, -3122, -3122,   879,  1566,   148,
    -843, -1641, -3122, -2063, -2423, -3122, -3122,   482, -3122,  -614,
   -1131, -2486,   340,    31, -3122,  -970, -2575, -3122, -3122,  -745,
   -2717, -1118,  -908, -3122,   134,  1463,  2187,    25,   137, -3122,
     138,  1336, -3122, -3122, -3122,   141, -3122,   398,   142,   349,
   -3122,  1017, -3122,   695,    23, -3122, -3122, -3122,   181,  2945,
      10, -3071
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    47,    48,    49,   768,   769,  1875,  1820,  3016,  1258,
    1810,  1385,   770,  2666,  2667,  2668,  2293,  1239,  3467,  2294,
    1240,  1241,  2670,    53,    54,    55,   116,  1270,   771,   772,
     539,    58,  2343,   942,   821,  1121,   823,  1122,  1639,   929,
    1275,  1276,   773,  2708,  2355,  3252,  2765,  3253,  2425,  2349,
    1395,  2417,  1924,  1854,  1396,   547,  1938,  2766,  2713,  1925,
     774,  2655,  3018,  3460,  2681,  3619,  2954,  2955,  3457,  3458,
    2658,  2296,  3535,  3536,  2742,  1801,  3530,  2375,  3394,  2300,
    2281,  2956,  2383,  3353,  3064,  2297,  2936,  2376,  3453,  1899,
    2377,  3454,  3201,  2378,  1851,  1879,  2659,  3537,  2301,  1852,
    2654,  3019,  1789,  2379,  3464,  2380,   558,  2940,   775,  2745,
    1340,   776,  1885,  1886,  1887,  1888,  1889,  1890,   963,  1891,
     777,   964,  3081,  3488,  3489,  3492,  3493,  3595,   778,  1333,
    1867,    65,  1348,   559,  1896,   779,  1876,   780,  2729,  2730,
     781,   782,  1200,  2609,  2211,   541,   530,   531,  1566,   732,
    1316,   733,   783,   759,   760,   981,  1365,   761,    71,  1904,
     784,  1371,  1372,   989,    73,   891,  1387,   785,  1388,  1389,
     998,    74,  2767,  1000,  1001,    75,    76,   787,  3289,  3086,
    1350,  1900,  2388,   560,   788,  2901,  2213,  2612,  3449,    79,
    3182,  2216,  1198,  3185,  3413,  2894,  3180,  2613,  3498,  3558,
    3183,  2217,  2218,  3414,  2219,   789,    81,   838,  1727,   790,
     791,  1062,  2064,   792,  1792,   793,  1123,    87,    88,  1036,
      89,  3195,    90,    91,  1767,  1768,  1769,   869,   881,   882,
    2209,  1482,  2008,   874,  1204,  1736,   855,   856,  2339,   900,
    1843,  1731,  1732,  2226,  2622,  1760,  1761,  1213,  1214,  1996,
    3429,  1997,  1998,  1475,  1476,  3299,  1748,  1752,  1753,  2247,
    2237,  1739,  2495,  3111,  3112,  3113,  3114,  3115,  3116,  3117,
    1124,  2806,  3310,  1756,  1757,  1216,  1217,  1218,  1765,  2257,
      93,    94,  2194,  2596,  2597,   827,  3128,  1499,  1770,  2810,
    2811,  2812,  3131,  3132,  3133,   828,  1031,  1032,  1055,  1050,
    1489,  2016,   829,   830,  1973,  1974,  2464,  1057,  2010,  2026,
    2027,  2818,  2517,  1567,  2282,  1568,  1569,  2041,  1570,  1125,
    1571,  1597,  1126,  1602,  1573,  1127,  1128,  1129,  1576,  1130,
    1131,  1132,  1133,  1590,  1134,  1135,  1614,  2043,  2044,  2045,
    2046,  2047,  2048,  2049,  2050,  2051,  2052,  2053,  2054,  2055,
    2056,  1184,  1771,  1137,  1138,  1139,  1140,  1141,  1142,  1143,
    1144,  1145,   832,  1146,  2555,  1147,  1688,  2188,  2595,  3121,
    3307,  3308,  2885,  3170,  3335,  3440,  3572,  3606,  3607,  3637,
    1148,  1149,  1631,  1632,  1633,  2078,  2079,  2080,  2081,  2182,
    1682,  1683,  1150,  3023,  1685,  2101,  3124,  3125,  1185,  1468,
    1626,  1318,  1319,  1581,  1441,  1442,  1448,  1947,  1456,  1461,
    1978,  1979,  1469,  2149,  1151,  2072,  2073,  2535,  1592,  2556,
    2557,  1152,  1274,  1638,  2880,  2185,  1686,  2142,  1159,  1153,
    1160,  1155,  1622,  1623,  2553,  2851,  2852,  2112,  2254,  1715,
    2259,  2260,   985,  1156,  1157,  1158,  1320,   534,  1582,  3559,
    1361,  1190,  1321,  2138,   794,   108,   925,   795,   796,    98,
     797,  1180,   878,  1181,  1183,   798,   849,   850,   799,   863,
     864,  1508,  1702,  1509,   887,   103,   104,  1227,   851,   870,
     801,  3278
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     529,   901,    60,   928,    63,    66,    77,   902,   903,   731,
     105,   886,  1154,  1257,   982,    85,   529,   730,    59,    69,
    1328,  1223,    92,   102,    78,    96,  1460,   872,  1788,  1277,
     996,  1391,  1051,  1975,  1835,  1861,  1824,  2229,   533,  1823,
    1510,  1186,    92,   800,   825,  1807,  1368,  1330,  1384,  2100,
    2192,  1432,   868,   905,   533,  1433,  2627,  2561,  1716,   786,
     532,  1429,  1431,  1616,  2063,  1798,   906,  1794,  2598,  2331,
    2600,  2030,  2660,  1840,  1872,  2513,   831,  1718,  2615,  2148,
    1374,  1390,  2579,   529,   529,   758,  2760,  2125,  2126,  1259,
    3052,  1263,   884,  1267,    50,  1828,    51,    52,    56,    57,
    1692,   919,    61,    62,    64,  1695,    67,  3024,   565,    68,
    3050,   825,   825,  1906,   565,    70,  3021,  2653,  2614,   911,
    3065,   533,   533,  1629,   992,   565,   997,    72,  2850,  1277,
      80,    82,    83,    84,    95,  2714,  3068,    97,    99,   565,
     565,   100,   101,   831,   831,  1033,   984,  2700,  2701,  2702,
    1054,   833,  2915,  2515,  2364,  -309,  2920, -1962, -1351,  -951,
   -2088, -2088,  -603,  -271,  -553,  1645,  2249,  2150,  2356,  1398,
    -607,  2467,  2252, -1962,  2360,   544,  1362,  2496,  3270,  -943,
    2724, -2102, -2102, -1370, -1370,  1779,  1075,  2196,   835,  -951,
    2505, -1367, -1367, -1953,  -948,  1391,  2721, -1953,  -948,   835,
   -1970, -2093, -2093,  1075, -1970,   565, -1371,  2731, -2111, -2111,
    2722,  -910,  1699,  1443,  1075,   865,  1002,  2717,   833,   833,
   -1371,  1212,  -923,  -938,  1167,    23,   835,   835, -1368, -1368,
    3256,  2533,  2140,   876,  3386,  2140,  1696,  1378,   835,  1378,
    -145,  1215,  1075,  1362,  1075,  1648,  -223,  3274,  3205, -1203,
    1650,  -223, -2113, -2113,  3615,  1175,  1951, -1203,   973,  1838,
    2163,  1953,  -603,  3356,   996,  1362,  2772,  2774,  1839,  2777,
    -607,  2262,   835,  1277,  1723,  1391,  3369,  1625,  1391,  1391,
    1658,  3584,  1782,  1173,  1725,   835,     3,     4,  3188,  3387,
     898,  3220,  1808,  2179,   545,  1811,  1812,  1028,  3388,  3531,
    1740,  2180,  1790,  3447,  1740,  1790,  3474,  3240,  1799,    14,
      15,  2813,  3569,  1826,  1660,  3171,  2688,  3173,   898,   896,
    3069,  2477,  3389,  3378,  1951,  3490,  3643,  3497,  1952,  1953,
    2709,  1054,   835,  1648,  3044,  1598,  2189,  1649,  1650,  2337,
    1034, -1224,  1992,  2783,  1033,  2887,  1172,  2889,  1741, -1224,
    1697,  1608,  1741,   566,  3521,  2036,  3501,    23,  2796,   763,
    1392,  1353,  -740,  1271,  3576,  1720,  1593,  1594,  1658,  2738,
     840,  3399,  2932,  1992,    26,    27,    28,  3281,  1772,  1773,
    3562,  3400,  2958,  1606,   883,   883,  2164,  1776,  2127, -2087,
   -2087,  3302,   897,  2490,  2491,  2492,  3216,  2908,  3390,  2151,
    1354,  3271,  1660,  3202,  2165,  3632,  2279,  3544,  3214,  2166,
    3547,  3391,  1919,  1921,  2888,  2590,  3272,  1882,  2929,  2279,
    1742,  1208,  1497,   892,  1208,  1176,  1209,  1177,  2152,  3651,
    3264,  2224,  3239,  2479,  1842,  2656,   892,  1059,  2439,  2928,
    3532,  3276,    33,   803,  1648,  2255,  3385,  2167,  1060,  1784,
     915,  1790,  1951,  2911,  3265,  1535,  1952,  1953,  -603,  2959,
    3178,  3597,  1791,  2933,  2844,  2909,  -607,  2280,  3485,  3616,
    2468,  1743,  1330,   898,  3570,  1743,  1498,  3627,  1698,    38,
    2650,  3203,  1363,  -616,  1035,  2653,  3215,  2653,  2190,  3473,
    2480,  3070,  1168,  3282,   542,  3644,  -880,  3598,  1210,  -616,
    3179,  1210,  2784,  3571,  -616,  2353,    26,    27,    28,  3652,
    2338,  3624,  1231,  1660,    40,  1616,  2225,   893,  1232,  3621,
    -760,  1800,  3367,  1841,  2478,    43,  2283,  3084,  3533,  3300,
     893,  2934,  -603,  1721,  2935,  1744,  3448,  1648,  3351,  1744,
    -607,  1649,  1650,  3101,  1774,  1008,  2960,  3577,  2153,  1363,
    1211,  2033,  3401,  2342,   853,  2263,  -616,  3361,  2155,  3579,
    3617,   944,  1272,  3217,  1775,  2256,  2345,  3345,  1169,  3633,
    1785,  1363,  1658,  2657,    33,  3082,  -616,  2274,  2071,   974,
      46,  1069,  2148,  3073,  3251,    35,  1355,   877,  1797,  3618,
    1726,  3061,  3545,   731,  1610,  2509,  1637,  3074,  3357,  3206,
    2100,   970,  2336,  3653,  1797,  1719,  1660,    37,  3090,  3045,
    2168,    38,  2141,  1711,   982,  2581,  3273,  2867,  3392,  1908,
    3645,  3393,  2813,  1233,  3585,  1912,  1984, -1203,  -616,   899,
     802,  2076,  2781,  1813,  -880,  1999,  2481,  -616,  2447,  3376,
     996,  2602,  3283,  2106,  3656,  2107,    40,  1611,  1364,   546,
    2249,  2019,  1589,  -603,  1824,  2630,   854,    43,   565,  3546,
    2405,  -607,  1827,  2807,   834,  2689,  3024,  1799,  2625,  1612,
    2150,  2181,  2123,  2195,    44,  3021,  1595,  1611,  2725,  2434,
     926, -1962, -1351,  1613,   927,  1603,  2411,  -309,  2734,  2759,
    -309,  2440,  -603,  1327,  -603,  -271,  -553, -1962,    45,  1612,
    -607,  1603,  -607,  -943,  3348,  2828,  1356, -1370, -1370,  3349,
    2617,  3196,    46,  1615,  2714,  1367,  2156, -1953,  -948, -1224,
    3322, -1953,  2469,  1643, -1970,  3229,  3230,  2157, -1970,  2474,
   -1371,  1178,   886,  1818,  1916,  1596,   997,  1025,  1277,  2121,
    1277,  3259,  2710,  2711, -1371,  3472,  1601,  -938,  2068,  1625,
    1693,  2197,  1909,  1382,  1383,  1382,  1383,  1819,  1625,  1681,
     995,  1580,  -223,  -223,  3654,  2506,   894,  3479,  1022,  2506,
    1968,  1483,  2103,  2354,   926,  1598,  1202,  3480,   927,  2528,
    2248,  2248,  1814,  1611,   114,   886,  1234,  2448,    92,   800,
    1818,  1990,  1815,  -616,  2336,  1608,  2664,  2449,  2527,   873,
    1822,   529,  2122,  1593,  1594,  1612,   999,  1737,  3187,  1074,
    -684,  2682,  1951,   529,  1819,  -684,  1952,  1953,  1224,  1620,
   -2115, -2115, -2115,  1486,  2683,  3094,  2971,  3455,  1606,  1493,
     905,  2059,  3189,  1963,  1964,  1965,  1966,  1967,  1968,   533,
    1391,  1024,  3630,   906,  1678,  1679,  1680,  1681,   529,   529,
    1391,   533,  1236,  1391,  2428,   565,   565,  2309,  3246,  2429,
    2475,   831,   926,  1174,  2391,  1701,   927,  2312,  3050,  3560,
    2315,   115,   529,   831,  2797,  2798,  2799,  2800,  1203,  2661,
    1800,   109,  2942,  1174,  1237,  1621,  3254,  -684,  2082,  2083,
    3660,    60,  3456,    63,    66,    77,  3441,  2475,  3442,   105,
    3336,  2307,  3338,   968,    85,  2207,  3152,    59,    69,  1040,
    1244,    92,   102,    78,    96,  2143,  1179,  2814,  1738,   529,
     731,  2430,  1231,  1315,   529,  2945,  1637,  1187,  1232,  3038,
    1245,  3039,  2208,  1208,  1231,  3265,   833,  2591,  3135,  -684,
    1232,  3137,  2938,  3139,  1580,  2484,  1041,  1797,   833,  3024,
    2271,  2069,  1480,  1391,  2332,  2333,  2334,  1238,  3021,  1490,
    2075,  2367,  1484,  1965,  1966,  1967,  1968,  2404,  2939,   879,
    2416,  2406,  1043,  3409,  2408,   565,  1246,  2308,  2550,   888,
    3503,  1315,  2100,    50,  2896,    51,    52,    56,    57,  3354,
    2662,    61,    62,    64,   995,    67,  3648,  2318,    68,   529,
     529,  3268,  2325,  2418,    70,   529,  1374,  2858,   529,   529,
    1210,   106,   529,   529,   529,   529,    72,   889,  1331,    80,
      82,    83,    84,    95,    92,   800,    97,    99,   529,  3420,
     100,   101,   926,  1233,  1580,   529,   927,  1975,   865,   865,
    3591,   865,  2897,   865,  3341,  1233,  1676,  1677,  1678,  1679,
    1680,  1681,   529,  1315,  1565,  3269,   825,   110,  2384,  1415,
    1416,   107,  1211,   825,   890,  1648,   533,  1799,   111,  3517,
    3518,  2310,  2522,   533,   529,  1247,  2313,   548,  1376,   895,
      23,   886,  2603,  1377,  3222,  2604,  1824,  2063,   831,  3359,
    3623,  1231,  3227,   529,  2949,   831,  2703,  1232,   926,  1959,
    1658,   987,  1636,   112,   529,   529,   529,  1047,   529,   529,
    3162,   907,  2571,   731,  2283,  1611,  1611,  1407,  1408,  2183,
     922,  1635,  2625,  2184,  1472,  1248,  1485,  2636,   548,  1790,
     955,  3564,  1491,  3293,  1660,  1249,  1496,  1612,  1612,  3451,
    1793,  2572,   549,   529,  1604,  1605,  2950,  1503,  1250,  2473,
    2690,  1613,  1615,  1234,  1483,  1477,   113,   946,  2698,   947,
    3330,   529,   529,   833,  2951,  1728,  1729,  3368,  1735,  2699,
     833,  3331,   835,  1501,  1907,  1709,   924,  1505,   906,   906,
    1710,   906,  1251,  1421,  1422,  1174,   996,  2427,  1415,  1416,
   -1962,  2431,   956,   549,  2433,  1799,  1234,  1629,  3468,   529,
    1829,   930,  1233,   529,   529,  1907,  1161,  1162,  1234,  1164,
    2739,  1166,  1630,   529,   529,   529,  2747,  1913,   529,  2663,
     883,  2664,  1914,   948,  2151,   949,  3404,  2601,  2814,    26,
      27,    28,  2531,  3405,  1587,   943,    46,  1565,  1253,  1799,
    1063,  1064,  1065,  1918,  1983,  1068,  1985,  1986,  1075,  1825,
     950,  2665,  1799,  2152,  1580,  1231,  2823,  2485,  1235,  2486,
    -213,  1232,  1236,  1254,  2629,  2629,  2573,  2952,  1920,   965,
    1261,  2574,  1315,  1075,  1236,  2381,  2953,  2382,   966,  1329,
    1800,  1315,  1256,   565,   565,  1231,   971,  2675,  2032,  2677,
    2057,  1232,  1040,  2033,  1237,  2058,  2350,    33,  2487,   972,
    2488,  2351,  2422,   958,  1799,  1315,  1262,  2423,  2569,  2461,
    2507,  2599,  1421,  1422,  2462,  2508,   975, -2115, -2115, -2115,
     977,  1963,  1964,  1965,  1966,  1967,  1968,  1565,  1832,  1041,
    2925,   553,  2927,   991,    38,  1865,   976,  1866,  1868,  1869,
     978,  3486,   959,  1870,   731,  1492,   988,  1797,  1580,  2672,
    2100,  2674,  1901,   731,  1006,  1043,  1231,  3097,  2510,   557,
   -2084, -2084,  1232,  2508,  1007,  1234,  1233,  1238,  2808,    40,
     995,  2815,  2687,  2153,  1205,  1008,  1207,  2727,  2154,  1238,
      43,   961,   553,  2155,   991,  2691,  2628,   731,   931,  2678,
    1009,  1075,   529,  1018,  2679,  1923,  1233,    44,    92,   800,
    3581,  2011,  3641,  1012,  2013,  1056,  2684,  1015,  1800,  2017,
     557,  2685,  2020,  2750,   932,  1027,   999,  2024,  2033,  1993,
    2639,    45,  3022,  1016,  1994,  1066,  3628,  1265,  3629,  2575,
     962,  1236,  1067,  2820,  3600,    46,  2720,  2695,  2508,  1017,
    2576,  1019,   529,   529,  2969,  2821,  2926,  2962,   529,  3612,
    2058,   529,  1800, -2085, -2085,  1020,   529,   529,   529,   529,
    3037,   565,   565,  1266,   565,  1800,   926,  1233, -1351,   117,
     927,   529,   529,   543,  2824,  1797,  3659,   529,  1069,  2825,
     529,   762,   933, -2086, -2086,   529,  1580,   529,   529,   533,
    1047,  1021,  2961,   529,  2970,   852,  3047, -2089, -2089,   866,
    1070,  2826,  2845,  2846,  1022,   825,  2825,  1572,   825,  1485,
    1061,   831,   934,   825,  3655,   533,   825,  1800,   533,  1797,
    1171,   825,  3658,   533,  1165,  2903,   533,  1188,   883,  1234,
    2904,   533,  1797,  1182,  3060,  1189,  1238,   831,  3083,  2351,
     831,  2156,   955,  2423,  3088,   831,  1191,  1565,   831,  3089,
    2827,  2829,  2157,   831,  1192,  3098,   935,  3153,  1629,  1234,
    3099,  3437,  2058,  3438,   954,  1193,  2833,  2835,   565,   955,
    2834,  2836,  2837,   936,  1196,  2831,  1625,  2832,  3294,   529,
     529,  1197,  3296,  2058,  1797,  1206,   833,  2508,   529,   529,
    1225,  2270, -2090, -2090,  1226,  1236,   529,  2025,  2065,  2029,
    1228,  2060,  2061,   529,   956,    92,  2067,  2062,  2066,  3325,
    1229,  3332,   833,  3342,  2058,   833,  2033,  3375,  3343,  3379,
     833,  2316,  2351,   833,  2423,  1236,  1230,  1237,   833,   731,
    1234,   956,  3416,   529,  1242,  3494,   529,  2058,   957,  1580,
    2423,  1565,   529,   529,   529,   529,   529,   529,   529,   529,
     731,  1580, -2091, -2091,   529,   529,   529,  2317,  2137,   529,
    3499,  1243,  2764,   529,  1260,  3500,   529,   529,   529,   529,
     529,   529,   529,   529,   529,  3525,  1264,   529,   996,  1323,
    3526,  2625,  1580,  1268,   529,  1269,  1315,  1326,   937,  1580,
    1572,  1327,  2323,  1332,   533,  1334,  1236,  2231,  2192,   938,
    1238,  3575,   896,  3626,  1335,   529,  3500,  1910,  3500,  1911,
     906,  1345,  1391,  3233,  1349,  1856,  2121,  1351,  -685, -2092,
   -2092,  3197,  1352,  -685,  1359,  1580, -2094, -2094,  2324,  1580,
    1238,  1360,   529,  1366,   939,  1580, -2095, -2095, -2096, -2096,
   -2097, -2097,   958,   529,   529, -2098, -2098, -2099, -2099,  1179,
    2969,  1369,   548,  1370,  1857, -2100, -2100,  1375,  1580,   940,
    1861, -2101, -2101, -2103, -2103, -2104, -2104, -2105, -2105, -2106,
   -2106, -2107, -2107, -2108, -2108,   897,   548,  1393,  -131,  1565,
    1572,   959, -2110, -2110, -2112, -2112,  1394,   941,   731,  3260,
     731, -2114, -2114,   961,  1399,  -685,  2295,  2919,  2299,  1844,
    1845,  1238,  2250,  2251,  -735,  -735,  -739,  -739,  2036,  1452,
    1458,  3250,  -738,  -738,  1417,  1418,   960,   549,  1734,  3043,
     961,  3071,  1471,  3055,  1421,  1422,  3087,  3193,  3194,  1473,
     529,  1474,  2084,  1481,  1315,  2752,  2754,   529,   529,  2085,
    2086,   549,  1859,  2087,  2088,  2089,  1487,  -685,  2619,  2620,
    3608,  3609,  3136,  1488,  1244,  1494,   898,  3638,  3639,  3164,
    1495,   565,  3599,  1704,  1705,  3415,  3601,  1504,  1500,   962,
    1506,  1583,  1584,  2366,  1245,  1586,   565,  1315,  3321,  -914,
    -921,  1595,  1599,  -911,    46,  -760,   565,  -761,   565,  2460,
    -912,   565,  1609,  -915,  1610,  2385,  -913,   565,  1634,   565,
     731,  1640,  1642,  1687,  1689,  1691,  1703,  1315,   529,  1712,
    1713,  1717,   565,  1722,  1724,  1209,   995,   565,   551,  1211,
    1246,   565,   565,   565,   565,  1764,   565,   565,  1766,  2497,
    1762,  3649,  1565,    23,  1777,  2500,   529,   529,  1795,   529,
    1796,  1802,  1797,  1803,  1565,   529,   529,   529,   529,   529,
     529,  1804,  1809,   529,   529,   529,   529,   529,   529,   529,
     529,   529,   529,  1816,  2625,   529,  1817,  1821,   114,   529,
     529,  1831,  1837,   529,  1847,  1565,  1848,  1849,  1329,  1853,
     529,  3022,  1565,  1862,  1864,  -212,  1863,  1878,  1874,  3095,
    1877,  1880,  1391,   825,  1884,  1881,  1883,  1391,  1894,  1895,
    1572,  1903,   529,   533,  1902,   529,   553,   529,   991,  3225,
    1907,   529,   899,  1915,  1943,  1940,  1942,  1945,  1565,  1247,
    1948,  1971,  1565,  3415,   529,   831,  1315,  1972,  1565,  1980,
     553,   556,   554,   825,   557,  3373,  3234,  3235,  2009,   825,
    1981,  2012,  1988,   533,  1919,  1921,  1991,  2018,  2023,   533,
    2021,  1565,  2022,  2031,  2942,  1589,  2028,  2040,   557,  2034,
    2943,  1596,  1601,   529,   529,   831,  2035,  2037,  2038,  1248,
    2070,   831,  3134,  2944,  1580,  3415,  2039,  2071,  1075,  1249,
    2108,  2104,    26,    27,    28,  1648,   565,  2105,  2111,  2114,
    2116,  2117,  1250,  2118,  1572,  2159,  2119,  2945,  2139,  2946,
     833,   529,  2160,  2162,   529,  2186,  2187,  2193,  -616,   529,
     529,   886,  2206,  2205,  2210,   897,  2227,  1629,  2503,  2239,
    2230,  2275,  2624,  2029,  -616,  3266,  1251,  2240,  2242,  -616,
    3415,  2284,  2241,  2287,   529,   529,  2298,  3470,  2243,   529,
     833,  2244,  2302,  2261,  2304,  2265,   833,    23,  2266,  2269,
      33,  2272,  2276,  2277,  2278,   529,   898,  2311,   529,   529,
     529,  2348,  2314,  2357,  2352,  2363,  2319,  2320,  2321,  2322,
    2371,  2326,  2327,  2368,  2372,  2386,   529,   731,  2370,  2387,
    2389,  -616,  1253,   529,  3432,  2392,   529,    38,  2393,  1574,
    2947,  2394,  2395,  2396,  2397,  2398,  2399,   533,  3211,  2400,
     875,  -616,  2401,   529,   565,  3491,  2403,  1254,  2407,  2424,
    1977,  2432,  1951,  1630,   825,  2463,  1580,  1976,  2494,  2470,
     529,  2471,    40,  2472,   533,  2501,  1256,  2476,  2482,  2483,
    2499,   825,  1572,    43,  2512,  2514,  2519,   529,   529,  2520,
    2523,   533,  1949,  1950,  2530,  2524,   831,  2521,  1970,  2529,
    2525,  2537,  2526,  -616,   529,  1621,   529,  2540,  2538,  1919,
    1921,  2948,  -616,   831,  3022,   529,  2949,  2541,   914,  2542,
     917,  1391,   921,  2543,  3487,  2544,  2570,  1580,  2545,  2546,
    2565,  2547,  2577,   731,   731,   731,  2586,  2548,    46,  2594,
    2610,  2295,  2295,  2295,  3362,  2562,    26,    27,    28,  2587,
     565,  2592,    14,    15,  2563,  2593,  1824,  2605,  2606,  2608,
    2611,  2618,  2616,  2621,  1726,  2632,  -741,  2631,  2950,  2634,
    2635,   833,   529,  2638,  2642,  2643,  2646,  2649,  1315,  2644,
    2648,  2652,  2671,   886,  2673,  2704,  2951,  2686,   833,  3491,
    2090,  2091,  2092,  2692,  2093,  2094,  2095,  2096,  2097,  2098,
      23,  3596,   996,   565,  2705,  2693,  2694,  2707,  1865,  2641,
    1866,  1868,  1869,  2719,    33,  2718,  1870,  1565,  2706,  2726,
    2740,  2736,  1574,  2741,  2737,  2748,  2757,  2744,  2758,  2761,
    1603,  2771,  1580,  2779,  2782,  1572,  2785,   529,  2790,  3491,
    2804,  2791,   731,  2792,  2793,  2805,  2816,  1572,  2817,  2841,
    1923,    38,  2854,  2855,  2822,  2878,  2865,   529,   995,  2830,
    2838,  2848,  2863,  2869,  2893,  2884,   731,  2957,  -616,  2866,
    2912,  2879,  2916,  2924,  1923,  2973,  3063,  3067,  1572,  2890,
    2914,  2886,  2910,  3053,  2937,  1572,    40,  2930,  1074,  2952,
    2931,  1951,  2121,  3059,  3049,  1952,  1953,    43,  2953,  1954,
    1955,  1956,  3075,  3040,  3076,   529,  3041,  3042,  3054,  3046,
    3058,  3062,  1574,  3421,    44,  3423,  3080,  3085,  3092,  2351,
    3431,  1572,  1244,  3093,  3120,  1572,  3100,  3122,  3126,   565,
    3130,  1572,  3140,  3141,  3143,  1580,  3144,   926,    45,  3165,
    1191,   927,  1245,   533,   529,  3172,  3175,  3177,  3417,    26,
      27,    28,    46,  3184,  1572,  2881,  3186,  3190,  3191,  1565,
    3204,  3192,   528,   540,  3208,   831,   886,  1174,   564,  3433,
    3198,  3435,  3568,  3199,   564,  3523,   529,  3209,   822,  3200,
     836,  3210,   529,   529,   839,   564,   848,  3218,  1246,   848,
    3221,  3223,   867,   871,   529,  1910,   871,  3224,  3228,   564,
     564,  3257,   886,  3241,  1391,  3527,  3516, -2083,   529, -2084,
   -2085,   529, -2086,   529, -2087,  3258,  1580,    33, -2088,  3242,
    1565,   529,  3243, -2089,   529,   529,  3261, -2090,    35,   529,
     529, -2091, -2092, -2094,  3275,  3247,   529,   954, -2095, -2096,
     833,  3511,   955, -2097,   565,   822,   822,   565, -2098, -2099,
      37,   529, -2100,  2025,    38,  2918, -2101,  3244,  3245,   867,
    2965,   529, -2103, -2104,   871,   564,   871,   871,   871, -2105,
   -2106,  2065, -2107, -2108,  2060,  2061,  3248,  2902,    92,  2067,
    2062,  2066,  1957,   529, -2109, -2110, -2111,  1247,  3255,    40,
   -2112, -2113, -2114, -1368,  3262,  3277,  3279,  3280,  3286,  3285,
      43,  3287,  3297,  3290,   956,  1958,  3298,  3301,  3303,  3309,
    3315,   957,  3312,  3317,  3320,  3316,  3305,    44,  3324,  3311,
    3340,  3344,   731,  1580,  3339,  3020,   731,  3347,   731,  3352,
    2295,  3350,  1574,  3365,  3025,  3364,  2299,  1248, -1367,  3374,
     529,    45,   529,  3372,  3381,  3382,  3383,  1249,  3396,  3397,
    3398,  3408,  3403,  3418,  3096,    46,   945,  1580,  1037,  3419,
    1250,   952,  3422,  1038,   953,  3425,  3428,  3426,  3434,  3439,
    3078,  3217,  3459,  3463,  2743,  3465,  3466,  1865,  1959,  1866,
    1868,  1869,  3469,   565,  3051,  1870,  3475,   565,   565,   565,
    3476,  3483,  3482,  3484,  1251,  2441,  2442,  2443,  2444,  2445,
    2446,  3281,  3557,  2450,  2451,  2452,  2453,  2454,  2455,  2456,
    2457,  2458,  2459,  3072,  3497,  1856,   565,  3502,  3509,  3515,
    3504,  3506,  1039,  3168,   886,   529,  1574,  3510,  1565,  3520,
     529,   565,   565,   565,   565,   565,   565,   565,   565,   565,
     565,  3513,  3522,  1580,  3514,  3524,  3529,   529,   529,  3534,
    1253,  3540,   529,  1480,  1857,   529,  3541,  3542,   825,  3543,
    3554,  3548,  3549,  2898,  3550,  3551,  3552,  3553,   533,  3555,
    1572,  3563,  3565,    23,  3573,  1254,  3567,  3583,  3586,  3588,
    3592,  3613,   529,  3610,  3594,  3584,  3585,   837,  1580,  1858,
     831,    23,  3622,   961,  1256,  3631,  1040,   529,  3625,  3636,
    3642,  3650,  3646,   529,   529,  1219,  3661,  3662,   529,  1565,
    3657,  3231,  2972,   529,  1194,   886,   529,   529,  2669,  2303,
      23,   529,  1315,  1833,  2202,   529,  2976,  2696,  2346,   529,
    2715,  1005,  2768,  1041,  3291,  2025,   529,   928,  3048,  3538,
    3620,  3360,  1859,  3582,  3589,  3614,  1787,  2651,  3395,  1042,
    2676,  3580,  3066,  3587,  2941,  3578,  2647,   825,  2751,  1043,
    3026,  2503,  2753,  1037,  1574,   833,  1860,   533,  1038,  3284,
    2906,  2409,  1905,  2763,  3495,  1917,  3446,  3561,   923,  3519,
     529,  2905,  3640,  2623,  2566,  2567,  2891,  1575,   529,   831,
    2637,  1580,  1758,  1714,   548,  1044,  1960,  1961,  1962,  2268,
    1963,  1964,  1965,  1966,  1967,  1968,  1201,   529,  1759,  2795,
    3444,  3566,  1572,  2633,  2236,  1478,  1565,  1220,  3505,  1014,
    -131,  1479,    26,    27,    28,  3424,  2267,  1039,   826,  1763,
    2607,  2504,  3319,  2921,  2922,  1026,  1011,  3129,  1444,  2788,
      26,    27,    28,  2789,  1045,  2819,  3366,  2518,  1428,  2419,
    3020,  1046,  3508,  1430,  1434,  1435,  1436,  2899,  2420,   549,
    1437,  2974,  1438,  1439,   833,  1440,  2421,  3507,  2560,    26,
      27,    28,  3647,  1572,  2843,  2626,  3027,  3028,  3029,  3030,
    3031,  3032,  3033,  3034,  3035,  3036,  2534,  3148,  2584,   565,
      33,  3176,  2582,  2857,  1047,  2000,  2201,   731,  2511,   912,
    1195,  1040,   871,  1170,     0,  1923,     0,   871,    33,     0,
     871,     0,     0,  1048,     0,   990,     0,  1574,   564,   529,
      86,     0,     0,     0,     0,   886,     0,    38,  3267,  1574,
       0,     0,   995,     0,     0,   529,  1565,    33,  1041,     0,
      86,     0,     0,   824,     0,    38,     0,     0,     0,     0,
       0,  1324,     0,   529,  1042,     0,     0,    86,     0,     0,
    1574,     0,    40,     0,  1043,     0,   885,  1574,  1337,  1339,
    1575,  1342,  1344,    43,    38,     0,     0,     0,  1572,     0,
      40,  1565,     0,     0,  1049,     0,   529,     0,     0,  1221,
      44,    43,     0,     0,     0,     0,   552,     0,   529,   529,
    1044,     0,   529,  1574,   529,     0,     0,  1574,    44,    40,
     824,   824,   904,  1574,    45,     0,     0,     0,     0,     0,
      43,     0,  1446,     0,    86,     0,  1457,     0,    46,   529,
       0,  1577,    45,     0,     0,     0,  1574,    44,     0,     0,
       0,     0,     0,     0,     0,     0,    46,     0,   553,  1045,
     991,  1647,     0,   529,  1648,     0,  1046,     0,  1649,  1650,
    1575,    45, -2115, -2115, -2115,     0,     0,   555,     0,     0,
       0,  3314,     0,   556,  1580,  2900,   557,     0,  2503,     0,
       0,  1572,     0,     0,  3020,     0,     0,     0,     0,  1658,
       0,     0,     0,     0,     0,     0,  1659,     0,     0,  1047,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   980,   564,   564,     0,  1048,     0,
       0,     0,  3377,  1660,     0,     0,     0,     0,     0,   731,
       0,     0,     0,   529,  3212,   565,     0,  1923,     0,     0,
     565,     0,     0,     0,   529,     0,   529,     0,   529,     0,
       0,     0,   529,     0,   529,     0,   529,  1003,   540,     0,
       0,     0,  1572,   528,     0,   871,   565,   529,     0,     0,
       0,   533,   529,     0,   529,   822,     0,     0,     0,  1030,
    1030,     0,   529,     0,  1030,  1053,     0,   565,   565,  1049,
       0,     0,     0,   831,     0,   731,     0,   848,   848,   848,
     529,     0,   848,  3452,     0,  3443,   548,  3445,     0,     0,
       0,   565,   848,   848,  1577,   848,     0,   848,     0,     0,
       0,     0,  1661,     0,  2871,  2872,     0,     0,     0,   871,
       0,     0,  -131,     0,     0,   564,     0,     0,     0,  1778,
    1662,     0,     0,     0,     0,  1663,   871,  3478,     0,   871,
     836,     0,  1805,     0,   529,     0,  2786,     0,     0,     0,
     565,  2787,     0,  3481,     0,   529,     0,     0,   833,  1572,
       0,   549,     0,  1830,     0,     0,     0,   529,     0,     0,
    1575,     0,     0,  1666,     0,     0,     0,     0,     0,     0,
       0,   529,     0,     0,     0,     0,     0,   871,  1325,     0,
       0,     0,     0,  1572,  1577,     0,     0,     0,     0,   529,
       0,     0,     0,     0,   871,   871,     0,   871,   871,     0,
    1347,     0,     0,     0,     0,     0,     0,   550,     0,   533,
       0,     0,     0,  1358,     0,     0,     0,     0,  1855,     0,
       0,  1669,     0,   529,  1873,     0,     0,     0,   551,     0,
     565,   831,  1574,     0,  1893,     0,     0,  1037,   529,     0,
       0,     0,  1038,     0,     0,  1030,  1053,  3020,   871,   731,
       0,  1451,   871,     0,  1575,     0,  1244,  3452,  1030,  1030,
    1074,   533,  1926,  1951,   564,     0,     0,  1952,  1953,  1572,
     822,  1954,  1955,  1956,     0,     0,  1245,   822,   529,     0,
       0,     0,     0,   831,     0,     0,  3590,   564,   552,     0,
       0,  3363,   529,   529,   529,  -212,     0,     0,     0,     0,
       0,  1039,     0,     0,  1585,  3091,   833,     0,     0,  1927,
       0,     0,  3370,  3371,  1572,     0,   533,     0,  3611,     0,
       0,     0,  1246,  2963,     0,   529,  1671,     0,     0,     0,
    1928,     0,     0,  2964,     0,     0,  3384,     0,   831,     0,
     553,     0,   554,  1578,  1004,   565,    86,     0,     0,  1929,
       0,     0,   564,  1930,     0,     0,     0,     0,   833,   555,
       0,     0,     0,     0,     0,   556,     0,     0,   557,     0,
    2007,     0, -1844,   529,  1574,  1040,  1058,  1931,     0,     0,
    1932,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1575,     0,  2965,     0,     0,  1933,     0,     0,
       0,  1163,     0,     0,  1577,     0,  1706,     0,     0,  1708,
       0,     0,  1041,   833,     0,     0,     0,  1572,     0,     0,
       0,  1247,     0,   564,   564,     0,     0,     0,  1042,     0,
       0,   871,     0,     0,     0,  1574,  1672,   837,  1043, -2115,
   -2115, -2115,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,
    1630,     0,     0,     0,  2264,  1451,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   871,  1786,     0,  3213,     0,
       0,  1248, -1844,     0,  1044,     0,     0,  1958,   871,     0,
       0,  1249,     0,  1579,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1934,  1250,   871,  1222,  2966,  1577,   871,
       0,  1935,     0,     0,  1834,     0,     0,     0,     0,     0,
       0,     0,     0,  1037,     0,     0,     0,     0,  1038,     0,
   -1844,     0,     0,  1045,  1936,     0,  1578,     0,  1251,     0,
    1046,  1647,     0,     0,  1648,     0, -1844,     0,  1649,  1650,
    1574, -1844,     0,  1386,     0,  1575, -1844,     0,     0,     0,
    1959,  1427,     0,     0,     0,  1937, -1844,  1575,     0,     0,
       0, -1844,  1850,     0,   871,     0,    86,   885,     0,  1658,
     871,     0,     0,  1047,     0,     0, -2115,  1039,     0,     0,
     871,     0,     0,     0,  1253,  1898,     0,     0,  1575,     0,
    3574,     0,  1048, -1844,   980,  1575,     0,     0,  2200,   980,
    2203,   564,   564,  1660,   564,   980,     0,     0,  1010,  1254,
       0,  2212,     0, -1844,     0,  3292,  1578,     0,     0,     0,
    1023,     0,     0,     0,     0,     0,     0,     0,  1256,     0,
    2967,  1575,     0,  2968,     0,  1575,  1577,     0,     0,     0,
       0,  1575,     0,  1574,     0,     0,     0,  1037,     0,     0,
       0,  1040,  1038,  2253,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1049,  1575, -1844,  1579,  1641, -1844,   904,
       0,     0,     0,     0, -1844,     0,     0,  1644,     0,     0,
       0,     0,     0,     0,  1451,  1451,     0,     0,  1041,    86,
    1451,     0,     0,   528,     0,     0,     0,     0,  1694,     0,
    1572,     0, -2115,     0,  1042,     0,  1030,  1700,   564,  1995,
       0,  1039,     0,     0,  1043,     0,   871, -1844,     0,   822,
   -2115,     0,   822,     0,  1574, -2115,     0,   822,     0,     0,
     822,     0,     0,     0,     0,   822,     0,   564,     0,   564,
       0,     0, -1844,     0,     0,  1797,  2358,  2359,  2361,  2362,
    1044,     0,  2365,     0,     0,     0,  1579,     0,     0,     0,
       0,     0,     0, -2115,     0,     0,     0,     0,  1960,  1961,
    1962,     0,  1963,  1964,  1965,  1966,  1967,  1968,     0,     0,
       0,     0,     0,     0,     0,  1040,     0,     0,     0,  1577,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1045,
     873,  1577,    86,     0,     0,     0,  1046,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1669,  1041,     0,     0,     0,     0,     0,     0,     0,
   -1844,  1574,  1577,     0,     0,   824,  1578,     0,  1042,  1577,
   -1844,     0,   824,     0,  2099,     0,     0,     0,  1043,  1047,
       0,     0,     0,     0,     0,     0,  2110,     0,     0,     0,
   -1844,     0, -1844, -1844,     0,  1574, -1846,     0,  1048,     0,
       0,     0,     0,     0,     0,  1577,     0,  1588,     0,  1577,
       0,     0,     0,     0,  1044,  1577,     0,     0,     0,  1600,
       0,     0,  2489,     0,     0,   980,     0,     0,  1451, -1844,
       0,     0, -1844, -1844, -1844,     0,  2014,     0,  1577,     0,
       0,     0,     0,     0,     0,     0,  1627,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2115,     0,     0,     0,
    1578,     0,     0,  1045,     0,  1922,     0,     0,     0,  1049,
    1046,     0,  2199,     0,   871,     0,   871,     0,     0,     0,
       0,  1574,     0,     0,     0,     0,     0,   871,     0,  2215,
    2220,  2222,     0,     0,     0,     0, -1846,     0,     0,     0,
       0,     0,     0,     0,  1451,     0,  1579,     0,     0,     0,
    1575,     0,     0,  1047,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1574,     0,     0,   871,
       0,   564,  1048,     0,   904,   904,  3295,   904,     0,     0,
       0,     0,     0,     0, -1846,  1786,   564,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   564,  2285,   564,  2289,
   -1846,   564,     0,     0,     0, -1846, -2115,   564,     0,   564,
   -1846,     0,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,
   -1846,   980,   564,     0,     0, -1846,   980,   564,     0,     0,
       0,   564,   564,   564,   564,     0,   564,   564,  1578,     0,
    1579,     0,     0,  1049,     0,     0,     0,     0,  2015,     0,
       0,     0,     0,  2347,     0,     0,     0, -1846,     0,     0,
       0,     0,   871,   871,   871,   871,     0,  1347,   871,  1574,
       0,     0,     0,     0,     0,     0,     0, -1846,     0,     0,
       0,     0,     0,  2374,     0,     0,     0,     0,     0,     0,
       0,     0,  1575,     0,     0,  1453,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1074,     0,  2402,  1951,     0,
       0,     0,  1952,  1953,     0,     0,  1954,  1955,  1956,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1846,
       0,     0, -1846,  2860,     0,     0,     0,     0, -1846,     0,
       0,     0,     0,     0,     0,     0,    86,     0,  1647,     0,
       0,  1648,     0,  1575,     0,  1649,  1650,  1451,  1451,  1451,
    1451,  1451,  1451,     0,     0,  1451,  1451,  1451,  1451,  1451,
    1451,  1451,  1451,  1451,  1451,     0,     0,   822,  1579,     0,
       0, -1846,     0,     0,     0,     0,  1658,     0,     0,     0,
       0,  1578,     0, -2115,  1577,     0,   564,     0,     0,     0,
       0,     0,     0,  1578,     0,     0, -1846,     0,   871,     0,
    1037,     0,     0,  2198,     0,  1038,  2716,   822,     0,     0,
    1660,     0,  2723,   822,     0,     0,     0,     0,   564,     0,
    2732,  2733,  2735,   564,  1578,     0,     0,  2221,  2223,     0,
   -1861,  1578,  2516,  2516,     0,  2746,     0,     0,  2749,     0,
       0,     0,     0,     0,   824,     0,     0,   824,  1575,     0,
    2762,     0,   824,     0,   873,   824,     0,     0,     0,     0,
     824,     0,     0,     0,  1039,     0,     0,  1578,     0,     0,
       0,  1578,     0,     0,     0,     0,  2568,  1578,     0,     0,
    1755,     0,     0,     0, -1846,     0,     0,     0,     0,  1453,
       0,     0,     0,     0, -1846,     0,     0,     0,     0,     0,
    1578,     0,     0,     0,   564,     0,     0,     0,  2554, -2115,
       0,     0,  1958,   564, -1846,     0, -1846, -1846,     0,     0,
       0,  1579,     0,     0,     0,     0,  1577, -2115,     0,     0,
   -1861,     0, -2115,  1579,     0,  2328,  1451,  1451,  1040,  2801,
    2802,  2803,  1574,    86,     0,     0,     0,     0,  2344,  2344,
       0,  1575,     0, -1846,     0,  2099, -1846, -1846, -1846,     0,
       0,  1451,     0,     0,  1579,     0,     0,     0,     0,     0,
   -2115,  1579,     0,     0,     0,  1041,     0,     0, -1861,     0,
       0,     0,     0,     0,     0,  1959,     0,  1577,   822,     0,
       0,  1042,     0,     0, -1861,     0,     0,     0,     0, -1861,
     564,  1043,     0,     0, -1861,   822,     0,  1579,     0,  2215,
       0,  1579,     0,     0, -1861,     0,     0,  1579,     0, -1861,
       0,     0,     0,  2147,     0,  1386,     0,     0,  1669,     0,
       0,  2426,  1575,     0,     0,     0,     0,  1044,     0,     0,
    1579,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1861,     0,   564,     0,     0,  1451,     0,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1861,     0,     0,     0,  1850,     0,     0,     0,     0,
       0,     0,     0,  2913,     0,     0,  1045,     0,     0,     0,
       0,     0,  1577,  1046,     0,     0,   904,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1453,  1453,
       0,     0,     0, -1861,  1453,     0, -1861,     0,     0,     0,
       0,     0, -1861, -2115,     0,     0,  1047,     0,     0,  1575,
       0,     0,     0,     0,     0,     0,  1850,     0,     0,     0,
       0,     0,   871,     0,     0,  1048,     0,     0,   871,     0,
       0,     0,     0,     0,     0,  1850,   871,   871,   871,     0,
       0,     0,     0,  1575,     0, -1861,  3057,     0,     0,   564,
       0,   871,     0,     0,   871,     0,     0,     0,     0,     0,
       0,     0,  1347,     0,     0,  1577,   871,     0,     0,     0,
   -1861,     0,   980,  1960,  1961,  1962,  3079,  1963,  1964,  1965,
    1966,  1967,  1968,     0,     0,     0,  1578,     0,     0,     0,
       0,     0,     0,     0,  1850,  1850,  1049,  1850,     0,     0,
       0,  2369,     0,     0,     0,     0,     0,     0,     0,     0,
      86,     0,     0, -2115,     0,     0,  3102,  3103,  3104,  3105,
    1676,  1677,  1678,  1679,  1680,  1681,     0,   528,   873,  1575,
       0,  1647,     0,     0,  1648,     0,     0,     0,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,     0,  1577,  2794,     0,     0,
       0,     0,     0,     0,     0,   871,   871,   871, -1861,  1656,
       0,     0,     0,     0,   564,     0,  1451,   564, -1861,  1658,
       0,     0,     0,   564,  1575,     0,  1659,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1861,     0,
   -1861, -1861,     0,   871,     0,     0,     0,     0,     0,     0,
       0,     0,   824,  1660,     0,     0,     0,  2099,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1579, -1861,  1578,     0,
   -1861, -1861, -1861,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   824,     0,     0,     0,  1451,  1451,   824,     0,
       0,  1074,     0,  1577,  1951,     0,     0,     0,  1952,  1953,
       0,     0,  1954,  1955,  1956,     0,     0,     0,     0,  2680,
    3219,     0,     0,     0,     0,  2895,     0,  1575,  2238,  2861,
       0,  2215,     0,     0,     0,     0,     0,  1577,     0,  1578,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   871,
       0,     0,  1661,   564,     0,     0,     0,   564,   564,   564,
       0,     0,     0,  1850,  1786,  1850,     0,  1898,     0,     0,
    1662,  2712,     0,     0,     0,  1663,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   564,     0,  2975,     0,
    2728,     0,     0,     0,     0,     0,     0,     0,  1664,  1665,
       0,   564,   564,   564,   564,   564,   564,   564,   564,   564,
     564,     0,     0,  1666,     0,     0,     0,     0,  1579,  1400,
       0,   835,     0,  1577,     0,     0,  1627,     0,     0,     0,
       0,     0,     0,  2374,     0,     0,     0,  1386,     0,     0,
       0,     0,   871,     0,  1578,     0,  2147,  2769,     0,  2770,
       0,     0,  1786,  2775,  1667,  2778,     0,  1668,     0,     0,
       0,     0,  2588,     0,     0,     0,     0,     0,  1577,     0,
       0,  1669,   871,   824,  1670,     0,  1898,     0,     0,  1579,
       0,     0,     0,     0,  1401,  1402,  1850,     0,     0,     0,
     824,     0,     0,     0,     0,     0,     0,  1451,     0,     0,
       0,  1030,   822,     0,     0,   564,     0,     0,     0,  1454,
       0,     0,   871,   871,   871,   871,     0,     0,  1958,     0,
       0,     0,     0,     0,  1451,  1403,  1404,  1451,     0,  1405,
    1406,   564,   980,     0,     0,     0,     0,     0,     0,     0,
    3138,  1453,  1453,  1453,  1453,  1453,  1453,  1578,     0,  1453,
    1453,  1453,  1453,  1453,  1453,  1453,  1453,  1453,  1453,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3145,     0,
    2554,  1577,     0,     0,     0,     0,  1671,     0,     0,     0,
       0,     0,     0,     0,  1579,     0,     0,     0,     0,     0,
       0,  1959,     0,     0,     0,     0,     0,     0,     0,  3169,
       0,   822,     0,     0,     0,     0,     0,     0,  1407,  1408,
    1575,     0,     0,     0,     0,  3181,     0,     0,     0,  2215,
       0,     0,     0,     0,     0,  2099,     0,     0,  1578,  3380,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1786,
       0,     0,     0,     0,     0,  1850,     0,     0,   885,     0,
       0,  3406,  3407,     0,     0,     0,  3410,     0,   980,   564,
    1451,     0,     0,     0,     0,     0,   871,     0,     0,     0,
       0,     0,     0,  1409,  1410,  1411,  1412,  1413,  1414,  1415,
    1416,     0,     0,  3232,  1417,  1418,  1672,  1579,     0,  1673,
    1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,
       0,     0,     0,     0,  3017,     0,     0,     0,     0,     0,
       0,     0,  2539,  1454,  1647,     0,     0,  1648,     0,  3450,
       0,  1649,  1650,     0,     0,     0,     0,     0,     0,     0,
    1453,  1453,     0,     0,     0,  1578,     0,  2712,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3477,     0,  1658,     0,     0,     0,     0,     0,     0, -2115,
       0,  3249,  1419,  1420,  1850,     0,     0,     0,  1579,  1578,
       0,     0,     0,     0,     0,     0,     0,  2374,     0,     0,
       0,     0,     0,     0,  1074,     0,  1660,  1951,     0,     0,
       0,  1952,  1953,     0,     0,  1954,  1955,  1956,     0,     0,
    3288,     0,     0,  1421,  1422,     0,     0,  1451,     0,  1960,
    1961,  1962,  3155,  1963,  1964,  1965,  1966,  1967,  1968,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1627,     0,     0,     0,  3306,     0,     0,     0,     0,
       0,   564,     0,     0,     0,     0,     0,     0,   564,     0,
    1453,     0,  2578,     0,  1577,  1578,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1627,     0,     0,
       0,     0,     0,     0,     0,  1579,     0,     0,     0,     0,
       0,     0,     0,  3334,     0, -2115,    86,     0,  1136,  1136,
       0,     0,    86,     0,     0,     0,     0,     0,     0,     0,
    1578,  1423,  1424, -2115,     0,   564,     0,     0, -2115,  1579,
     564,     0,  3174,     0,     0,     0,     0,     0,     0,     0,
    2917,  3593,     0,     0,  1647,  1425,  1426,  1648,     0,     0,
       0,  1649,  1650,     0,     0,     0,   564,     0,     0,     0,
       0,     0,  1454,  1454,     0,     0, -2115,     0,  1454,     0,
       0,     0,     0,     0,     0,     0,     0,   564,   564,  1273,
       0,     0,  1658,  1317,  1322,     0,     0,     0,     0, -2115,
       0,  1647,     0,     0,  1648,   871,     0,  1786,  1649,  1650,
       0,   564,  1653,  1654,  1655,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1579,  1660,   871,   871,    86,
       0,  1958,   871,  1578,  1669,  3412,     0,     0,     0,  1658,
    1030,     0,     0,     0,     0,     0,  1659,     0,     0,     0,
       0,  1373,     0,     0,     0,     0,  1451,     0,    86,     0,
     564,  1030,     0,  1030,     0,  3077,     0,     0,     0,  1397,
    1579,     0,     0,  1660,     0,  1445,     0,     0,  1447,     0,
       0,     0,  1459,  1462,  1467,  1470,     0,     0,  3181,     0,
       0,     0,  2870,     0,     0,   871,     0,   824,     0,     0,
       0,     0,     0,     0,  1959,     0,     0,     0,     0,  1647,
       0,  3263,  1648,     0,     0,     0,  1649,  1650,     0,  1627,
       0,  1074,  1507,  1317,  1951, -2115,   871,     0,  1952,  1953,
       0,     0,  1954,  1955,  1956,     0,     0,     0,     0, -2115,
       0,  1386,     0, -2115,  1591,     0,     0,  1658, -2115,  3156,
     564,     0,     0,  1786, -2115,     0,     0,     0,     0,     0,
       0,     0,     0,  1607,     0,     0,     0,     0,     0,     0,
       0,  3306,  1661,  1579,  1617,  1618,  1619,     0,  1624,  1628,
       0,  1660,     0,     0,     0,     0, -2115,     0,     0,     0,
    1662,     0,     0,  3412,     0,  1663,   824,     0,     0,     0,
    1453,  1453,     0,     0,     0,     0,     0,     0,     0,     0,
     885,     0,  2191,  1690,     0,     0,     0,     0, -2115, -2115,
       0,  1786,     0,     0,  3337,     0,     0,     0,     0,     0,
       0,  1507,  1507,  1666,     0,     0,     0,     0,     0,     0,
       0,     0,   980,   980,  1669,  3412,   980,  2873,     0, -2115,
       0,     0,     0,     0,  1995,     0,  1676,  1677,  1678,  1679,
    1680,  1681,  1454,     0,     0,   564,     0,     0,     0,  1733,
       0,     0,     0,  1749,  1754,     0,     0, -2115,     0,     0,
   -2115,     0,     0,     0,  1136,  1136,     0,  1786,  1786,     0,
       0,  1669,     0,  3017,     0,     0,     0,   871, -2115,  1786,
    3412,     0,     0, -2115,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1578,     0,     0,     0,
       0,     0,  1960,  1961,  1962,     0,  1963,  1964,  1965,  1966,
    1967,  1968,     0,     0,     0,     0,     0,  1786,  1958,     0,
       0, -2115,  1317,   980,     0,     0,     0,     0,     0, -2115,
       0,  1317,     0,     0,     0,     0,     0,     0,  2215,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    11,
     564,     0,     0,    86,     0,  1317,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1671,    14,    15,  1669,
       0,  1453,     0,     0,     0,     0,     0,     0,     0,     0,
    1647,  1959,     0,  1648,     0,     0,     0,  1649,  1650,     0,
    1627,  1653,  1654,  1655,     0,     0,  3471,     0,  3123,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1656,     0,
       0,     0,     0,     0,     0,    23,     0,     0,  1658,     0,
       0,     0,     0,     0,     0,  1659,  1579,     0,     0, -2115,
       0,     0,  1941,     0,     0,     0,  1676,  1677,  1678,  1679,
    1680,  1681,     0,  3147,     0,  1454,  1454,  1454,  1454,  1454,
    1454,     0,  1660,  1454,  1454,  1454,  1454,  1454,  1454,  1454,
    1454,  1454,  1454,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -2115,     0,  1672,     0,     0,  1673,
    1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,
       0,     0,     0,     0,     0,     0,  1467,     0,  1467,  1467,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1136,  1136,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1136,     0,     0,
       0,     0,     0,     0,  1453,     0,     0,    86,     0,     0,
       0,     0,     0,     0,     0,     0,  3017,     0,     0,     0,
       0,  1661,     0,     0,     0,     0,     0,     0,     0,  3402,
       0,     0,     0,     0,    26,    27,    28,     0,     0,  1662,
       0,     0,     0,     0,  1663,  1074,     0,     0,  1951,     0,
       0,     0,  1952,  1953, -2115,     0,  1954,  1955,  1956,     0,
       0,  1676,  1677,  1678,  1679,  1680,  1681,  1664,  1665,  1960,
    1961,  1962,     0,  1963,  1964,  1965,  1966,  1967,  1968,     0,
       0,     0,  1666,     0,     0,     0,     0,     0,     0,     0,
      86,     0,    86,     0,     0,     0,     0,     0,  2074,     0,
       0,     0,    33,     0,  1454,  1454,  2077,     0,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1667,     0,     0,  1668,     0,     0,     0,
       0,     0,    86,     0,     0,    37,     0,     0,     0,    38,
    1669,     0,     0,  1670,     0,     0,  2124,     0,    86,     0,
       0,  1453,  2128,  2129,  2130,  2131,  2132,  2133,  2134,  2135,
       0,    39,     0,     0,  2144,  2145,     0,     0,     0,  2158,
       0,     0,     0,  2161,    40,   -47,  2169,  2170,  2171,  2172,
    2173,  2174,  2175,  2176,  2177,    43,     0,  2178,     0,     0,
       0,     0,     0,     0,  1136,     0,  1317,     1,     0,     0,
       0,     0,    44,     0,     0,  1074,     0,     2,  1951,     3,
       4,     0,  1952,  1953,     0,  2204,  1954,  1955,  1956,     0,
       0,     0,     5,     0,  1454,     0,    45,     6,     0,     0,
       0,     0,     0,     0,     0,     0,     7,     0,     0,  1647,
      46,     0,  1648,     0,     0,  1671,  1649,  1650,     0,     0,
       8,     0,     0,  1618,  1619,     0,     0,     0,     0,     9,
       0,    10,  1958,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    11,     0,    12,     0,  1658,     0,     0,
       0,     0,     0,     0, -2115,     0,    13,     0,     0,     0,
       0,    86,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    14,    15,    16,     0,     0,     0,     0,     0,     0,
       0,  1660,    17,     0,     0,     0,     0,     0,     0,    18,
       0,     0,     0,    86,     0,     0,     0,    19,     0,    20,
      21,     0,     0,     0,     0,  1959,     0,     0,     0,     0,
    2330,     0,     0,  1647,  1317,    22,  1648,  2340,  2341,    23,
    1649,  1650,     0,     0,     0,  1672,     0,     0,  1673,  1674,
    1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,     0,
    3430,     0,     0,     0,     0,     0,    24,  2874,     0,     0,
       0,  1658,     0,     0,     0,     0,     0,  1317, -2115,     0,
       0,     0,  -595,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -2115,     0,     0,     0,     0,  1660,     0,  1373,  2410,    25,
       0,     0, -2115,     0,     0,     0,     0,     0, -2115,     0,
       0,     0,     0, -2115,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2436,  2437,     0,  2438,
       0,     0,     0,     0,     0,     0,  1647,     0,     0,  1648,
       0,     0,     0,  1649,  1650,  1651,  1652,  1653,  1654,  1655,
       0, -2115,     0,     0,     0,     0,     0,     0,     0,  2465,
    2466,  3159,     0,  2204,  1656,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1658,  1959,     0,     0,    26,    27,
      28,  1659,     0,     0,     0,     0,    29,     0,     0,     0,
      30,     0,  2493,     0, -2115,     0,     0,  2498,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1660,  1669,
       0,     0, -2115,     0,  1507,     0,  1317, -2115,     0,     0,
       0,    31,     0,     0,  1454,  1454,     0,     0,     0,     0,
      32,     0,     0,  1960,  1961,  1962,     0,  1963,  1964,  1965,
    1966,  1967,  1968,     0,     0,  1455,    33,     0,     0,     0,
       0,     0,     0,    34,  2532, -2115,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,    38,     0,     0,     0,     0,     0,     0,
       0,  2549,     0,     0,  2552,     0,     0,  1401,  1402,  2558,
    2559,     0,     0,     0,     0,    39,     0,  1661,     0,     0,
       0,     0,     0,  1669, -2115,     0,     0,     0,    40,     0,
       0,    41,     0,     0,    42,  1662,  1231,     0,     0,    43,
    1663,     0,  1232,     0,     0,     0,     0,     0,  1403,  1404,
    1244,     0,  1405,  1406,     0,  2580,    44,     0,  2583,     0,
    2585,     0,     0,  1664,  1665,     0,     0,     0,     0,     0,
    1245,     0,     0,     0,     0,  1684,  2589,     0,  1666,     0,
      45,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    46,     0,     0,   -47,     0,     0,
       0,     0,     0,  1960,  1961,  1962,     0,  1963,  1964,  1965,
    1966,  1967,  1968,     0,     0,     0,  1246,     0,     0,  1667,
    1733,     0,  1668,  1684,     0,     0,     0,     0, -2115,     0,
       0,  1407,  1408,     0, -2115,  1454,  1669,  1754,  2176,  1670,
       0,  1676,  1677,  1678,  1679,  1680,  1681,  1233,     0,     0,
       0,     0,     0,     0,     0,     0,  1136,     0,     0,  1455,
       0,     0,  1454,     0,     0,  2645,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1409,  1410,  1411,  1412,
    1413,  1414,  1415,  1416,     0,     0,     0,  1417,  1418,     0,
       0,     0,  1684,     0,     0,  1247,     0,     0,     0,     0,
       0,     0,  1619,     0,     0,     0,     0,     0,  1317,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -2115,     0,
       0,  1671,     0,     0,     0,  1676,  1677,  1678,  1679,  1680,
    1681,     0,     0,     0,     0,     0,  1684,     0,     0,     0,
       0,  1684,     0,     0,     0,  1248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1249,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1419,  1420,  2756,  1250,     0,
       0,  1646,     0,     0,     0,     0,  1647,     0,  1454,  1648,
       0,     0,     0,  1649,  1650,  1651,  1652,  1653,  1654,  1655,
    1234,     0,  1684,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1251,     0,  1656,     0,  1421,  1422,  1657,     0,
       0,     0,  1647,     0,  1658,  1648,  1684,     0,     0,  1649,
    1650,  1659,     0,  1653,  1654,  1655,     0,     0,     0,     0,
       0,  1672,     0,     0,  1673,  1674,  1675,     0,  1676,  1677,
    1678,  1679,  1680,  1681,     0,     0,     0,     0,  1660,     0,
    1658,     0,  1252,  1944,     0,     0,  1236,  1659,  1253,     0,
       0,     0,     0,     0,  1684,     0,  1684,     0,  1455,  1455,
       0,  1969,     0,     0,  1455,     0,     0,     0,  1684,     0,
       0,  1684,     0,  1254,  1660,     0,  1684,     0,  1255,  1684,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1256,     0,  1423,  1424,  2840,  1647,     0,     0,
    1648,     0,  2842,  2077,  1649,  1650,  1651,  1652,  1653,  1654,
    1655,     0,     0,     0,  2849,  1454,  1684,     0,  1425,  1426,
       0,     0,     0,     0,     0,  1656,     0,     0,  2859,  2853,
       0,  2862,     0,  2864,     0,  1658,     0,  1661,  2042,     0,
       0,  2868,  1659,     0,     0,     0,     0,     0,     0,  2875,
    2876,  1238,     0,     0,     0,  1662,  2883,     0,     0,     0,
    1663,     0,     0,     0,     0,     0,     0,     0,     0,  1660,
       0,  2892,     0,  1661,     0,     0,     0,     0,     0,     0,
       0,  2907,     0,  1664,  1665,     0,     0,     0,     0,     0,
       0,  1662,     0,     0,     0,     0,  1663,     0,  1666,     0,
    1684,     0,     0,  1136,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1231,  1684,     0,     0,  1664,
    1665,  1232,     0,     0,     0,     0,  1684,  1684,  1684,  1244,
       0,     0,     0,  1684,  1666,     0,     0,  1684,     0,  1667,
       0,     0,  1668,     0,     0,     0,     0,     0,     0,  1245,
       0,     0,     0,     0,     0,     0,  1669,     0,     0,  1670,
    2330,     0,  2330,     0,     0,     0,     0,     0,  1661,     0,
       0,     0,     0,     0,     0,  1667,     0,     0,  1668,     0,
       0,     0,     0,     0,     0,     0,  1662,     0,     0,     0,
       0,  1663,  1669,     0,     0,  1246,     0,     0,     0,  1684,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1664,  1665,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1233,     0,     0,  1666,
       0,     0,     0,     0,  1454,     0,     0,     0,     0,     0,
       0,     0,  1684,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1684,     0,
       0,  1671,     0,  1684,     0,     0,     0,  3118,  3119,     0,
    1667,     0,     0,  1668,     0,     0,     0,     0,     0,     0,
    1969,     0,     0,     0,     0,     0,     0,  1669,     0,     0,
    1670,     0,     0,     0,  1247,     0,     0,  1671,     0,     0,
       0,     0,  3142,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3146,     0,     0,
       0,     0,     0,  3149,  3150,     0,     0,     0,  3151,     0,
       0,     0,     0,  3154,     0,     0,  3157,  3158,     0,     0,
       0,  2330,  1317,     0,  1248,  3166,     0,     0,     0,     0,
       0,     0,     0,     0,  1249,     0,  1136,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1250,     0,     0,
       0,  1672,     0,     0,  1673,  1674,  1675,     0,  1676,  1677,
    1678,  1679,  1680,  1681,     0,     0,     0,     0,     0,  1234,
       0,     0,  1671,     0,     0,     0,     0,     0,     0,     0,
    3207,  1251,     0,     0,     0,     0,     0,  1672,     0,     0,
    1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,
       0,     0,     0,     0,     0,     0,     0,  3226,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1684,  2305,     0,     0,     0,  1236,     0,  1253,  1969,  1969,
       0,  1455,  1455,  1455,  1455,  1455,  1455,     0,     0,  1455,
    1455,  1455,  1455,  1455,  1455,  1455,  1455,  1455,  1455,  1969,
       0,     0,  1254,     0,     0,     0,     0,  2306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1256,  1672,     0,     0,  1673,  1674,  1675,     0,  1676,
    1677,  1678,  1679,  1680,  1681,     0,     0,     0,     0,  2115,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1647,     0,  2756,
    1648,     0,     0,     0,  1649,  1650,  1651,  1652,  1653,  1654,
    1655,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1238,     0,     0,     0,     0,  1656,     0,     0,     0,     0,
       0,     0,     0,  1628,     0,  1658,     0,     0,     0,     0,
       0,     0,  1659,  1684,     0,     0,  1684,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2552,     0,     0,  1660,
       0,     0,     0,     0,     0,     0,     0,     0,  3326,  3327,
       0,     0,  3328,     0,  1619,     0,     0,     0,     0,     0,
       0,     0,     0,  1684,     0,     0,     0,  1684,  1684,  1684,
    1684,  1684,  1684,  1684,  1684,     0,     0,     0,     0,  3346,
    1455,  1455,     0,  1684,  1684,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1684,     0,     0,
    1684,     0,     0,  3358,     0,     0,     0,     0,  1684,  1684,
    1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1647,  1661,     0,
    1648,     0,     0,  1684,  1649,  1650,  1651,  1652,  1653,  1654,
    1655,     0,     0,     0,     0,     0,  1662,     0,     0,     0,
       0,  1663,     0,     0,     0,  1656,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1658,     0,     0,     0,     0,
       0,     0,  1659,     0,  1664,  1665,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3118,  1666,
    1455,     0,  3427,     0,     0,     0,  1136,     0,     0,  1660,
       0,     0,     0,     0,     0,     0,     0,  3436,     0,     0,
       0,     0,  2330,     0,  2330,     0,     0,     0,     0,     0,
       0,     0,  1136,     0,     0,     0,     0,     0,     0,     0,
    1667,     0,     0,  1668,     0,     0,     0,     0,     0,     0,
    3461,     0,     0,     0,     0,     0,     0,  1669,     0,     0,
    1670,     0,     0,     0,     0,     0,     0,     0,     0,  1684,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1684,
    1684,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3496,     0,     0,     0,  1661,     0,
       0,     0,     0,     0,     0,  3118,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1662,  1136,     0,     0,
       0,  1663,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1684,
       0,     0,     0,     0,  1664,  1665,     0,     0,     0,  3539,
       0,     0,  1671,     0,     0,     0,     0,     0,     0,  1666,
       0,     0,     0,     0,     0,  1684,  1684,  1684,     0,     0,
    1969,  1969,  1969,  1969,  1969,  1969,     0,     0,     0,  1969,
    1969,  1969,  1969,  1969,  1969,  1969,  1969,  1969,  1969,     0,
       0,     0,     0,     0,  1684,  1684,     0,     0,     0,     0,
    1667,     0,     0,  1668,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1669,     0,     0,
    1670,     0,  1684,     0,     0,     0,     0,  1684,     0,     0,
    1647,     0,     0,  1648,     0,     0,     0,  1649,  1650,  1651,
    1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,     0,
       0,     0,  3605,  3605,  3605,     0,     0,     0,  1656,     0,
       0,  1684,  1672,     0,     0,  1673,  1674,  1675,  1658,  1676,
    1677,  1678,  1679,  1680,  1681,  1659,     0,     0,  1684,  2115,
       0,  1684,     0,     0,     0,  3605,     0,  1684,  1684,     0,
       0,     0,     0,     0,     0,  1969,  1969,     0,     0,     0,
       0,     0,  1660,     0,     0,     0,     0,     0,     0,  1684,
    1455,  1455,  1684,     0,  1684,     0,     0,     0,  1684,     0,
       0,     0,  1671,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3605,     0,     0,     0,     0,     0,     0,
       0,  1647,     0,     0,  1648,     0,     0,     0,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1656,
       0,     0,     0,     0,  1684,     0,     0,     0,     0,  1658,
       0,     0,     0,     0,     0,     0,  1659,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1661,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1660,     0,     0,     0,     0,     0,  1662,
       0,     0,     0,     0,  1663,     0,     0,     0,     0,     0,
       0,     0,  1672,     0,     0,  1673,  1674,  1675,     0,  1676,
    1677,  1678,  1679,  1680,  1681,     0,     0,  1664,  1665,  2435,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1666,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1647,     0,     0,  1648,  1684,     0,     0,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,
       0,     0,     0,  1667,     0,     0,  1668,     0,     0,  1656,
       0,  1455,  1661,     0,     0,     0,     0,     0,     0,  1658,
    1669,     0,     0,  1670,     0,     0,  1659,     0,     0,     0,
    1662,     0,     0,     0,     0,  1663,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1660,     0,     0,     0,     0,  1664,  1665,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1684,
       0,  1684,     0,  1666,     0,     0,     0,     0,  1684,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1684,     0,
       0,  1684,     0,  1684,     0,     0,     0,  1684,     0,     0,
    1969,  1969,     0,     0,  1684,  1684,     0,     0,     0,     0,
       0,     0,  1684,     0,  1667,     0,     0,  1668,     0,     0,
       0,  1684,     0,     0,     0,  1671,     0,     0,     0,     0,
       0,  1669,     0,     0,  1670,     0,  1684,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   734,     0,     0,
       0,     0,  1661,     0,     0,     0,     0,     0,     0,   734,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1662,     0,     0,     0,  1455,  1663,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1664,  1665,
       0,     0,     0,     0,   735,     0,     0,     0,     0,     0,
       0,     0,     0,  1666,     0,     0,   735,     0,     0,     0,
     736,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   736,     0,     0,  1672,  1671,     0,  1673,  1674,
    1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,     0,
       0,     0,  2536,     0,  1667,     0,     0,  1668,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     737,  1669,     0,     0,  1670,     0,     0,     0,     0,     0,
     738,     0,   737,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   738,     0,   739,     0,     0,     0,     0,   740,
       0,     0,     0,     0,     0,     0,   739,     0,     0,     0,
       0,   740,     0,     0,     0,     0,     0,     0,     0,     0,
    1969,  1455,     0,     0,     0,     0,     0,     0,     0,   741,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   741,     0,     0,     0,     0,  1672,  1684,  1684,  1673,
    1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,
       0,     0,     0,  2564,     0,     0,     0,     0,     0,     0,
       0,  1684,     0,   742,     0,  1684,  1671,   743,  1684,  1684,
    1684,     0,     0,  1684,     0,   742,  1684,  1684,     0,   743,
     744,     0,     0,     0,     0,  1684,     0,     0,     0,     0,
       0,     0,   744,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1684,     0,     0,     0,
       0,     0,  1969,     0,     0,   551,     0,     0,     0,     0,
       0,   745,     0,     0,     0,  1684,     0,     0,     0,     0,
       0,     0,     0,   745,     0,     0,     0,   746,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   746,
       0,     0,     0,     0,     0,     0,  1672,     0,     0,  1673,
    1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,
       0,     0,   747,  2780,     0,   748,     0,     0,     0,     0,
       0,     0,     0,     0,   747,     0,   749,   748,     0,   750,
       0,  1969,     0,     0,     0,     0,     0,     0,   749,     0,
       0,   750,     0,     0,     0,     0,     0,   751,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   751,
       0,   752,     0,     0,     0,  1684,  1684,  1684,     0,   753,
     754,     0,     0,   752,     0,     0,     0,     0,     0,     0,
     755,     0,   754,     0,     0,  1684,   756,     0,     0,     0,
       0,     0,   755,     0,     0,     0,     0,  1684,   756,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   757,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   757,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1684,     0,     0,     0,
       0,     0,     0,     0,     0,  1684,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1684,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1684,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,  1071,   835,
    1072,  1073,  1074,  1075,  1076,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,  1684,     0,
       0,     0,     0,  1077,     0,     0,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,   139,   140,  1078,   142,
    1079,  1080,     0,   145,   146,   147,   148,   149,   150,  1081,
     804,   151,   152,   153,   154,  1082,  1083,   157,     0,   158,
     159,   160,   161,   805,     0,   806,     0,  1084,   165,   166,
     167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,  1684,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1085,   192,   193,  1086,
     195,  1087,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1088,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,  1089,   224,   225,
     226,   227,   228,   229,   807,  1090,   231,     0,     0,   232,
     233,  1091,   235,     0,   236,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,     0,     0,   245,     0,  1092,
    1093,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,   276,  1094,  1095,     0,  1096,     0,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,     0,
       0,   291,   292,   293,   294,     0,   295,     0,   296,   297,
     298,   299,   300,   301,   302,  1097,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,  1098,   326,  1099,
     328,   329,   330,   331,   332,  1100,   333,   334,   335,   336,
    1101,   809,   338,  1102,   340,   341,   342,     0,   343,   344,
       0,     0,  1103,   346,   347,     0,     0,   348,   349,   350,
     351,   352,   353,   354,   811,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   368,   369,   812,   371,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,  1104,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,   409,   410,   411,
     412,  1105,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,   436,   437,   438,
    1106,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   815,     0,     0,
     456,   457,     0,   458,   459,   460,     0,   461,   462,   463,
     464,   465,     0,   466,  1107,  1108,     0,     0,   469,   470,
     816,   472,   817,  1109,   474,   475,   818,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,     0,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   494,  1110,
     496,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,     0,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,  1111,     0,     0,
       0,     0,     0,     0,  1112,  1113,  1114,     0,     0,     0,
       0,  1115,     0,  1116,     0,     0,     0,  1117,     0,     0,
    1118,  1119,  1120,  2697,   118,  1071,   835,  1072,  1073,  1074,
    1075,  1076,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
    1077,     0,     0,   130,   131,   132,     0,   133,   134,   135,
     136,   137,   138,   139,   140,  1078,   142,  1079,  1080,     0,
     145,   146,   147,   148,   149,   150,  1081,   804,   151,   152,
     153,   154,  1082,  1083,   157,     0,   158,   159,   160,   161,
     805,     0,   806,     0,  1084,   165,   166,   167,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,  1085,   192,   193,  1086,   195,  1087,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,  1088,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,  1089,   224,   225,   226,   227,   228,
     229,   807,  1090,   231,     0,     0,   232,   233,  1091,   235,
       0,   236,     0,   237,   238,     0,   239,   240,   241,   242,
     243,   244,     0,     0,   245,     0,  1092,  1093,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
    1094,  1095,     0,  1096,     0,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
     293,   294,     0,   295,     0,   296,   297,   298,   299,   300,
     301,   302,  1097,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,  1098,   326,  1099,   328,   329,   330,
     331,   332,  1100,   333,   334,   335,   336,  1101,   809,   338,
    1102,   340,   341,   342,     0,   343,   344,     0,     0,  1103,
     346,   347,     0,     0,   348,   349,   350,   351,   352,   353,
     354,   811,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   368,   369,
     812,   371,   372,   373,   374,     0,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,  1104,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,   409,   410,   411,   412,  1105,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,     0,   436,   437,   438,  1106,   440,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   815,     0,     0,   456,   457,     0,
     458,   459,   460,     0,   461,   462,   463,   464,   465,     0,
     466,  1107,  1108,     0,     0,   469,   470,   816,   472,   817,
    1109,   474,   475,   818,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,     0,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   494,  1110,   496,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,     0,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,  1111,     0,     0,     0,     0,     0,
       0,  1112,  1113,  1114,     0,     0,     0,     0,  1115,     0,
    1116,     0,     0,     0,  1117,     0,     0,  1118,  1119,  1120,
    3329,   118,  1071,   835,  1072,  1073,  1074,  1075,  1076,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,  1077,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1078,   142,  1079,  1080,     0,   145,   146,   147,
     148,   149,   150,  1081,   804,   151,   152,   153,   154,  1082,
    1083,   157,     0,   158,   159,   160,   161,   805,     0,   806,
       0,  1084,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1085,   192,   193,  1086,   195,  1087,   196,     0,   197,   198,
     199,   200,   201,   202,    14,    15,   203,   204,   205,   206,
       0,     0,   207,   208,  1088,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,  1089,   224,   225,   226,   227,   228,   229,   807,  1090,
     231,     0,     0,   232,   233,  1091,   235,     0,   236,     0,
     237,   238,    23,   239,   240,   241,   242,   243,   244,     0,
       0,   245,     0,  1092,  1093,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,   276,  1094,  1095,     0,
    1096,     0,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,     0,     0,   291,   292,   293,   294,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,  1097,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,  1098,   326,  1099,   328,   329,   330,   331,   332,  1100,
     333,   334,   335,   336,  1101,   809,   338,  1102,   340,   341,
     342,     0,   343,   344,     0,     0,  1103,   346,   347,     0,
       0,   348,   349,   350,   351,   352,   353,   354,   811,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    26,    27,    28,     0,   368,   369,   812,   371,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,  1104,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,   409,   410,   411,   412,  1105,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,    33,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
      35,   436,   437,   438,  1106,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   815,    37,     0,   456,   457,    38,   458,   459,   460,
       0,   461,   462,   463,   464,   465,     0,   466,  1107,  1108,
       0,     0,   469,   470,   816,   472,   817,  1109,   474,   475,
     818,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,    40,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   819,  1110,   496,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,    44,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,  1111,     0,    45,     0,     0,     0,     0,  1112,  1113,
    1114,     0,     0,     0,     0,  1115,     0,  1116,  3304,     0,
       0,  1117,     0,     0,  1118,  1119,  1120,   118,  1071,   835,
    1072,  1073,  1074,  1075,  1076,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,  1077,     0,     0,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,   139,   140,  1078,   142,
    1079,  1080,     0,   145,   146,   147,   148,   149,   150,  1081,
     804,   151,   152,   153,   154,  1082,  1083,   157,     0,   158,
     159,   160,   161,   805,     0,   806,     0,  1084,   165,   166,
     167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1085,   192,   193,  1086,
     195,  1087,   196,     0,   197,   198,   199,   200,   201,   202,
      14,    15,   203,   204,   205,   206,     0,     0,   207,   208,
    1088,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,  1089,   224,   225,
     226,   227,   228,   229,   807,  1090,   231,     0,     0,   232,
     233,  1091,   235,     0,   236,     0,   237,   238,    23,   239,
     240,   241,   242,   243,   244,     0,     0,   245,     0,  1092,
    1093,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,   276,  1094,  1095,     0,  1096,     0,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,     0,
       0,   291,   292,   293,   294,     0,   295,     0,   296,   297,
     298,   299,   300,   301,   302,  1097,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,  1098,   326,  1099,
     328,   329,   330,   331,   332,  1100,   333,   334,   335,   336,
    1101,   809,   338,  1102,   340,   341,   342,     0,   343,   344,
       0,     0,  1103,   346,   347,     0,     0,   348,   349,   350,
     351,   352,   353,   354,   811,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    26,    27,    28,
       0,   368,   369,   812,   371,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,  1104,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,   409,   410,   411,
     412,  1105,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,    33,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,    35,   436,   437,   438,
    1106,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   815,    37,     0,
     456,   457,    38,   458,   459,   460,     0,   461,   462,   463,
     464,   465,     0,   466,  1107,  1108,     0,     0,   469,   470,
     816,   472,   817,  1109,   474,   475,   818,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,    40,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   819,  1110,
     496,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,    44,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,  1111,     0,    45,
       0,     0,     0,     0,  1112,  1113,  1114,     0,     0,     0,
       0,  1115,     0,  1116,     0,     0,     0,  1117,     0,     0,
    1118,  1119,  1120,   118,  1071,   835,  1072,  1073,  1074,  1075,
    1076,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,  1077,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139,   140,  1078,   142,  1079,  1080,     0,   145,
     146,   147,   148,   149,   150,  1081,   804,   151,   152,   153,
     154,  1082,  1083,   157,     0,   158,   159,   160,   161,   805,
       0,   806,     0,  1084,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,  1085,   192,   193,  1086,   195,  1087,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1088,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,  1089,   224,   225,   226,   227,   228,   229,
     807,  1090,   231,     0,     0,   232,   233,  1091,   235,     0,
     236,     0,   237,   238,    23,   239,   240,   241,   242,   243,
     244,     0,     0,   245,     0,  1092,  1093,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,   276,  1094,
    1095,     0,  1096,     0,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,     0,     0,   291,   292,   293,
     294,     0,   295,     0,   296,   297,   298,   299,   300,   301,
     302,  1097,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,  1098,   326,  1099,   328,   329,   330,   331,
     332,  1100,   333,   334,   335,   336,  1101,   809,   338,  1102,
     340,   341,   342,     0,   343,   344,     0,     0,  1103,   346,
     347,     0,     0,   348,   349,   350,   351,   352,   353,   354,
     811,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    26,    27,    28,     0,   368,   369,   812,
     371,   372,   373,   374,     0,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,  1104,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,   409,   410,   411,   412,  1105,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,    33,     0,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,   436,   437,   438,  1106,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   815,     0,     0,   456,   457,    38,   458,
     459,   460,     0,   461,   462,   463,   464,   465,     0,   466,
    1107,  1108,     0,     0,   469,   470,   816,   472,   817,  1109,
     474,   475,   818,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,    40,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   819,  1110,   496,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,    44,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,  1111,     0,    45,     0,     0,     0,     0,
    1112,  1113,  1114,     0,     0,     0,     0,  1115,     0,  1116,
       0,     0,     0,  1117,     0,     0,  1118,  1119,  1120,  1278,
    1071,   835,  1072,  1073,  1074,  1075,  1076,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,  1279,   127,   128,   129,
       0,     0,     0,  1280,     0,  1077,     0,     0,  1281,   131,
     132,     0,   133,   134,   135,  1282,   137,   138,   139,   140,
    1078,  1283,  1079,  1080,     0,   145,   146,   147,   148,   149,
     150,  1081,   804,   151,   152,   153,   154,  1082,  1083,   157,
       0,   158,   159,   160,   161,   805,     0,  1284,     0,  1285,
     165,   166,   167,   168,   169,  1286,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,  1287,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1085,   192,
     193,  1086,   195,  1087,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,  1288,     0,
     207,   208,  1088,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,  1089,
     224,   225,   226,   227,   228,   229,   807,  1090,   231,     0,
       0,   232,   233,  1091,   235,     0,   236,     0,   237,  1289,
       0,  1290,   240,   241,  1291,  1292,   244,     0,     0,   245,
       0,  1092,  1093,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,  1293,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,  1294,   271,
     272,   273,   274,   275,   276,  1094,  1095,     0,  1096,     0,
     280,  1295,  1296,   283,  1297,   285,   286,   287,   288,   289,
     290,     0,     0,   291,  1298,   293,  1299,     0,   295,     0,
     296,   297,   298,   299,   300,   301,   302,  1300,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,  1098,
    1301,  1099,   328,   329,   330,   331,   332,  1100,   333,   334,
    1302,   336,  1101,   809,   338,  1102,   340,   341,   342,     0,
     343,   344,     0,     0,  1103,   346,   347,     0,     0,   348,
     349,   350,  1303,   352,   353,  1304,   811,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   812,  1305,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,  1104,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,  1306,
     410,   411,   412,  1105,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,  1307,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,  1308,
     437,   438,  1106,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,  1309,   454,   815,
       0,     0,   456,   457,     0,   458,  1310,   460,     0,   461,
     462,   463,   464,   465,     0,   466,  1107,  1108,     0,     0,
     469,   470,   816,   472,   817,  1109,   474,   475,  1311,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,  1110,   496,  1312,   497,  1313,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,  1111,
       0,     0,     0,     0,     0,     0,  1112,  1113,  1114,     0,
       0,     0,     0,  1115,     0,  1116,  1314,     0,     0,  1117,
       0,     0,  1118,  1119,  1120,   118,  1071,   835,  1072,  1073,
       0,  1075,  1076,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,  1077,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,  1078,   142,  1079,  1080,
       0,   145,   146,   147,   148,   149,   150,  1081,   804,   151,
     152,   153,   154,  1082,  1083,   157,     0,   158,   159,   160,
     161,   805,     0,   806,     0,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,  1085,   192,   193,  1086,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,    14,    15,
     203,   204,   205,   206,     0,     0,   207,   208,  1088,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,  1089,   224,   225,   226,   227,
     228,   229,   807,  1090,   231,     0,     0,   232,   233,  1091,
     235,     0,   236,     0,   237,   238,    23,   239,   240,   241,
     242,   243,   244,     0,     0,   245,     0,  1092,  1093,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,  1094,  1095,     0,  1096,     0,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     292,   293,   294,     0,   295,     0,   296,   297,   298,   299,
     300,   301,   302,  1097,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,  1098,   326,  1099,   328,   329,
     330,   331,   332,     0,   333,   334,   335,   336,  1101,   809,
     338,  1102,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   811,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    26,    27,    28,     0,   368,
     369,   812,   371,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,  1104,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   409,   410,   411,   412,  1105,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,    33,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,    35,   436,   437,   438,  1106,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   815,    37,     0,   456,   457,
      38,   458,   459,   460,     0,   461,   462,   463,   464,   465,
       0,   466,  1107,  1108,     0,     0,   469,   470,   816,   472,
     817,  1109,   474,   475,   818,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,    40,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   819,  1110,   496,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,    44,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,     0,     0,    45,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1115,
       0,  1116,     0,     0,     0,  1117,     0,     0,  1118,  1119,
    1120,   118,  1071,   835,  1072,  1073,  1074,  1075,  1076,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,  1077,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1078,   142,  1079,  1080,  1463,   145,   146,   147,
     148,   149,   150,  1081,   804,   151,   152,   153,   154,  1082,
    1083,   157,     0,   158,   159,   160,   161,   805,     0,   806,
       0,  1084,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1085,   192,   193,  1086,   195,  1087,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1088,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,  1089,   224,   225,   226,   227,   228,   229,   807,  1090,
     231,     0,     0,   232,   233,  1091,   235,     0,   236,     0,
     237,   238,  1464,   239,   240,   241,   242,   243,   244,     0,
       0,   245,     0,  1092,  1093,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,   276,  1094,  1095,     0,
    1096,     0,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,     0,  1465,   291,   292,   293,   294,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,  1097,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,  1098,   326,  1099,   328,   329,   330,   331,   332,  1100,
     333,   334,   335,   336,  1101,   809,   338,  1102,   340,   341,
     342,     0,   343,   344,     0,     0,  1103,   346,   347,     0,
       0,   348,   349,   350,   351,   352,   353,   354,   811,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   812,   371,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,  1104,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,   409,   410,   411,   412,  1105,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,   436,   437,   438,  1106,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   815,     0,     0,   456,   457,     0,   458,   459,   460,
       0,   461,   462,   463,   464,   465,     0,   466,  1107,  1108,
       0,  1466,   469,   470,   816,   472,   817,  1109,   474,   475,
     818,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,  1110,   496,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,  1111,     0,     0,     0,     0,     0,     0,  1112,  1113,
    1114,     0,     0,     0,     0,  1115,     0,  1116,     0,     0,
       0,  1117,     0,     0,  1118,  1119,  1120,  1278,  1071,   835,
    1072,  1073,  1074,  1075,  1076,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,  1280,     0,  1077,     0,     0,  1281,   131,   132,     0,
     133,   134,   135,  1282,   137,   138,   139,   140,  1078,  1283,
    1079,  1080,     0,   145,   146,   147,   148,   149,   150,  1081,
     804,   151,   152,   153,   154,  1082,  1083,   157,     0,   158,
     159,   160,   161,   805,     0,  1284,     0,  1285,   165,   166,
     167,   168,   169,  1286,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,  1287,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1085,   192,   193,  1086,
     195,  1087,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1088,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,  1089,   224,   225,
     226,   227,   228,   229,   807,  1090,   231,     0,     0,   232,
     233,  1091,   235,     0,   236,     0,   237,  1289,     0,  1290,
     240,   241,  1291,  1292,   244,     0,     0,   245,     0,  1092,
    1093,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,  1293,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,  1294,   271,   272,   273,
     274,   275,   276,  1094,  1095,     0,  1096,     0,   280,  1295,
    1296,   283,  1297,   285,   286,   287,   288,   289,   290,     0,
       0,   291,  1298,   293,  1299,     0,   295,     0,   296,   297,
     298,   299,   300,   301,   302,  1300,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,  1098,  1301,  1099,
     328,   329,   330,   331,   332,  1100,   333,   334,  1302,   336,
    1101,   809,   338,  1102,   340,   341,   342,     0,   343,   344,
       0,     0,  1103,   346,   347,     0,     0,   348,   349,   350,
    1303,   352,   353,  1304,   811,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   368,   369,   812,  1305,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,  1104,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,  1306,   410,   411,
     412,  1105,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,  1307,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,  1308,   437,   438,
    1106,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,  1309,   454,   815,     0,     0,
     456,   457,     0,   458,  1310,   460,     0,   461,   462,   463,
     464,   465,     0,   466,  1107,  1108,     0,     0,   469,   470,
     816,   472,   817,  1109,   474,   475,  1311,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,     0,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   494,  1110,
     496,  2335,   497,  1313,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,     0,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,  1111,     0,     0,
       0,     0,     0,     0,  1112,  1113,  1114,     0,     0,     0,
       0,  1115,     0,  1116,     0,     0,     0,  1117,     0,     0,
    1118,  1119,  1120,  1278,  1071,   835,  1072,  1073,  1074,  1075,
    1076,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,  1280,     0,  1077,
       0,     0,  1281,   131,   132,     0,   133,   134,   135,  1282,
     137,   138,   139,   140,  1078,  1283,  1079,  1080,     0,   145,
     146,   147,   148,   149,   150,  1081,   804,   151,   152,   153,
     154,  1082,  1083,   157,     0,   158,   159,   160,   161,   805,
       0,  1284,     0,  1285,   165,   166,   167,   168,   169,  1286,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,  1287,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,  1085,   192,   193,  1086,   195,  1087,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1088,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,  1089,   224,   225,   226,   227,   228,   229,
     807,  1090,   231,     0,     0,   232,   233,  1091,   235,     0,
     236,     0,   237,  1289,     0,  1290,   240,   241,  1291,  1292,
     244,     0,     0,   245,     0,  1092,  1093,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,  1293,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,  1294,   271,   272,   273,   274,   275,   276,  1094,
    1095,     0,  1096,     0,   280,  1295,  1296,   283,  1297,   285,
     286,   287,   288,   289,   290,     0,     0,   291,  1298,   293,
    1299,     0,   295,     0,   296,   297,   298,   299,   300,   301,
     302,  1300,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,  1098,  1301,  1099,   328,   329,   330,   331,
     332,  1100,   333,   334,  1302,   336,  1101,   809,   338,  1102,
     340,   341,   342,     0,   343,   344,     0,     0,  1103,   346,
     347,     0,     0,   348,   349,   350,  1303,   352,   353,  1304,
     811,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   368,   369,   812,
    1305,   372,   373,   374,     0,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,  1104,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,  1306,   410,   411,   412,  1105,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,  1307,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,  1308,   437,   438,  1106,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,  1309,   454,   815,     0,     0,   456,   457,     0,   458,
    1310,   460,     0,   461,   462,   463,   464,   465,     0,   466,
    1107,  1108,     0,     0,   469,   470,   816,   472,   817,  1109,
     474,   475,  1311,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,     0,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   494,  1110,   496,     0,   497,  1313,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,     0,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,  1111,     0,     0,     0,     0,     0,     0,
    1112,  1113,  1114,     0,     0,     0,     0,  1115,     0,  1116,
    2390,     0,     0,  1117,     0,     0,  1118,  1119,  1120,   118,
    1071,   835,  1072,  1073,  1074,  1075,  1076,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126, -1210,   127,   128,   129,
       0,     0,     0,     0, -1210,  1077,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
    1078,   142,  1079,  1080,     0,   145,   146,   147,   148,   149,
     150,  1081,   804,   151,   152,   153,   154,  1082,  1083,   157,
       0,   158,   159,   160,   161,   805,     0,   806,     0,  1084,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1085,   192,
     193,  1086,   195,  1087,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1088,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,  1089,
     224,   225,   226,   227,   228,   229,   807,  1090,   231,     0,
       0,   232,   233,  1091,   235,     0,   236,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,     0,     0,   245,
       0,  1092,  1093,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,   276,  1094,  1095,     0,  1096,     0,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,   293,   294,     0,   295,     0,
     296,   297,   298,   299,   300,   301,   302,  1097,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,  1098,
     326,  1099,   328,   329,   330,   331,   332,  1100,   333,   334,
     335,   336,  1101,   809,   338,  1102,   340,   341,   342,     0,
     343,   344,     0,     0,  1103,   346,   347,     0,     0,   348,
     349,   350,   351,   352,   353,   354,   811,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   812,   371,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,  1104,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,   409,
     410,   411,   412,  1105,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,   436,
     437,   438,  1106,   440, -1210,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   815,
       0,     0,   456,   457,     0,   458,   459,   460,     0,   461,
     462,   463,   464,   465,     0,   466,  1107,  1108,     0,     0,
     469,   470,   816,   472,   817,  1109,   474,   475,   818,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,  1110,   496,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,  1111,
       0,     0,     0,     0,     0,     0,  1112,  1113,  1114,     0,
       0,     0,     0,  1115,     0,  1116,     0,     0,     0,  1117,
       0,     0,  1118,  1119,  1120,  1278,  1071,   835,  1072,  1073,
    1074,  1075,  1076,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,  1280,
       0,  1077,     0,     0,  1281,   131,   132,     0,   133,   134,
     135,  1282,   137,   138,   139,   140,  1078,  1283,  1079,  1080,
       0,   145,   146,   147,   148,   149,   150,  1081,   804,   151,
     152,   153,   154,  1082,  1083,   157,     0,   158,   159,   160,
     161,   805,     0,  1284,     0,  1285,   165,   166,   167,   168,
     169,  1286,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,  1287,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,  1085,   192,   193,  1086,   195,  1087,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,  1088,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,  1089,   224,   225,   226,   227,
     228,   229,   807,  1090,   231,     0,     0,   232,   233,  1091,
     235,     0,   236,     0,   237,  1289,     0,  1290,   240,   241,
    1291,  1292,   244,     0,     0,   245,     0,  1092,  1093,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,  1293,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,  1294,   271,   272,   273,   274,   275,
     276,  1094,  1095,     0,  1096,     0,   280,  1295,  1296,   283,
    1297,   285,   286,   287,   288,   289,   290,     0,     0,   291,
    1298,   293,  1299,     0,   295,     0,   296,   297,   298,   299,
     300,   301,   302,  1300,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,  1098,  1301,  1099,   328,   329,
     330,   331,   332,  1100,   333,   334,  1302,   336,  1101,   809,
     338,  1102,   340,   341,   342,     0,   343,   344,     0,     0,
    1103,   346,   347,     0,     0,   348,   349,   350,  1303,   352,
     353,  1304,   811,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   812,  1305,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,  1104,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,  1306,   410,   411,   412,  1105,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,  1307,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,  1308,   437,   438,  1106,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,  1309,   454,   815,     0,     0,   456,   457,
       0,   458,  1310,   460,     0,   461,   462,   463,   464,   465,
       0,   466,  1107,  1108,     0,     0,   469,   470,   816,   472,
     817,  1109,   474,   475,  1311,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,  1110,   496,     0,
     497,  1313,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,  1111,     0,     0,     0,     0,
       0,     0,  1112,  1113,  1114,     0,     0,     0,     0,  1115,
       0,  1116,  3163,     0,     0,  1117,     0,     0,  1118,  1119,
    1120,  1278,  1071,   835,  1072,  1073,  1074,  1075,  1076,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,  1280,     0,  1077,     0,     0,
    1281,   131,   132,     0,   133,   134,   135,  1282,   137,   138,
     139,   140,  1078,  1283,  1079,  1080,     0,   145,   146,   147,
     148,   149,   150,  1081,   804,   151,   152,   153,   154,  1082,
    1083,   157,     0,   158,   159,   160,   161,   805,     0,  1284,
       0,  1285,   165,   166,   167,   168,   169,  1286,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,  1287,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1085,   192,   193,  1086,   195,  1087,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1088,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,  1089,   224,   225,   226,   227,   228,   229,   807,  1090,
     231,     0,     0,   232,   233,  1091,   235,     0,   236,     0,
     237,  1289,     0,  1290,   240,   241,  1291,  1292,   244,     0,
       0,   245,     0,  1092,  1093,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,  1293,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
    1294,   271,   272,   273,   274,   275,   276,  1094,  1095,     0,
    1096,     0,   280,  1295,  1296,   283,  1297,   285,   286,   287,
     288,   289,   290,     0,     0,   291,  1298,   293,  1299,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,  1300,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,  1098,  1301,  1099,   328,   329,   330,   331,   332,  1100,
     333,   334,  1302,   336,  1101,   809,   338,  1102,   340,   341,
     342,     0,   343,   344,     0,     0,  1103,   346,   347,     0,
       0,   348,   349,   350,  1303,   352,   353,  1304,   811,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   812,  1305,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,  1104,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,  1306,   410,   411,   412,  1105,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
    1307,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,  1308,   437,   438,  1106,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,  1309,
     454,   815,     0,     0,   456,   457,     0,   458,  1310,   460,
       0,   461,   462,   463,   464,   465,     0,   466,  1107,  1108,
       0,     0,   469,   470,   816,   472,   817,  1109,   474,   475,
    1311,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,  1110,   496,     0,   497,  1313,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,  1111,     0,     0,     0,     0,     0,     0,  1112,  1113,
    1114,     0,     0,     0,     0,  1115,     0,  1116,     0,     0,
       0,  1117,     0,     0,  1118,  1119,  1120,   118,  1071,   835,
    1072,  1073,  1074,  1075,  1076,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,  1730,   127,   128,   129,     0,     0,
       0,     0,     0,  1077,     0,     0,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,   139,   140,  1078,   142,
    1079,  1080,     0,   145,   146,   147,   148,   149,   150,  1081,
     804,   151,   152,   153,   154,  1082,  1083,   157,     0,   158,
     159,   160,   161,   805,     0,   806,     0,  1084,   165,   166,
     167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1085,   192,   193,  1086,
     195,  1087,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1088,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,  1089,   224,   225,
     226,   227,   228,   229,   807,  1090,   231,     0,     0,   232,
     233,  1091,   235,     0,   236,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,     0,     0,   245,     0,  1092,
    1093,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,   276,  1094,  1095,     0,  1096,     0,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,     0,
       0,   291,   292,   293,   294,     0,   295,     0,   296,   297,
     298,   299,   300,   301,   302,  1097,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,  1098,   326,  1099,
     328,   329,   330,   331,   332,  1100,   333,   334,   335,   336,
    1101,   809,   338,  1102,   340,   341,   342,     0,   343,   344,
       0,     0,  1103,   346,   347,     0,     0,   348,   349,   350,
     351,   352,   353,   354,   811,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   368,   369,   812,   371,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,  1104,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,   409,   410,   411,
     412,  1105,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,   436,   437,   438,
    1106,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   815,     0,     0,
     456,   457,     0,   458,   459,   460,     0,   461,   462,   463,
     464,   465,     0,   466,  1107,  1108,     0,     0,   469,   470,
     816,   472,   817,  1109,   474,   475,   818,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,     0,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   494,  1110,
     496,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,     0,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,  1111,     0,     0,
       0,     0,     0,     0,  1112,  1113,  1114,     0,     0,     0,
       0,  1115,     0,  1116,     0,     0,     0,  1117,     0,     0,
    1118,  1119,  1120,   118,  1745,   835,  1072,  1073,  1074,  1746,
    1076,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
    1747,   127,   128,   129,     0,     0,     0,     0,     0,  1077,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139,   140,  1078,   142,  1079,  1080,     0,   145,
     146,   147,   148,   149,   150,  1081,   804,   151,   152,   153,
     154,  1082,  1083,   157,     0,   158,   159,   160,   161,   805,
       0,   806,     0,  1084,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,  1085,   192,   193,  1086,   195,  1087,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1088,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,  1089,   224,   225,   226,   227,   228,   229,
     807,  1090,   231,     0,     0,   232,   233,  1091,   235,     0,
     236,     0,   237,   238,     0,   239,   240,   241,   242,   243,
     244,     0,     0,   245,     0,  1092,  1093,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,   276,  1094,
    1095,     0,  1096,     0,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,     0,     0,   291,   292,   293,
     294,     0,   295,     0,   296,   297,   298,   299,   300,   301,
     302,  1097,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,  1098,   326,  1099,   328,   329,   330,   331,
     332,  1100,   333,   334,   335,   336,  1101,   809,   338,  1102,
     340,   341,   342,     0,   343,   344,     0,     0,  1103,   346,
     347,     0,     0,   348,   349,   350,   351,   352,   353,   354,
     811,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   368,   369,   812,
     371,   372,   373,   374,     0,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,  1104,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,   409,   410,   411,   412,  1105,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,   436,   437,   438,  1106,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   815,     0,     0,   456,   457,     0,   458,
     459,   460,     0,   461,   462,   463,   464,   465,     0,   466,
    1107,  1108,     0,     0,   469,   470,   816,   472,   817,  1109,
     474,   475,   818,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,     0,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   494,  1110,   496,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,     0,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,  1111,     0,     0,     0,     0,     0,     0,
    1112,  1113,  1114,     0,     0,     0,     0,  1115,     0,  1116,
       0,     0,     0,  1117,     0,     0,  1118,  1119,  1120,   118,
    1071,   835,  1072,  1073,  1074,  1075,  1076,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,  1077,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
    1078,   142,  1079,  1080,     0,   145,   146,   147,   148,   149,
     150,  1081,   804,   151,   152,   153,   154,  1082,  1083,   157,
       0,   158,   159,   160,   161,   805,     0,   806,     0,  1084,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1085,   192,
     193,  1086,   195,  1087,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1088,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,  1089,
     224,   225,   226,   227,   228,   229,   807,  1090,   231,     0,
       0,   232,   233,  1091,   235,     0,   236,     0,   237,   238,
    1464,   239,   240,   241,   242,   243,   244,     0,     0,   245,
       0,  1092,  1093,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,   276,  1094,  1095,     0,  1096,     0,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,   293,   294,     0,   295,     0,
     296,   297,   298,   299,   300,   301,   302,  1097,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,  1098,
     326,  1099,   328,   329,   330,   331,   332,  1100,   333,   334,
     335,   336,  1101,   809,   338,  1102,   340,   341,   342,     0,
     343,   344,     0,     0,  1103,   346,   347,     0,     0,   348,
     349,   350,   351,   352,   353,   354,   811,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   812,   371,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,  1104,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,   409,
     410,   411,   412,  1105,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,   436,
     437,   438,  1106,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   815,
       0,     0,   456,   457,     0,   458,   459,   460,     0,   461,
     462,   463,   464,   465,     0,   466,  1107,  1108,     0,     0,
     469,   470,   816,   472,   817,  1109,   474,   475,   818,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,  1110,   496,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,  1111,
       0,     0,     0,     0,     0,     0,  1112,  1113,  1114,     0,
       0,     0,     0,  1115,     0,  1116,     0,     0,     0,  1117,
       0,     0,  1118,  1119,  1120,   118,  1071,   835,  1072,  1073,
    1074,  1075,  1076,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,  1077,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,  1078,   142,  1079,  1080,
       0,   145,   146,   147,   148,   149,   150,  1081,   804,   151,
     152,   153,   154,  1082,  1083,   157,     0,   158,   159,   160,
     161,   805,     0,   806,     0,  1084,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,  1085,   192,   193,  1086,   195,  1087,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,  1088,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,  1089,   224,   225,   226,   227,
     228,   229,   807,  1090,   231,     0,     0,   232,   233,  1091,
     235,     0,   236,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,     0,     0,   245,     0,  1092,  1093,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,  1094,  1095,     0,  1096,     0,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     292,   293,   294,     0,   295,     0,   296,   297,   298,   299,
     300,   301,   302,  1097,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,  1098,   326,  1099,   328,   329,
     330,   331,   332,  1100,   333,   334,   335,   336,  1101,   809,
     338,  1102,   340,   341,   342,     0,   343,   344,     0,     0,
    1103,   346,   347,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   811,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   812,   371,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,  1104,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   409,   410,   411,   412,  1105,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,   436,   437,   438,  1106,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   815,     0,     0,   456,   457,
       0,   458,   459,   460,     0,   461,   462,   463,   464,   465,
       0,   466,  1107,  1108,     0,     0,   469,   470,   816,   472,
     817,  1109,   474,   475,   818,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,  1110,   496,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,  1111,     0,     0,     0,     0,
       0,     0,  1112,  1113,  1114,     0,     0,     0,     0,  1115,
       0,  1116,  2102,     0,     0,  1117,     0,     0,  1118,  1119,
    1120,   118,  1071,   835,  1072,  1073,  1074,  1075,  1076,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,  1077,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1078,   142,  1079,  1080,     0,   145,   146,   147,
     148,   149,   150,  1081,   804,   151,   152,   153,   154,  1082,
    1083,   157,     0,   158,   159,   160,   161,   805,     0,   806,
       0,  1084,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1085,   192,   193,  1086,   195,  1087,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1088,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,  1089,   224,   225,   226,   227,   228,   229,   807,  1090,
     231,     0,     0,   232,   233,  1091,   235,     0,   236,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,     0,
       0,   245,     0,  1092,  1093,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,   276,  1094,  1095,     0,
    1096,     0,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,     0,     0,   291,   292,   293,   294,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,  1097,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,  1098,   326,  1099,   328,   329,   330,   331,   332,  1100,
     333,   334,   335,   336,  1101,   809,   338,  1102,   340,   341,
     342,     0,   343,   344,     0,     0,  1103,   346,   347,     0,
       0,   348,   349,   350,   351,   352,   353,   354,   811,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   812,   371,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,  1104,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,   409,   410,   411,   412,  1105,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,   436,   437,   438,  1106,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   815,     0,     0,   456,   457,  2755,   458,   459,   460,
       0,   461,   462,   463,   464,   465,     0,   466,  1107,  1108,
       0,     0,   469,   470,   816,   472,   817,  1109,   474,   475,
     818,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,  1110,   496,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,  1111,     0,     0,     0,     0,     0,     0,  1112,  1113,
    1114,     0,     0,     0,     0,  1115,     0,  1116,     0,     0,
       0,  1117,     0,     0,  1118,  1119,  1120,   118,  1071,   835,
    1072,  1073,  1074,  1075,  1076,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,  1077,     0,     0,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,   139,   140,  1078,   142,
    1079,  1080,     0,   145,   146,   147,   148,   149,   150,  1081,
     804,   151,   152,   153,   154,  1082,  1083,   157,     0,   158,
     159,   160,   161,   805,     0,   806,     0,  1084,   165,   166,
     167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1085,   192,   193,  1086,
     195,  1087,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1088,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,  1089,   224,   225,
     226,   227,   228,   229,   807,  1090,   231,     0,     0,   232,
     233,  1091,   235,     0,   236,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,     0,     0,   245,     0,  1092,
    1093,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,   276,  1094,  1095,     0,  1096,     0,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,     0,
       0,   291,   292,   293,   294,     0,   295,     0,   296,   297,
     298,   299,   300,   301,   302,  1097,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,  1098,   326,  1099,
     328,   329,   330,   331,   332,  1100,   333,   334,   335,   336,
    1101,   809,   338,  1102,   340,   341,   342,     0,   343,   344,
       0,     0,  1103,   346,   347,     0,     0,   348,   349,   350,
     351,   352,   353,   354,   811,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   368,   369,   812,   371,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,  1104,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,   409,   410,   411,
     412,  1105,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,   436,   437,   438,
    1106,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   815,     0,     0,
     456,   457,     0,   458,   459,   460,     0,   461,   462,   463,
     464,   465,     0,   466,  1107,  1108,     0,     0,   469,   470,
     816,   472,   817,  1109,   474,   475,   818,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,     0,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   494,  1110,
     496,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,     0,  2882,   506,     0,     0,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,  1111,     0,     0,
       0,     0,     0,     0,  1112,  1113,  1114,     0,     0,     0,
       0,  1115,     0,  1116,     0,     0,     0,  1117,     0,     0,
    1118,  1119,  1120,   118,  1071,   835,  1072,  1073,  1074,  1075,
    1076,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
    3106,   127,   128,   129,     0,     0,     0,     0,     0,  1077,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139,   140,  1078,   142,  1079,  1080,     0,   145,
     146,   147,   148,   149,   150,  1081,   804,   151,   152,   153,
     154,  1082,  1083,   157,     0,   158,   159,   160,   161,   805,
       0,   806,     0,  1084,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,  3107,   183,   184,   185,   186,   187,   188,
     189,   190,  1085,   192,   193,  1086,   195,  1087,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1088,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,  1089,   224,   225,   226,   227,   228,   229,
     807,  1090,   231,     0,     0,   232,   233,  1091,   235,     0,
     236,     0,   237,   238,     0,   239,   240,   241,   242,   243,
     244,     0,     0,   245,     0,  3108,  1093,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,   276,  1094,
    1095,     0,  1096,     0,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,     0,     0,   291,   292,   293,
     294,     0,   295,     0,   296,   297,   298,   299,   300,   301,
     302,  1097,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,  1098,   326,  1099,   328,   329,   330,   331,
     332,  1100,   333,   334,   335,   336,  1101,   809,   338,  1102,
     340,   341,   342,     0,   343,   344,     0,     0,  1103,   346,
     347,     0,     0,   348,   349,   350,   351,   352,   353,   354,
     811,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   368,   369,   812,
     371,   372,   373,   374,     0,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,  1104,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,   409,   410,   411,  3109,  1105,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,   436,   437,   438,  1106,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   815,     0,     0,   456,   457,     0,   458,
     459,   460,     0,   461,   462,   463,   464,   465,     0,   466,
    1107,  1108,     0,     0,   469,   470,   816,   472,   817,  1109,
     474,   475,   818,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,     0,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   494,  1110,   496,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,     0,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,  1111,     0,     0,     0,     0,     0,     0,
    1112,  1113,  1114,     0,     0,     0,     0,  1115,     0,  3110,
       0,     0,     0,  1117,     0,     0,  1118,  1119,  1120,   118,
    1071,   835,  1072,  1073,  1074,  1075,  1076,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,  1077,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
    1078,   142,  1079,  1080,     0,   145,   146,   147,   148,   149,
     150,  1081,   804,   151,   152,   153,   154,  1082,  1083,   157,
       0,   158,   159,   160,   161,   805,     0,   806,     0,  1084,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1085,   192,
     193,  1086,   195,  1087,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1088,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,  1089,
     224,   225,   226,   227,   228,   229,   807,  1090,   231,     0,
       0,   232,   233,  1091,   235,     0,   236,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,     0,     0,   245,
       0,  1092,  1093,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,   276,  1094,  1095,     0,  1096,     0,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,   293,   294,     0,   295,     0,
     296,   297,   298,   299,   300,   301,   302,  1097,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,  1098,
     326,  1099,   328,   329,   330,   331,   332,  1100,   333,   334,
     335,   336,  1101,   809,   338,  1102,   340,   341,   342,     0,
     343,   344,     0,     0,  1103,   346,   347,     0,     0,   348,
     349,   350,   351,   352,   353,   354,   811,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   812,   371,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,  1104,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,   409,
     410,   411,   412,  1105,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,   436,
     437,   438,  1106,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   815,
       0,     0,   456,   457,     0,   458,   459,   460,     0,   461,
     462,   463,   464,   465,     0,   466,  1107,  1108,     0,     0,
     469,   470,   816,   472,   817,  1109,   474,   475,   818,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,  1110,   496,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,  1111,
       0,     0,     0,     0,     0,     0,  1112,  1113,  1114,     0,
       0,     0,     0,  1115,     0,  1116,     0,     0,     0,  1117,
       0,     0,  1118,  1119,  1120,   118,  1071,   835,  1072,  1073,
    1074,  1075,  1076,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,  1077,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,  1078,   142,  1079,  1080,
       0,   145,   146,   147,   148,   149,   150,  1081,   804,   151,
     152,   153,   154,  1082,  1083,   157,     0,   158,   159,   160,
     161,   805,     0,   806,     0,  1084,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,  1085,   192,   193,  1086,   195,  1087,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,  1088,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,  1089,   224,   225,   226,   227,
     228,   229,   807,  1090,   231,     0,     0,   232,   233,  1091,
     235,     0,   236,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,     0,     0,   245,     0,  1092,  1093,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,  1094,  1095,     0,  1096,     0,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     292,   293,   294,     0,   295,     0,   296,   297,   298,   299,
     300,   301,   302,  1097,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,  1098,   326,  1099,   328,   329,
     330,   331,   332,  1100,   333,   334,   335,   336,  1101,   809,
     338,  1102,   340,   341,   342,     0,   343,   344,     0,     0,
    1103,   346,   347,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   811,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   812,   371,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,  1104,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   409,   410,   411,   412,  1105,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,   436,   437,   438,  1106,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   815,     0,     0,   456,   457,
       0,   458,   459,   460,     0,   461,   462,   463,   464,   465,
       0,   466,  1107,  1108,     0,     0,   469,   470,   816,   472,
     817,  1109,   474,   475,   818,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,  1110,   496,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,  1111,     0,     0,     0,     0,
       0,     0,  1750,  1751,  1114,     0,     0,     0,     0,  1115,
       0,  1116,     0,     0,     0,  1117,     0,     0,  1118,  1119,
    1120,   118,  2246,   835,  1072,  1073,  1074,  1075,  1076,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,  1077,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1078,   142,  1079,  1080,     0,   145,   146,   147,
     148,   149,   150,  1081,   804,   151,   152,   153,   154,  1082,
    1083,   157,     0,   158,   159,   160,   161,   805,     0,   806,
       0,  1084,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1085,   192,   193,  1086,   195,  1087,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1088,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,  1089,   224,   225,   226,   227,   228,   229,   807,  1090,
     231,     0,     0,   232,   233,  1091,   235,     0,   236,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,     0,
       0,   245,     0,  1092,  1093,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,   276,  1094,  1095,     0,
    1096,     0,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,     0,     0,   291,   292,   293,   294,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,  1097,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,  1098,   326,  1099,   328,   329,   330,   331,   332,  1100,
     333,   334,   335,   336,  1101,   809,   338,  1102,   340,   341,
     342,     0,   343,   344,     0,     0,  1103,   346,   347,     0,
       0,   348,   349,   350,   351,   352,   353,   354,   811,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   812,   371,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,  1104,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,   409,   410,   411,   412,  1105,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,   436,   437,   438,  1106,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   815,     0,     0,   456,   457,     0,   458,   459,   460,
       0,   461,   462,   463,   464,   465,     0,   466,  1107,  1108,
       0,     0,   469,   470,   816,   472,   817,  1109,   474,   475,
     818,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,  1110,   496,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,  1111,     0,     0,     0,     0,     0,     0,  1112,  1113,
    1114,     0,     0,     0,     0,  1115,     0,  1116,     0,     0,
       0,  1117,     0,     0,  1118,  1119,  1120,   118,  1071,   835,
    1072,  1073,  1074,  1075,  1076,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,  1077,     0,     0,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,   139,   140,  1078,   142,
    1079,  1080,     0,   145,   146,   147,   148,   149,   150,  1081,
     804,   151,   152,   153,   154,  1082,  1083,   157,     0,   158,
     159,   160,   161,   805,     0,   806,     0,  1084,   165,   166,
     167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1085,   192,   193,  1086,
     195,  1087,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1088,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,  1089,   224,   225,
     226,   227,   228,   229,   807,  1090,   231,     0,     0,   232,
     233,  1091,   235,     0,   236,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,     0,     0,   245,     0,  1092,
    1093,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,   276,  1094,  1095,     0,  1096,     0,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,     0,
       0,   291,   292,   293,   294,     0,   295,     0,   296,   297,
     298,   299,   300,   301,   302,  1097,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,  1098,   326,  1099,
     328,   329,   330,   331,   332,  1100,   333,   334,   335,   336,
    1101,   809,   338,  1102,   340,   341,   342,     0,   343,   344,
       0,     0,  1103,   346,   347,     0,     0,   348,   349,   350,
     351,   352,   353,   354,   811,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   368,   369,   812,   371,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,  1104,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,   409,   410,   411,
     412,  1105,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,   436,   437,   438,
    1106,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   815,     0,     0,
     456,   457,     0,   458,   459,   460,     0,   461,   462,   463,
     464,   465,     0,   466,  1107,  1108,     0,     0,   469,   470,
     816,   472,   817,  1109,   474,   475,   818,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,     0,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   494,  1110,
     496,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,     0,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,  1111,     0,     0,
       0,     0,     0,     0,  1112,  2329,  1114,     0,     0,     0,
       0,  1115,     0,  1116,     0,     0,     0,  1117,     0,     0,
    1118,  1119,  1120,   118,  1071,   835,  1072,  1073,  1074,  1075,
    1076,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,  1077,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139,   140,  1078,   142,  1079,  1080,     0,   145,
     146,   147,   148,   149,   150,  1081,   804,   151,   152,   153,
     154,  1082,  1083,   157,     0,   158,   159,   160,   161,   805,
       0,   806,     0,  1084,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,  1085,   192,   193,  1086,   195,  1087,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1088,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,  1089,   224,   225,   226,   227,   228,   229,
     807,  1090,   231,     0,     0,   232,   233,  1091,   235,     0,
     236,     0,   237,   238,     0,   239,   240,   241,   242,   243,
     244,     0,     0,   245,     0,  1092,  1093,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,   276,  1094,
    1095,     0,  1096,     0,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,     0,     0,   291,   292,   293,
     294,     0,   295,     0,   296,   297,   298,   299,   300,   301,
     302,  1097,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,  1098,   326,  1099,   328,   329,   330,   331,
     332,  1100,   333,   334,   335,   336,  1101,   809,   338,  1102,
     340,   341,   342,     0,   343,   344,     0,     0,  1103,   346,
     347,     0,     0,   348,   349,   350,   351,   352,   353,   354,
     811,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   368,   369,   812,
     371,   372,   373,   374,     0,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,  1104,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,   409,   410,   411,   412,  1105,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,   436,   437,   438,  1106,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   815,     0,     0,   456,   457,     0,   458,
     459,   460,     0,   461,   462,   463,   464,   465,     0,   466,
    1107,  1108,     0,     0,   469,   470,   816,   472,   817,  1109,
     474,   475,   818,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,     0,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   494,  1110,   496,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,     0,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,  1111,     0,     0,     0,     0,     0,     0,
    1112,  1113,  1114,     0,     0,     0,     0,  1115,     0,  2551,
       0,     0,     0,  1117,     0,     0,  1118,  1119,  1120,   118,
    1071,   835,  1072,  1073,  1074,  1075,  1076,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,  1077,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
    1078,   142,  1079,  1080,     0,   145,   146,   147,   148,   149,
     150,  1081,   804,   151,   152,   153,   154,  1082,  1083,   157,
       0,   158,   159,   160,   161,   805,     0,   806,     0,  1084,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1085,   192,
     193,  1086,   195,  1087,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1088,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,  1089,
     224,   225,   226,   227,   228,   229,   807,  1090,   231,     0,
       0,   232,   233,  1091,   235,     0,   236,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,     0,     0,   245,
       0,  1092,  1093,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,   276,  1094,  1095,     0,  1096,     0,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,   293,   294,     0,   295,     0,
     296,   297,   298,   299,   300,   301,   302,  1097,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,  1098,
     326,  1099,   328,   329,   330,   331,   332,  1100,   333,   334,
     335,   336,  1101,   809,   338,  1102,   340,   341,   342,     0,
     343,   344,     0,     0,  1103,   346,   347,     0,     0,   348,
     349,   350,   351,   352,   353,   354,   811,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   812,   371,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,  1104,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,   409,
     410,   411,   412,  1105,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,   436,
     437,   438,  1106,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   815,
       0,     0,   456,   457,     0,   458,   459,   460,     0,   461,
     462,   463,   464,   465,     0,   466,  1107,  1108,     0,     0,
     469,   470,   816,   472,   817,  1109,   474,   475,   818,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,  1110,   496,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,  1111,
       0,     0,     0,     0,     0,     0,  1112,  3161,  1114,     0,
       0,     0,     0,  1115,     0,  1116,     0,     0,     0,  1117,
       0,     0,  1118,  1119,  1120,   118,  1071,   835,  1072,  1073,
    1074,  1075,  1076,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,  1077,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,  1078,   142,  1079,  1080,
       0,   145,   146,   147,   148,   149,   150,  1081,   804,   151,
     152,   153,   154,  1082,  1083,   157,     0,   158,   159,   160,
     161,   805,     0,   806,     0,  1084,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,  3107,   183,   184,   185,   186,
     187,   188,   189,   190,  1085,   192,   193,  1086,   195,  1087,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,  1088,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,  1089,   224,   225,   226,   227,
     228,   229,   807,  1090,   231,     0,     0,   232,   233,  1091,
     235,     0,   236,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,     0,     0,   245,     0,  3108,  1093,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,  1094,  1095,     0,  1096,     0,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     292,   293,   294,     0,   295,     0,   296,   297,   298,   299,
     300,   301,   302,  1097,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,  1098,   326,  1099,   328,   329,
     330,   331,   332,  1100,   333,   334,   335,   336,  1101,   809,
     338,  1102,   340,   341,   342,     0,   343,   344,     0,     0,
    1103,   346,   347,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   811,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   812,   371,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,  1104,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   409,   410,   411,  3109,  1105,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,   436,   437,   438,  1106,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   815,     0,     0,   456,   457,
       0,   458,   459,   460,     0,   461,   462,   463,   464,   465,
       0,   466,  1107,  1108,     0,     0,   469,   470,   816,   472,
     817,  1109,   474,   475,   818,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,  1110,   496,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,  1111,     0,     0,     0,     0,
       0,     0,  1112,  1113,  1114,     0,     0,     0,     0,  1115,
       0,  3110,     0,     0,     0,  1117,     0,     0,  1118,  1119,
    1120,   118,  1071,   835,  1072,  1073,  1074,  1075,  1076,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,  1077,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,  3602,  1078,   142,  1079,  1080,     0,   145,   146,   147,
     148,   149,   150,  1081,   804,   151,   152,   153,   154,  1082,
    1083,   157,     0,   158,   159,   160,   161,   805,     0,   806,
       0,  1084,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,  3603,   184,   185,   186,   187,   188,   189,   190,
    1085,   192,   193,  1086,   195,  1087,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1088,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,  1089,   224,   225,   226,   227,   228,   229,   807,  1090,
     231,     0,     0,   232,   233,  1091,   235,     0,   236,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,     0,
       0,   245,     0,  1092,  1093,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,   276,  1094,  1095,     0,
    1096,     0,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,     0,     0,   291,   292,   293,   294,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,  1097,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,  1098,   326,  1099,   328,   329,   330,   331,   332,  1100,
     333,   334,   335,   336,  1101,   809,   338,  1102,   340,   341,
     342,     0,   343,   344,     0,     0,  1103,   346,   347,     0,
       0,   348,   349,   350,   351,   352,   353,   354,   811,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   812,   371,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,  1104,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,   409,   410,   411,   412,  1105,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,   436,   437,   438,  1106,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   815,     0,     0,   456,   457,     0,   458,   459,   460,
       0,   461,   462,   463,   464,   465,     0,   466,  1107,  1108,
       0,     0,   469,   470,   816,   472,   817,  1109,   474,   475,
     818,   477,   478,  3604,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,  1110,   496,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,  1111,     0,     0,     0,     0,     0,     0,  1112,  1113,
    1114,     0,     0,     0,     0,  1115,     0,  1116,     0,     0,
       0,  1117,     0,     0,  1118,  1119,  1120,   118,  1071,   835,
    1072,  1073,  1074,  1075,  1076,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,  1077,     0,     0,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,   139,   140,  1078,   142,
    1079,  1080,     0,   145,   146,   147,   148,   149,   150,  1081,
     804,   151,   152,   153,   154,  1082,  1083,   157,     0,   158,
     159,   160,   161,   805,     0,   806,     0,  1084,   165,   166,
     167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,  3603,   184,
     185,   186,   187,   188,   189,   190,  1085,   192,   193,  1086,
     195,  1087,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1088,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,  1089,   224,   225,
     226,   227,   228,   229,   807,  1090,   231,     0,     0,   232,
     233,  1091,   235,     0,   236,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,     0,     0,   245,     0,  1092,
    1093,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,   276,  1094,  1095,     0,  1096,     0,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,     0,
       0,   291,   292,   293,   294,     0,   295,     0,   296,   297,
     298,   299,   300,   301,   302,  1097,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,  1098,   326,  1099,
     328,   329,   330,   331,   332,  1100,   333,   334,   335,   336,
    1101,   809,   338,  1102,   340,   341,   342,     0,   343,   344,
       0,     0,  1103,   346,   347,     0,     0,   348,   349,   350,
     351,   352,   353,   354,   811,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   368,   369,   812,   371,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,  1104,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,   409,   410,   411,
     412,  1105,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,   436,   437,   438,
    1106,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   815,     0,     0,
     456,   457,     0,   458,   459,   460,     0,   461,   462,   463,
     464,   465,     0,   466,  1107,  1108,     0,     0,   469,   470,
     816,   472,   817,  1109,   474,   475,   818,   477,   478,  3604,
     480,   481,     0,     0,   482,   483,   484,     0,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   494,  1110,
     496,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,     0,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,  1111,     0,     0,
       0,     0,     0,     0,  1112,  1113,  1114,     0,     0,     0,
       0,  1115,     0,  1116,     0,     0,     0,  1117,     0,     0,
    1118,  1119,  1120,   118,  1071,   835,  1072,  1073,  1074,  1075,
    1076,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,  1077,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139,   140,  1078,   142,  1079,  1080,     0,   145,
     146,   147,   148,   149,   150,  1081,   804,   151,   152,   153,
     154,  1082,  1083,   157,     0,   158,   159,   160,   161,   805,
       0,   806,     0,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,  1085,   192,   193,  1086,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1088,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,  1089,   224,   225,   226,   227,   228,   229,
     807,  1090,   231,     0,     0,   232,   233,  1091,   235,     0,
     236,     0,   237,   238,     0,   239,   240,   241,   242,   243,
     244,     0,     0,   245,     0,  1092,  1093,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,   276,  1094,
    1095,     0,  1096,     0,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,     0,     0,   291,   292,   293,
     294,     0,   295,     0,   296,   297,   298,   299,   300,   301,
     302,  1097,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,  1098,   326,  1099,   328,   329,   330,   331,
     332,     0,   333,   334,   335,   336,  1101,   809,   338,  1102,
     340,   341,   342,     0,   343,   344,     0,     0,  1103,   346,
     347,     0,     0,   348,   349,   350,   351,   352,   353,   354,
     811,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   368,   369,   812,
     371,   372,   373,   374,     0,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,  1104,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,   409,   410,   411,   412,  1105,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,   436,   437,   438,  1106,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   815,     0,     0,   456,   457,     0,   458,
     459,   460,     0,   461,   462,   463,   464,   465,     0,   466,
    1107,  1108,     0,     0,   469,   470,   816,   472,   817,  1109,
     474,   475,   818,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,     0,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   494,  1110,   496,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,     0,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,     0,     0,     0,     0,     0,     0,     0,
    1449,  1450,     0,     0,     0,     0,     0,  1115,     0,  1116,
       0,     0,     0,  1117,     0,     0,  1118,  1119,  1120,   118,
    1071,   835,  1072,  1073,  1074,  1075,  1076,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,  1077,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139, -2115,
    1078,   142,  1079,  1080,     0,   145,   146,   147,   148,   149,
     150,  1081,   804,   151,   152,   153,   154,  1082,  1083,   157,
       0,   158,   159,   160,   161,   805,     0,   806,     0,  1084,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,   182,
    3603,   184,   185,   186,   187,   188,   189,   190,  1085,   192,
     193,  1086,   195,  1087,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1088,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,  1089,
     224,   225,   226,   227,   228,   229,   807,  1090,   231,     0,
       0,   232,   233,  1091,   235,     0,   236,     0,   237,   238,
       0,   239,   240,   241,   242, -2115,   244,     0,     0,   245,
       0,  1092,  1093,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256, -2115,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,   276,  1094,  1095,     0,  1096,     0,
     280,     0,     0,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,   293, -2115,     0,   295,     0,
     296,   297,   298,   299,   300,   301,   302,  1097,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,  1098,
     326,  1099,   328,   329,   330,   331,   332,     0,   333,   334,
       0,   336,  1101,   809,   338,  1102,   340,   341,   342,     0,
     343,   344,     0,     0,  1103,   346,   347,     0,     0,   348,
     349,   350,   351,   352,   353,   354,   811,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   812,   371,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,  1104,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,   409,
     410,   411,   412,  1105,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0, -2115,
     437,   438,  1106,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   815,
       0,     0,   456,   457,     0,   458,   459,   460,     0,   461,
     462,   463,   464,   465,     0,   466,  1107,  1108,     0,     0,
     469,   470,   816,   472,   817,  1109,   474,   475,   818,   477,
     478,  3604,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,  1110,   496,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527, -2115,
       0,     0,     0,     0,     0,     0,  1112,  1113,  1114,     0,
       0,     0,     0,  1115,     0,  1116,     0,     0,     0,  1117,
       0,     0,  1118,  1119,  1120,   118,  1071,   835,  1072,  1073,
       0,  1075,  1076,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,  1077,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,  1078,   142,  1079,  1080,
       0,   145,   146,   147,   148,   149,   150,  1081,   804,   151,
     152,   153,   154,  1082,  1083,   157,     0,   158,   159,   160,
     161,   805,     0,   806,     0,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,  1085,   192,   193,  1086,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,  1088,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,  1089,   224,   225,   226,   227,
     228,   229,   807,  1090,   231,     0,     0,   232,   233,  1091,
     235,     0,   236,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,     0,     0,   245,     0,  1092,  1093,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,  1094,  1095,     0,  1096,     0,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     292,   293,   294,     0,   295,     0,   296,   297,   298,   299,
     300,   301,   302,  1097,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,  1098,   326,  1099,   328,   329,
     330,   331,   332,     0,   333,   334,   335,   336,  1101,   809,
     338,  1102,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   811,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   812,   371,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,  1104,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   409,   410,   411,   412,  2232,
    2233,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,   436,   437,   438,  1106,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   815,     0,     0,   456,   457,
       0,   458,   459,   460,     0,   461,   462,   463,   464,   465,
       0,   466,  1107,  1108,     0,     0,   469,   470,   816,   472,
     817,  1109,   474,   475,   818,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,  1110,   496,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,     0,     0,     0,     0,     0,
       0,     0,  2234,  2235,     0,     0,     0,     0,     0,  1115,
       0,  1116,     0,     0,     0,  1117,     0,     0,  1118,  1119,
    1120,   118,  1071,   835,  1072,  1073,  1074,  1075,  1076,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,  1077,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1078,   142,  1079,  1080,     0,   145,   146,   147,
     148,   149,   150,  1081,   804,   151,   152,   153,   154,  1082,
    1083,   157,     0,   158,   159,   160,   161,   805,     0,   806,
       0,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1085,   192,   193,  1086,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1088,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,  1089,   224,   225,   226,   227,   228,   229,   807,  1090,
     231,     0,     0,   232,   233,  1091,   235,     0,   236,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,     0,
       0,   245,     0,  1092,  1093,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,   276,  1094,  1095,     0,
    1096,     0,   280,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,     0,     0,   291,   292,   293,   294,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,  1097,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,  1098,   326,  1099,   328,   329,   330,   331,   332,     0,
     333,   334,   335,   336,  1101,   809,   338,  1102,   340,   341,
     342,     0,   343,   344,     0,     0,  1103,   346,   347,     0,
       0,   348,   349,   350,   351,   352,   353,   354,   811,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   812,   371,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,  1104,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,   409,   410,   411,   412,  1105,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,   436,   437,   438,  1106,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   815,     0,     0,   456,   457,     0,   458,   459,   460,
       0,   461,   462,   463,   464,   465,     0,   466,  1107,  1108,
       0,     0,   469,   470,   816,   472,   817,  1109,   474,   475,
     818,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,  1110,   496,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,     0,     0,     0,     0,     0,     0,     0,  1449,  1450,
       0,     0,     0,     0,     0,  1115,     0,  1116,     0,     0,
       0,  1117,     0,     0,  1118,  1119,  1120,   118,  1071,   835,
    1072,  1073,     0,  1075,  1076,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,  1077,     0,     0,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,   139,   140,  1078,   142,
    1079,  1080,     0,   145,   146,   147,   148,   149,   150,  1081,
     804,   151,   152,   153,   154,  1082,  1083,   157,     0,   158,
     159,   160,   161,   805,     0,   806,     0,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1085,   192,   193,  1086,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1088,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,  1089,   224,   225,
     226,   227,   228,   229,   807,  1090,   231,     0,     0,   232,
     233,  1091,   235,     0,   236,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,     0,     0,   245,  3127,  1092,
    1093,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,  -811,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,   276,  1094,  1095,     0,  1096,     0,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,     0,
       0,   291,   292,   293,   294,     0,   295,     0,   296,   297,
     298,   299,   300,   301,   302,  1097,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,  1098,   326,  1099,
     328,   329,   330,   331,   332,     0,   333,   334,   335,   336,
    1101,   809,   338,  1102,   340,   341,   342,     0,   343,   344,
       0,     0,   345,   346,   347,     0,     0,   348,   349,   350,
     351,   352,   353,   354,   811,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   368,   369,   812,   371,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,  1104,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,   436,   437,   438,
    1106,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   815,     0,     0,
     456,   457,     0,   458,   459,   460,     0,   461,   462,   463,
     464,   465,     0,   466,  1107,  1108,     0,     0,   469,   470,
     816,   472,   817,  1109,   474,   475,   818,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,     0,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   494,  1110,
     496,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,     0,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1115,     0,  2809,     0,     0,     0,  1117,     0,     0,
    1118,  1119,  1120,   118,  1071,   835,  1072,  1073,     0,  1075,
    1076,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,  1077,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139,   140,  1078,   142,  1079,  1080,     0,   145,
     146,   147,   148,   149,   150,  1081,   804,   151,   152,   153,
     154,  1082,  1083,   157,     0,   158,   159,   160,   161,   805,
       0,   806,     0,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,  1085,   192,   193,  1086,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1088,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,  1089,   224,   225,   226,   227,   228,   229,
     807,  1090,   231,     0,     0,   232,   233,  1091,   235,     0,
     236,     0,   237,   238,     0,   239,   240,   241,   242,   243,
     244,     0,     0,   245,     0,  1092,  1093,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,   276,  1094,
    1095,     0,  1096,     0,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,     0,     0,   291,   292,   293,
     294,     0,   295,     0,   296,   297,   298,   299,   300,   301,
     302,  1097,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,  1098,   326,  1099,   328,   329,   330,   331,
     332,     0,   333,   334,   335,   336,  1101,   809,   338,  1102,
     340,   341,   342,     0,   343,   344,     0,     0,   345,   346,
     347,     0,     0,   348,   349,   350,   351,   352,   353,   354,
     811,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   368,   369,   812,
     371,   372,   373,   374,     0,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,  1104,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,   436,   437,   438,  1106,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   815,     0,     0,   456,   457,     0,   458,
     459,   460,     0,   461,   462,   463,   464,   465,     0,   466,
    1107,  1108,     0,     0,   469,   470,   816,   472,   817,  1109,
     474,   475,   818,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,     0,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   494,  1110,   496,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,     0,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1115,     0,  2809,
       0,     0,     0,  1117,     0,     0,  1118,  1119,  1120,   118,
    1071,   835,  1072,  1073,     0,  1075,  1076,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,  1077,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
    1078,   142,  1079,  1080,     0,   145,   146,   147,   148,   149,
     150,  1081,   804,   151,   152,   153,   154,  1082,  1083,   157,
       0,   158,   159,   160,   161,   805,     0,   806,     0,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1085,   192,
     193,  1086,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1088,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,  1089,
     224,   225,   226,   227,   228,   229,   807,  1090,   231,     0,
       0,   232,   233,  1091,   235,     0,   236,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,     0,     0,   245,
       0,  1092,  1093,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,   276,  1094,  1095,     0,  1096,     0,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,   293,   294,     0,   295,     0,
     296,   297,   298,   299,   300,   301,   302,  1097,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,  1098,
     326,  1099,   328,   329,   330,   331,   332,     0,   333,   334,
     335,   336,  1101,   809,   338,  1102,   340,   341,   342,     0,
     343,   344,     0,     0,   345,   346,   347,     0,     0,   348,
     349,   350,   351,   352,   353,   354,   811,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   812,   371,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,  1104,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,   409,
     410,   411,   412,  1105,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,   436,
     437,   438,  1106,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   815,
       0,     0,   456,   457,     0,   458,   459,   460,     0,   461,
     462,   463,   464,   465,     0,   466,  1107,  1108,     0,     0,
     469,   470,   816,   472,   817,  1109,   474,   475,   818,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,  1110,   496,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1115,     0,  1116,     0,     0,     0,  1117,
       0,     0,  1118,  1119,  1120,   118,  1071,   835,  1072,  1073,
    1074,  1075,  1076,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,  1077,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,     0,  1078,   142,  1079,  1080,
       0,   145,   146,   147,   148,   149,   150,  1081,   804,   151,
     152,   153,   154,  1082,  1083,   157,     0,   158,   159,   160,
     161,   805,     0,   806,     0,  1084,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,  1085,   192,   193,  1086,   195,  1087,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,  1088,   210,
     211,   212,     0,   213,   214,   215,     0,   216,     0,   218,
       0,   219,   220,   221,   222,  1089,   224,   225,   226,   227,
     228,   229,   807,  1090,   231,     0,     0,   232,   233,  1091,
     235,     0,   236,     0,   237,   238,     0,   239,   240,   241,
     242,     0,   244,     0,     0,   245,     0,  1092,  1093,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,  1094,  1095,     0,  1096,     0,   280,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     292,   293,     0,     0,   295,     0,   296,   297,   298,   299,
     300,   301,   302,  1097,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,  1098,   326,  1099,   328,   329,
     330,   331,   332,     0,   333,   334,     0,   336,  1101,   809,
     338,  1102,   340,   341,   342,     0,   343,   344,     0,     0,
    1103,   346,   347,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   811,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   812,   371,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,  1104,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   409,   410,   411,   412,  1105,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,     0,   437,   438,  1106,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   815,     0,     0,   456,   457,
       0,   458,   459,   460,     0,   461,   462,   463,   464,   465,
       0,   466,  1107,  1108,     0,     0,   469,   470,   816,   472,
     817,  1109,   474,   475,   818,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,  1110,   496,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,     0,     0,     0,     0,     0,
       0,     0,  1112,  1113,  1114,   118,     0,     0,     0,  1115,
       0,  1116,  1076,     0,     0,  1117,     0,     0,  1118,  1119,
    1120,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,  1077,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
       0,   145,   146,   147,   148,   149,   150,  1081,   804,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   805,     0,   806,     0,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   807,     0,   231,     0,     0,   232,   233,   234,
     235,     0,   236,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,     0,     0,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     292,   293,   294,     0,   295,     0,   296,   297,   298,   299,
     300,   301,   302,  1097,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,   333,   334,   335,   336,     0,   809,
     338,   339,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   811,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   812,   371,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,   436,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   815,     0,     0,   456,   457,
       0,   458,   459,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,     0,     0,   469,   470,   816,   472,
     817,     0,   474,   475,   818,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,     0,     0,     0,     0,     0,
       0,     0,   993,  1378,   835,     0,     0,     0,  1075,  1115,
       0,  2146,     0,     0,     0,  1117,     0,     0,  1118,  1119,
    1120,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     127,   128,   129,     0,     0,     0,   572,     0,     0,     0,
       0,   577,   131,   132,     0,   133,   134,   135,   579,   137,
     138,   139,   580,   581,   582,   583,   584,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   151,   152,   153,   154,
     588,   589,   157,     0,   158,   159,   160,   161,   591,     0,
     593,     0,   595,   165,   166,   167,   168,   169,   596,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,     0,
     599,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   601,   192,   193,   602,   195,     0,   196,     0,   197,
     198,   199,   200,   201,   202,     0,     0,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,   212,     0,
     213,   214,   215,     0,   216,   217,   218,     0,   219,   220,
     221,   222,   612,   224,   225,   226,   227,   228,   229,   613,
    1379,   231,     0,     0,   232,   233,   617,   235,     0,   236,
       0,   237,   620,     0,   622,   240,   241,   623,   624,   244,
       0,     0,   245,     0,   628,   629,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,   631,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,   634,   635,   272,   273,   274,   275,   276,   636,   637,
       0,   639,     0,   280,   641,   642,   283,   643,   285,   286,
     287,   288,   289,   290,     0,     0,   291,   646,   293,   647,
       0,   295,     0,   296,   297,   298,   299,   300,   301,   302,
    2412,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   651,   652,   653,   328,   329,   330,   331,   654,
       0,   333,   334,   656,   336,     0,   658,   338,   659,   340,
     341,   342,     0,   343,   344,  1380,     0,   345,   346,   347,
       0,     0,   348,   349,   665,   666,   352,   353,   667,   668,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,     0,     0,   368,   369,   673,   674,
     372,   373,   675,     0,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     679,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,   682,   410,   411,   412,   683,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,   685,   427,   428,   429,   430,   431,   432,   686,   434,
     435,     0,   688,   437,   438,   689,   440,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     691,   454,   692,     0,     0,   456,   457,     0,   458,   696,
     460,     0,   461,   462,   463,   464,   465,     0,   466,   699,
     700,     0,     0,   469,   470,   703,   472,   704,  1381,   474,
     475,   706,   477,   478,   479,   480,   481,     0,     0,   482,
     483,   484,     0,   485,   486,   487,   488,     0,   489,   490,
     491,   492,   493,   711,   712,   496,     0,   497,   714,   499,
     500,   501,   502,   503,   504,   505,     0,     0,   506,     0,
       0,   507,   508,   509,   510,   511,   512,   719,   720,   721,
     722,   723,   724,   725,   726,   727,   728,   729,   524,   525,
     526,   527,     0,     0,   535,     0,     0,     0,     0,  1382,
    1383,  2413,     0,     0,     0,     0,  2414,     0,  2415,     0,
       0,     0,  1117,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
       0,  1029,     0,     0,   131,   132,     0,   133,   134,   135,
       0,   137,   138,   139,   140,   141,     0,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   151,   152,
     153,   154,   155,   156,   157,     0,   158,   159,   160,   161,
     162,     0,     0,     0,   164,   165,   166,   167,   168,   169,
       0,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,     0,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,  -616,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,     0,   231,     0,  -616,   232,   233,   234,   235,
    -616,   236,     0,   237,     0,     0,     0,   240,   241,   536,
       0,   244,     0,     0,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,     0,   271,   272,   273,   274,   275,   276,
     277,   278,  -616,   279,     0,   280,     0,     0,   283,     0,
     285,   286,   287,   288,   289,   290,     0,     0,   291,     0,
     293,     0,  -616,   295,     0,   296,   297,   298,   299,   300,
     301,   302,   537,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   327,   328,   329,   330,
     331,   332,     0,   333,   334,     0,   336,     0,   337,   338,
     339,   340,   341,   342,  -616,   343,   344,     0,     0,   345,
     346,   347,     0,  -616,   348,   349,   350,     0,   352,   353,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   368,   369,
     370,     0,   372,   373,   374,     0,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,     0,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,     0,     0,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   538,   454,   455,     0,     0,   456,   457,     0,
     458,     0,   460,     0,   461,   462,   463,   464,   465,     0,
     466,   467,   468,     0,     0,   469,   470,   471,   472,   473,
       0,   474,   475,   476,   477,   478,   479,   480,   481,  -616,
       0,   482,   483,   484,     0,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   494,   495,   496,     0,   497,
       0,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,     0,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   535,     0,   561,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1191,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   131,   132,     0,   133,   134,   135,
       0,   137,   138,   139,   140,   141,     0,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   151,   152,
     153,   154,   155,   156,   157,     0,   158,   159,   160,   161,
     162,     0,     0,     0,   164,   165,   166,   167,   168,   169,
       0,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,     0,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,     0,   231,     0,     0,   232,   233,   234,   235,
       0,   236,     0,   237,     0,     0,     0,   240,   241,   536,
       0,   244,     0,     0,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,     0,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,     0,     0,   283,     0,
     285,   286,   287,   288,   289,   290,     0,     0,   291,     0,
     293,     0,     0,   295,     0,   296,   297,   298,   299,   300,
     301,   302,   537,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   327,   328,   329,   330,
     331,   332,     0,   333,   334,     0,   336,     0,   337,   338,
     339,   340,   341,   342,     0,   343,   344,     0,     0,   345,
     346,   347,     0,     0,   348,   349,   350,     0,   352,   353,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   368,   369,
     370,     0,   372,   373,   374,     0,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,     0,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,     0,     0,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   538,   454,   455,     0,     0,   456,   457,     0,
     458,     0,   460,     0,   461,   462,   463,   464,   465,     0,
     466,   467,   468,     0,     0,   469,   470,   471,   472,   473,
       0,   474,   475,   476,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,     0,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   494,   495,   496,     0,   497,
       0,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,     0,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   118,     0,   561,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2502,  3318,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,   132,     0,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,   804,   151,   152,
     153,   154,   155,   156,   157,     0,   158,   159,   160,   161,
     805,     0,   806,     0,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,    14,    15,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   807,     0,   231,     0,     0,   232,   233,   234,   235,
       0,   236,     0,   237,   238,    23,   239,   240,   241,   242,
     243,   244,     0,     0,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   808,     0,   291,   292,
     293,   294,     0,   295,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,   333,   334,   335,   336,     0,   809,   338,
     339,   340,   341,   342,     0,   343,   344,     0,   810,   345,
     346,   347,     0,     0,   348,   349,   350,   351,   352,   353,
     354,   811,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    26,    27,    28,     0,   368,   369,
     812,   371,   372,   373,   374,   813,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,   409,   410,   411,   412,   413,   814,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,    33,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,    35,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   815,    37,     0,   456,   457,    38,
     458,   459,   460,     0,   461,   462,   463,   464,   465,     0,
     466,   467,   468,     0,     0,   469,   470,   816,   472,   817,
       0,   474,   475,   818,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,    40,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   819,   495,   496,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,    44,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   993,     0,    45,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     820,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     3,     4,     0,   572,     0,
       0,     0,     0,   577,   131,   132,     0,   133,   134,   135,
     579,   137,   138,   139,   580,   581,   582,   583,   584,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   151,   152,
     153,   154,   588,   589,   157,     0,   158,   159,   160,   161,
     591,     0,   593,     0,   595,   165,   166,   167,   168,   169,
     596,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,   599,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   601,   192,   193,   602,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,    14,    15,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,   612,   224,   225,   226,   227,   228,
     229,   613,     0,   231,     0,     0,   232,   233,   617,   235,
       0,   236,     0,   237,   620,    23,   622,   240,   241,   623,
     624,   244,     0,     0,   245,     0,   628,   629,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,   631,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   634,   635,   272,   273,   274,   275,   276,
     636,   637,     0,   639,     0,   280,   641,   642,   283,   643,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   646,
     293,   647,     0,   295,     0,   296,   297,   298,   299,   300,
     301,   302,   650,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   651,   652,   653,   328,   329,   330,
     331,   654,     0,   333,   334,   656,   336,     0,   658,   338,
     659,   340,   341,   342,     0,   343,   344,     0,     0,   345,
     346,   347,     0,     0,   348,   349,   665,   666,   352,   353,
     667,   668,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    26,    27,    28,     0,   368,   369,
     673,   674,   372,   373,   675,     0,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   679,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,   682,   410,   411,   412,   683,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,    33,   685,   427,   428,   429,   430,   431,   432,
     686,   434,   435,    35,   688,   437,   438,   689,   440,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   691,   454,   692,    37,     0,   456,   457,    38,
     458,   696,   460,     0,   461,   462,   463,   464,   465,     0,
     466,   699,   700,     0,     0,   469,   470,   703,   472,   704,
       0,   474,   475,   706,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,    40,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   994,   712,   496,     0,   497,
     714,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,    44,   507,   508,   509,   510,   511,   512,   719,
     720,   721,   722,   723,   724,   725,   726,   727,   728,   729,
     524,   525,   526,   527,     0,   118,    45,   561,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      46,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,   804,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   805,     0,   806,     0,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   807,     0,   231,     0,     0,   232,   233,   234,
     235,     0,   236,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,     0,     0,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   808,     0,   291,
     292,   293,   294,     0,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,   333,   334,   335,   336,     0,   809,
     338,   339,   340,   341,   342,     0,   343,   344,     0,   810,
     345,   346,   347,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   811,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   812,   371,   372,   373,   374,   813,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   409,   410,   411,   412,   413,
     814,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,   436,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   815,     0,     0,   456,   457,
       0,   458,   459,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,     0,     0,   469,   470,   816,   472,
     817,     0,   474,   475,   818,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   819,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   118,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   820,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,   804,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   805,     0,   806,     0,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   807,     0,   231,     0,     0,   232,   233,   234,
     235,     0,   236,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,     0,     0,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     292,   293,   294,     0,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,   333,   334,   335,   336,     0,   809,
     338,   339,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   811,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   812,   371,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   409,   410,   411,   412,   413,
     814,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,   436,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   815,     0,     0,   456,   457,
       0,   458,   459,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,     0,     0,   469,   470,   816,   472,
     817,     0,   474,   475,   818,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   118,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    46,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,   804,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   805,     0,   806,     0,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   807,     0,   231,     0,     0,   232,   233,   234,
     235,     0,   236,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,     0,     0,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     292,   293,   294,     0,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,   333,   334,   335,   336,     0,   809,
     338,   339,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   811,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   812,   371,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,   436,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   815,     0,     0,   456,   457,
       0,   458,   459,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,     0,     0,   469,   470,   816,   472,
     817,     0,   474,   475,   818,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   535,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3411,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,    14,    15,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,     0,   231,     0,     0,   232,   233,   234,
     235,     0,   236,     0,   237,     0,    23,     0,   240,   241,
     536,     0,   244,     0,     0,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,     0,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,     0,     0,   283,
       0,   285,   286,   287,   288,   289,   290,     0,     0,   291,
       0,   293,     0,     0,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   537,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,     0,   327,   328,   329,
     330,   331,   332,     0,   333,   334,     0,   336,     0,   337,
     338,   339,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,   350,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    26,    27,    28,     0,   368,
     369,   370,     0,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,    33,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,    35,     0,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   538,   454,   455,    37,     0,   456,   457,
      38,   458,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,     0,     0,   469,   470,   471,   472,
     473,     0,   474,   475,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,    40,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   819,   495,   496,     0,
     497,     0,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,    44,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   535,     0,    45,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    46,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,   908,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,     0,   231,     0,     0,   232,   233,   234,
     235,     0,   236,     0,   237,     0,    23,     0,   240,   241,
     536,     0,   244,     0,     0,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,     0,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,     0,     0,   283,
       0,   285,   286,   287,   288,   289,   290,     0,     0,   291,
       0,   293,     0,     0,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   537,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,     0,   327,   328,   329,
     330,   331,   332,     0,   333,   334,     0,   336,     0,   337,
     338,   339,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,   350,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    26,    27,    28,     0,   368,
     369,   370,     0,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,    33,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,     0,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   538,   454,   455,     0,     0,   456,   457,
      38,   458,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   909,   468,     0,     0,   910,   470,   471,   472,
     473,     0,   474,   475,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,    40,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   819,   495,   496,     0,
     497,     0,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,    44,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   535,     0,    45,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    46,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,     0,   231,     0,     0,   232,   233,   234,
     235,     0,   236,     0,   237,     0,    23,     0,   240,   241,
     536,     0,   244,     0,     0,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,     0,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,     0,     0,   283,
       0,   285,   286,   287,   288,   289,   290,     0,     0,   291,
       0,   293,     0,     0,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   537,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,     0,   327,   328,   329,
     330,   331,   332,     0,   333,   334,     0,   336,     0,   337,
     338,   339,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,   350,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    26,    27,    28,     0,   368,
     369,   370,     0,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,    33,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,     0,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   538,   454,   455,     0,     0,   456,   457,
      38,   458,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,     0,     0,   469,   470,   471,   472,
     473,     0,   474,   475,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,    40,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   819,   495,   496,     0,
     497,     0,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,    44,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,     0,   535,    45,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    46,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1013,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1502,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2258,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2502,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2640,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3313,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2109,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2214,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,     0,  2977,  1378,   835,
       0,     0,  2084,  1075,     0,     0,     0,     0,     0,  2085,
    2086,     0,  3168,  2087,  2088,  2089,   119,   120,   121,   122,
     123,   124,   125,   126,   568,   127,   128,   129,   569,   570,
     571,  2978,   573,   574,   575,   576,  2979,   131,   132,   578,
     133,   134,   135,  2980,   137,   138,   139,     0,  1515,  2981,
    1517,  1518,   585,   145,   146,   147,   148,   149,   150,   586,
     587,   151,   152,   153,   154,  1519,  1520,   157,   590,   158,
     159,   160,   161,     0,   592,  2982,   594,  2983,   165,   166,
     167,   168,   169,  2984,   171,   172,   173,   597,   174,   175,
     176,   177,   178,   179,   598,  2985,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1525,   192,   193,  1526,
     195,   603,   196,   604,   197,   198,   199,   200,   201,   202,
     605,   606,   203,   204,   205,   206,   607,   608,   207,   208,
    1088,   210,   211,   212,   609,   213,   214,   215,   610,   216,
     217,   218,   611,   219,   220,   221,   222,     0,   224,   225,
     226,   227,   228,   229,     0,   614,   231,   615,   616,   232,
     233,  1527,   235,   618,   236,   619,   237,  2986,   621,  2987,
     240,   241,  2988,  2989,   244,   625,   626,   245,   627,     0,
       0,   248,   249,   630,   250,   251,   252,   253,   254,   255,
     256,  2990,   258,   259,   260,   261,   632,   262,   263,   264,
     265,   266,   267,   268,   633,   269,  2991,     0,   272,   273,
     274,   275,   276,  1533,  1534,   638,  1535,   640,   280,  2992,
    2993,   283,  2994,   285,   286,   287,   288,   289,   290,   644,
     645,   291,  2995,   293,  2996,   648,   295,   649,   296,   297,
     298,   299,   300,   301,   302,  2997,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,  1542,  2998,  1544,
     328,   329,   330,   331,  2999,   655,   333,   334,  3000,   336,
     657,     0,   338,  1546,   340,   341,   342,   660,   343,   344,
     661,   662,  3001,   346,   347,   663,   664,   348,   349,     0,
    3002,   352,   353,  3003,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   669,   670,   671,
     672,   368,   369,     0,  3004,   372,   373,     0,   676,   375,
     376,   377,   677,   378,   379,   380,   381,   382,   383,   678,
     384,   385,   386,   387,   388,  1550,   390,   391,   392,   393,
     680,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   681,   407,   408,  3005,   410,   411,
     412,  1552,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   684,  3006,   427,   428,   429,
     430,   431,   432,  3007,   434,   435,   687,  3008,   437,   438,
    1556,   440,   690,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,  3009,   454,     0,   693,   694,
     456,   457,   695,   458,  3010,   460,   697,   461,   462,   463,
     464,   465,   698,   466,  1559,  1560,   701,   702,   469,   470,
       0,   472,     0,   705,   474,   475,  3011,   477,   478,   479,
     480,   481,  3012,   708,   482,   483,   484,   709,   485,   486,
     487,   488,   710,   489,   490,   491,   492,   493,     0,  1563,
     496,   713,   497,  3013,   499,   500,   501,   502,   503,   504,
     505,   715,   716,   506,   717,   718,   507,   508,   509,   510,
     511,   512,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   524,   525,   526,   527,     0,   535,     0,
    2090,  2091,  2092,  2084,  3014,  3015,  2095,  2096,  2097,  2098,
    2085,  2086,     0,     0,  2087,  2088,  2089,   119,   120,   121,
     122,   123,   124,   125,   126,     0,   127,   128,   129,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
       0,   133,   134,   135,     0,   137,   138,   139,   140,   141,
       0,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   151,   152,   153,   154,   155,   156,   157,     0,
     158,   159,   160,   161,   162,     0,     0,     0,   164,   165,
     166,   167,   168,   169,     0,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,     0,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,   212,     0,   213,   214,   215,     0,
     216,   217,   218,     0,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,     0,   231,     0,     0,
     232,   233,   234,   235,     0,   236,     0,   237,     0,     0,
       0,   240,   241,   536,     0,   244,     0,     0,   245,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,     0,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,     0,   280,
       0,     0,   283,     0,   285,   286,   287,   288,   289,   290,
       0,     0,   291,     0,   293,     0,     0,   295,     0,   296,
     297,   298,   299,   300,   301,   302,   537,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     327,   328,   329,   330,   331,   332,     0,   333,   334,     0,
     336,     0,   337,   338,   339,   340,   341,   342,     0,   343,
     344,     0,     0,   345,   346,   347,     0,     0,   348,   349,
     350,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,     0,
       0,     0,   368,   369,   370,     0,   372,   373,   374,     0,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,     0,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,   434,   435,     0,     0,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   538,   454,   455,     0,
       0,   456,   457,     0,   458,     0,   460,     0,   461,   462,
     463,   464,   465,     0,   466,   467,   468,     0,     0,   469,
     470,   471,   472,   473,     0,   474,   475,   476,   477,   478,
     479,   480,   481,     0,     0,   482,   483,   484,     0,   485,
     486,   487,   488,     0,   489,   490,   491,   492,   493,   494,
     495,   496,     0,   497,     0,   499,   500,   501,   502,   503,
     504,   505,     0,     0,   506,     0,     0,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,     0,     0,
       0,  2090,  2091,  2092,     0,  2093,  2094,  2095,  2096,  2097,
    2098,  1647,     0,     0,  1648,     0,     0,     0,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,
       0,     0,     0,  1647,     0,     0,  1648,     0,     0,  1656,
    1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,     0,  1658,
       0,     0,     0,     0,     0,     0,  1659,     0,     0,     0,
       0,  1656,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1658,     0,     0,     0,     0,     0,     0,  1659,     0,
       0,  1647,     0,  1660,  1648,     0,     0,     0,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,
       0,     0,     0,  1647,     0,  1660,  1648,     0,     0,  1656,
    1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,     0,  1658,
       0,     0,     0,     0,     0,     0,  1659,     0,     0,     0,
       0,  1656,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1658,     0,     0,     0,     0,     0,     0,  1659,     0,
       0,     0,     0,  1660,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1660,     0,     0,     0,     0,
       0,  1647,  1661,     0,  1648,     0,     0,     0,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,
    1662,     0,     0,     0,  1661,  1663,     0,     0,     0,  1656,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1658,
       0,     0,  1662,     0,     0,     0,  1659,  1663,  1664,  1665,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1666,     0,     0,     0,     0,     0,     0,
    1664,  1665,  1661,  1660,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1666,     0,     0,     0,     0,
    1662,     0,     0,     0,  1661,  1663,     0,     0,     0,     0,
       0,     0,     0,     0,  1667,     0,     0,  1668,     0,     0,
       0,     0,  1662,     0,     0,     0,     0,  1663,  1664,  1665,
       0,  1669,     0,     0,  1670,     0,  1667,     0,     0,  1668,
       0,     0,     0,  1666,     0,     0,     0,     0,     0,     0,
    1664,  1665,     0,  1669,     0,     0,  1670,     0,     0,     0,
       0,     0,     0,     0,     0,  1666,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1661,     0,  1667,     0,     0,  1668,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1662,  1669,     0,     0,  1670,  1663,  1667,     0,     0,  1668,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1669,     0,     0,  1670,     0,  1664,  1665,
       0,     0,     0,     0,     0,     0,  1671,     0,     0,     0,
       0,  1647,     0,  1666,  1648,     0,     0,     0,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,     0,     0,     0,  1671,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1656,
       0,     0,     0,     0,  1401,  1402,     0,     0,     0,  1658,
       0,     0,     0,     0,  1667,     0,  1659,  1668,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1669,     0,     0,  1670,     0,  1671,     0,     0,     0,
       0,     0,     0,  1660,     0,  1403,  1404,     0,     0,  1405,
    1406,     0,     0,     0,  1647,     0,     0,  1648,  1671,     0,
       0,  1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,     0,
       0,     0,     0,     0,     0,     0,  1672,     0,     0,  1673,
    1674,  1675,  1656,  1676,  1677,  1678,  1679,  1680,  1681,     0,
       0,     0,  1658,  2847,     0,     0,     0,     0,  1672,  1659,
       0,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,
    1681,     0,     0,     0,     0,  2856,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1660,     0,  1407,  1408,
       0,     0,     0,     0,     0,     0,  1671,     0,     0,     0,
       0,     0,  1661,     0,     0,     0,  1672,     0,     0,  1673,
    1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,
    1662,     0,     0,  2923,     0,  1663,     0,     0,  1672,     0,
       0,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,
    1681,     0,     0,     0,     0,  3160,     0,     0,  1664,  1665,
       0,     0,     0,  1409,  1410,  1411,  1412,  1413,  1414,  1415,
    1416,     0,     0,  1666,  1417,  1418,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1647,  1661,     0,  1648,     0,     0,
       0,  1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,     0,
       0,     0,     0,  1662,  1667,     0,  1672,  1668,  1663,  1673,
    1674,  1675,  1656,  1676,  1677,  1678,  1679,  1680,  1681,     0,
       0,  1669,  1658,  3167,  1670,     0,     0,     0,     0,  1659,
       0,  1664,  1665,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1419,  1420,     0,     0,  1666,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1660,     0,     0,     0,
       0,  1647,     0,     0,  1648,     0,     0,     0,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,
       0,     0,     0,  1421,  1422,     0,     0,  1667,     0,  1656,
    1668,     0,     0,     0,     0,     0,     0,     0,     0,  1658,
       0,     0,     0,     0,  1669,     0,  1659,  1670,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1671,     0,     0,     0,
       0,  1647,     0,  1660,  1648,     0,     0,     0,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1661,     0,     0,     0,  1656,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1658,
       0,     0,     0,  1662,     0,     0,  1659,     0,  1663,     0,
       0,  1423,  1424,     0,  1647,     0,     0,  1648,     0,     0,
       0,  1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,     0,
       0,  1664,  1665,  1660,     0,  1425,  1426,     0,     0,  1671,
       0,     0,  1656,     0,     0,     0,  1666,     0,     0,     0,
       0,     0,  1658,     0,     0,     0,     0,     0,     0,  1659,
       0,     0,  1661,     0,     0,     0,  1672,     0,     0,  1673,
    1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,
    1662,     0,     0,  3333,     0,  1663,  1660,  1667,     0,     0,
    1668,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1669,     0,     0,  1670,  1664,  1665,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1666,     0,     0,     0,     0,     0,     0,
       0,     0,  1661,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1672,
    1662,     0,  1673,  1674,  1675,  1663,  1676,  1677,  1678,  1679,
    1680,  1681,     0,     0,  1667,     0,  3355,  1668,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1664,  1665,
       0,  1669,     0,     0,  1670,  1661,     0,     0,     0,     0,
       0,     0,     0,  1666,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1662,     0,     0,     0,     0,  1663,  1671,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1664,  1665,     0,  1667,     0,     0,  1668,     0,     0,
       0,     0,     0,     0,     0,     0,  1666,     0,     0,     0,
       0,  1669,     0,     0,  1670,     0,     0,     0,     0,     0,
       0,     0,     0,  1647,     0,     0,  1648,     0,     0,     0,
    1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1671,  1667,     0,     0,
    1668,  1656,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1658,     0,     0,  1669,     0,     0,  1670,  1659,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1672,
       0,     0,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,
    1680,  1681,     0,     0,     0,  1660,  3462,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1671,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1647,     0,     0,  1648,     0,     0,
       0,  1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,     0,
       0,     0,     0,     0,     0,     0,  1672,     0,     0,  1673,
    1674,  1675,  1656,  1676,  1677,  1678,  1679,  1680,  1681,  1671,
       0,     0,  1658,  3528,     0,     0,     0,     0,     0,  1659,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1661,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1660,     0,     0,     0,
       0,     0,  1662,     0,     0,     0,     0,  1663,     0,     0,
       0,     0,     0,     0,     0,     0,  1672,     0,     0,  1673,
    1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,
    1664,  1665,     0,  3556,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1666,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     1,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,  1672,
       0,     0,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,
    1680,  1681,     0,     0,  1836,     6,  1667,     0,     0,  1668,
       0,     0,     0,     0,     7,  1661,     0,     0,     0,     0,
       0,     0,     0,  1669,     0,     0,  1670,     0,     8,     0,
       0,     0,     0,  1662,     0,     0,     0,  1647,  1663,    10,
    1648,     0,     0,     0,  1649,  1650,  1651,  1652,  1653,  1654,
    1655,    11,     0,   764,     0,     0,     0,     0,     0,     0,
       0,  1664,  1665,     0,    13,  1656,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1658,  1666,     0,     0,    14,
      15,     0,  1659,     0,     0,     0,     0,     0,     0,     0,
     765,     0,     0,     0,     0,     0,     0,    18,     0,     0,
       0,     0,     0,     0,     0,    19,     0,     0,     0,  1660,
       0,     0,     0,     0,     0,     0,     0,  1667,     0,     0,
    1668,     0,     0,    22,     0,     0,     0,    23,  1671,     0,
       0,     0,     0,     0,  1669,     0,     0,  1670,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -595,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    25,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1661,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1662,     0,     0,     0,
       0,  1663,     0,     0,     0,     0,     0,     0,  1672,  1671,
       0,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,
    1681,     0,     0,  2877,  1664,  1665,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1666,
       0,     0,     0,     0,     0,     0,    26,    27,    28,     0,
       0,     0,     0,     0,    29,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1667,     0,     0,  1668,     0,     0,     0,     0,     0,    31,
       0,     0,     0,     0,     0,     0,     0,  1669,    32,     0,
    1670,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,  1672,
       0,    34,  1673,  1674,  1675,    35,  1676,  1677,  1678,  1679,
    1680,  1681,     0,     0,  3323,    36,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,    38,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,    42,     0,     0,     0,     0,    43,     0,     0,
       0,     0,  1671,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    46,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   567,
       0,     0,  1672,     0,     0,  1673,  1674,  1675,     0,  1676,
    1677,  1678,  1679,  1680,  1681,     0,     0,  3512,   119,   120,
     121,   122,   123,   124,   125,   126,   568,   127,   128,   129,
     569,   570,   571,   572,   573,   574,   575,   576,   577,   131,
     132,   578,   133,   134,   135,   579,   137,   138,   139,   580,
     581,   582,   583,   584,   585,   145,   146,   147,   148,   149,
     150,   586,   587,   151,   152,   153,   154,   588,   589,   157,
     590,   158,   159,   160,   161,   591,   592,   593,   594,   595,
     165,   166,   167,   168,   169,   596,   171,   172,   173,   597,
     174,   175,   176,   177,   178,   179,   598,   599,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   601,   192,
     193,   602,   195,   603,   196,   604,   197,   198,   199,   200,
     201,   202,   605,   606,   203,   204,   205,   206,   607,   608,
     207,   208,   209,   210,   211,   212,   609,   213,   214,   215,
     610,   216,   217,   218,   611,   219,   220,   221,   222,   612,
     224,   225,   226,   227,   228,   229,   613,   614,   231,   615,
     616,   232,   233,   617,   235,   618,   236,   619,   237,   620,
     621,   622,   240,   241,   623,   624,   244,   625,   626,   245,
     627,   628,   629,   248,   249,   630,   250,   251,   252,   253,
     254,   255,   256,   631,   258,   259,   260,   261,   632,   262,
     263,   264,   265,   266,   267,   268,   633,   269,   634,   635,
     272,   273,   274,   275,   276,   636,   637,   638,   639,   640,
     280,   641,   642,   283,   643,   285,   286,   287,   288,   289,
     290,   644,   645,   291,   646,   293,   647,   648,   295,   649,
     296,   297,   298,   299,   300,   301,   302,   650,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   651,
     652,   653,   328,   329,   330,   331,   654,   655,   333,   334,
     656,   336,   657,   658,   338,   659,   340,   341,   342,   660,
     343,   344,   661,   662,   345,   346,   347,   663,   664,   348,
     349,   665,   666,   352,   353,   667,   668,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   669,
     670,   671,   672,   368,   369,   673,   674,   372,   373,   675,
     676,   375,   376,   377,   677,   378,   379,   380,   381,   382,
     383,   678,   384,   385,   386,   387,   388,   679,   390,   391,
     392,   393,   680,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   681,   407,   408,   682,
     410,   411,   412,   683,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   684,   685,   427,
     428,   429,   430,   431,   432,   686,   434,   435,   687,   688,
     437,   438,   689,   440,   690,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   691,   454,   692,
     693,   694,   456,   457,   695,   458,   696,   460,   697,   461,
     462,   463,   464,   465,   698,   466,   699,   700,   701,   702,
     469,   470,   703,   472,   704,   705,   474,   475,   706,   477,
     478,   479,   480,   481,   707,   708,   482,   483,   484,   709,
     485,   486,   487,   488,   710,   489,   490,   491,   492,   493,
     711,   712,   496,   713,   497,   714,   499,   500,   501,   502,
     503,   504,   505,   715,   716,   506,   717,   718,   507,   508,
     509,   510,   511,   512,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   524,   525,   526,   527,   535,
       0,     0,     0,     0,     0,     0,     0,     0,  2120,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,     0,   133,   134,   135,     0,   137,   138,   139,   140,
     141,     0,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,   158,   159,   160,   161,   162,     0,     0,     0,   164,
     165,   166,   167,   168,   169,     0,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,     0,   231,     0,
       0,   232,   233,   234,   235,     0,   236,     0,   237,     0,
       0,     0,   240,   241,   536,     0,   244,     0,     0,   245,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,     0,   271,
     272,   273,   274,   275,   276,   277,   278,     0,   279,     0,
     280,     0,     0,   283,     0,   285,   286,   287,   288,   289,
     290,     0,     0,   291,     0,   293,     0,     0,   295,     0,
     296,   297,   298,   299,   300,   301,   302,   537,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   327,   328,   329,   330,   331,   332,     0,   333,   334,
       0,   336,     0,   337,   338,   339,   340,   341,   342,     0,
     343,   344,     0,     0,   345,   346,   347,     0,     0,   348,
     349,   350,     0,   352,   353,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   370,     0,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,     0,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   538,   454,   455,
       0,     0,   456,   457,     0,   458,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,     0,     0,
     469,   470,   471,   472,   473,     0,   474,   475,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,   495,   496,     0,   497,     0,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   535,
       0,     0,     0,     0,     0,     0,     0,     0,  2773,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,     0,   133,   134,   135,     0,   137,   138,   139,   140,
     141,     0,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,   158,   159,   160,   161,   162,     0,     0,     0,   164,
     165,   166,   167,   168,   169,     0,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,     0,   231,     0,
       0,   232,   233,   234,   235,     0,   236,     0,   237,     0,
       0,     0,   240,   241,   536,     0,   244,     0,     0,   245,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,     0,   271,
     272,   273,   274,   275,   276,   277,   278,     0,   279,     0,
     280,     0,     0,   283,     0,   285,   286,   287,   288,   289,
     290,     0,     0,   291,     0,   293,     0,     0,   295,     0,
     296,   297,   298,   299,   300,   301,   302,   537,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   327,   328,   329,   330,   331,   332,     0,   333,   334,
       0,   336,     0,   337,   338,   339,   340,   341,   342,     0,
     343,   344,     0,     0,   345,   346,   347,     0,     0,   348,
     349,   350,     0,   352,   353,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   370,     0,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,     0,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   538,   454,   455,
       0,     0,   456,   457,     0,   458,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,     0,     0,
     469,   470,   471,   472,   473,     0,   474,   475,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,   495,   496,     0,   497,     0,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   993,
    1378,   835,     0,     0,     0,  1075,     0,     0,  2776,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,   572,     0,     0,     0,     0,   577,   131,
     132,     0,   133,   134,   135,   579,   137,   138,   139,   580,
     581,   582,   583,   584,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,   588,   589,   157,
       0,   158,   159,   160,   161,   591,     0,   593,     0,   595,
     165,   166,   167,   168,   169,   596,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   599,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   601,   192,
     193,   602,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,   612,
     224,   225,   226,   227,   228,   229,   613,  1379,   231,     0,
       0,   232,   233,   617,   235,     0,   236,     0,   237,   620,
       0,   622,   240,   241,   623,   624,   244,     0,     0,   245,
       0,   628,   629,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,   631,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   634,   635,
     272,   273,   274,   275,   276,   636,   637,     0,   639,     0,
     280,   641,   642,   283,   643,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   646,   293,   647,     0,   295,     0,
     296,   297,   298,   299,   300,   301,   302,   650,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   651,
     652,   653,   328,   329,   330,   331,   654,     0,   333,   334,
     656,   336,     0,   658,   338,   659,   340,   341,   342,     0,
     343,   344,  1380,     0,   345,   346,   347,     0,     0,   348,
     349,   665,   666,   352,   353,   667,   668,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   673,   674,   372,   373,   675,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   679,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,   682,
     410,   411,   412,   683,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   685,   427,
     428,   429,   430,   431,   432,   686,   434,   435,     0,   688,
     437,   438,   689,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   691,   454,   692,
       0,     0,   456,   457,     0,   458,   696,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   699,   700,     0,     0,
     469,   470,   703,   472,   704,  1381,   474,   475,   706,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     711,   712,   496,     0,   497,   714,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   524,   525,   526,   527,     0,
       0,  1647,     0,     0,  1648,     0,  1382,  1383,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1656,
       0,     0,     0,     0,  2224,     0,     0,     0,     0,  1658,
    1647,     0,     0,  1648,     0,     0,  1659,  1649,  1650,  1651,
    1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1656,     0,
       0,     0,     0,  1660,     0,     0,     0,     0,  1658,  1647,
       0,     0,  1648,     0,     0,  1659,  1649,  1650,  1651,  1652,
    1653,  1654,  1655,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1656,     0,     0,
       0,     0,  1660,     0,     0,     0,     0,  1658,     0,  2225,
       0,     0,     0,     0,  1659,     0,     0,     0,  1647,     0,
       0,  1648,     0,     0,     0,  1649,  1650,  1651,  1652,  1653,
    1654,  1655,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1660,     0,     0,     0,     0,  1656,     0,     0,     0,
    1939,     0,     0,     0,     0,     0,  1658,     0,     0,     0,
       0,     0,  1661,  1659,     0,     0,  1647,     0,     0,  1648,
       0,     0,     0,  1649,  1650,  1651,  1652,  1653,  1654,  1655,
    1662,     0,     0,     0,     0,  1663,     0,     0,     0,     0,
    1660,  1976,     0,     0,  1656,     0,  1977,     0,     0,     0,
       0,  1661,     0,     0,  1658,     0,     0,     0,  1664,  1665,
       0,  1659,     0,     0,     0,     0,     0,     0,     0,  1662,
       0,     0,     0,  1666,  1663,     0,     0,     0,     0,  3634,
       0,     0,     0,     0,     0,     0,     0,     0,  1660,     0,
    1661,     0,     0,     0,     0,     0,     0,  1664,  1665,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1662,     0,
       0,     0,  1666,  1663,  1667,     0,     0,  1668,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1669,     0,     0,  1670,     0,  1664,  1665,     0,  1661,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1666,     0,  1667,     0,     0,  1668,  1662,     0,     0,
       0,     0,  1663,     0,     0,     0,     0,     0,     0,     0,
    1669,     0,     0,  1670,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1664,  1665,  1661,     0,     0,
       0,     0,  1667,     0,     0,  1668,     0,     0,     0,     0,
    1666,     0,     0,     0,     0,  1662,     0,     0,     0,  1669,
    1663,     0,  1670,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1664,  1665,     0,  1671,     0,     0,     0,
       0,  1667,     0,  3635,  1668,     0,     0,     0,  1666,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1669,     0,
       0,  1670,     0,     0,     0,     0,     0,     0,     0,     0,
    1647,     0,     0,  1648,     0,  1671,     0,  1649,  1650,  1651,
    1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,  1667,
       0,     0,  1668,     0,     0,     0,     0,     0,  1656,     0,
       0,  2228,  1982,     0,     0,     0,  1669,     0,  1658,  1670,
       0,     0,     0,     0,  1671,  1659,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1946,     0,     0,     0,     0,     0,
       0,     0,  1660,     0,     0,     0,  1672,     0,     0,  1673,
    1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,
       0,     0,     0,  1671,     0,     0,     0,     0,     0,     0,
    1647,     0,     0,  1648,     0,     0,     0,  1649,  1650,  1651,
    1652,  1653,  1654,  1655,     0,  1672,     0,     0,  1673,  1674,
    1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,  1656,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1658,     0,
       0,  1671,     0,     0,     0,  1659,     0,     0,     0,     0,
       0,     0,     0,     0,  1672,     0,     0,  1673,  1674,  1675,
       0,  1676,  1677,  1678,  1679,  1680,  1681,     0,     0,     0,
       0,  1661,  1660,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1662,
       0,     0,     0,     0,  1663,     0,     0,     0,     0,     0,
       0,     0,     0,  1672,     0,     0,  1673,  1674,  1675,     0,
    1676,  1677,  1678,  1679,  1680,  1681,     0,  1664,  1665,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1666,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1672,     0,     0,  1673,  1674,  1675,     0,  1676,  1677,
    1678,  1679,  1680,  1681,     0,     0,  1987,     0,     0,     0,
       0,  1661,     0,  1667,  1647,     0,  1668,  1648,     0,     0,
       0,  1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,  1662,
    1669,     0,     0,  1670,  1663,     0,     0,     0,     0,     0,
       0,     0,  1656,     0,     0,     0,  1989,     0,     0,     0,
       0,     0,  1658,  1647,     0,     0,  1648,  1664,  1665,  1659,
    1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,     0,     0,
       0,     0,  1666,     0,     0,     0,     0,     0,     0,     0,
       0,  1656,     0,     0,     0,     0,  1660,     0,     0,     0,
       0,  1658,     0,     0,     0,     0,     0,     0,  1659,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1667,     0,     0,  1668,     0,     0,     0,
       0,     0,     0,     0,     0,  1660,     0,     0,     0,     0,
    1669,     0,     0,  1670,     0,  1671,     0,     0,     0,     0,
       0,  1647,     0,     0,  1648,     0,     0,     0,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1656,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1658,
       0,     0,     0,     0,     0,  1661,  1659,     0,     0,  1647,
       0,     0,  1648,     0,     0,     0,  1649,  1650,  1651,  1652,
    1653,  1654,  1655,  1662,     0,     0,     0,     0,  1663,     0,
       0,     0,     0,  1660,  2113,     0,     0,  1656,     0,     0,
       0,  2853,     0,     0,  1661,     0,     0,  1658,     0,     0,
       0,  1664,  1665,     0,  1659,  1671,     0,     0,     0,     0,
       0,     0,  1662,     0,     0,  1672,  1666,  1663,  1673,  1674,
    1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,     0,
       0,  1660,     0,     0,     0,     0,     0,     0,     0,     0,
    1664,  1665,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1666,     0,  1667,     0,     0,
    1668,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1669,     0,     0,  1670,     0,     0,
       0,     0,  1661,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1667,     0,     0,  1668,
    1662,     0,     0,     0,     0,  1663,     0,     0,     0,     0,
       0,     0,     0,  1669,     0,  1672,  1670,     0,  1673,  1674,
    1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,  1664,  1665,
    1661,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1666,     0,     0,     0,     0,  1662,     0,
       0,     0,     0,  1663,     0,     0,     0,     0,  1647,     0,
       0,  1648,     0,     0,     0,  1649,  1650,  1651,  1652,  1653,
    1654,  1655,     0,     0,     0,     0,  1664,  1665,     0,  1671,
       0,     0,     0,     0,  1667,     0,  1656,  1668,     0,     0,
       0,  1666,     0,     0,     0,     0,  1658,     0,     0,     0,
       0,  1669,     0,  1659,  1670,     0,     0,     0,     0,     0,
       0,     0,  1647,     0,     0,  1648,     0,     0,  1671,  1649,
    1650,  1651,  1652,  1653,  1654,  1655,     0,     0,     0,     0,
    1660,     0,  1667,     0,     0,  1668,     0,     0,     0,     0,
    1656,     0,     0,     0,     0,     0,     0,     0,     0,  1669,
    1658,     0,  1670,     0,     0,     0,     0,  1659,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1660,     0,     0,     0,     0,  1672,
       0,     0,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,
    1680,  1681,     0,     0,     0,     0,  1671,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1672,  1661,
       0,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,
    1681,  2839,     0,     0,     0,     0,     0,  1662,     0,     0,
    1647,     0,  1663,  1648,  1671,     0,     0,  1649,  1650,  1651,
    1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1664,  1665,     0,  1656,     0,
       0,     0,     0,  1661,     0,     0,     0,     0,  1658,     0,
    1666,     0,     0,     0,     0,  1659,     0,     0,     0,     0,
       0,  1662,     0,     0,     0,     0,  1663,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1672,     0,     0,  1673,
    1674,  1675,  1660,  1676,  1677,  1678,  1679,  1680,  1681,  1846,
    1665,  1667,     0,     0,  1668,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1666,     0,     0,     0,  1669,     0,
       0,  1670,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1672,     0,     0,  1673,  1674,  1675,
       0,  1676,  1677,  1678,  1679,  1680,  1681,     0,     0,     0,
       0,     0,     0,     0,     0,  1667,     0,  1647,  1668,     0,
    1648,     0,     0,     0,  1649,  1650,     0,     0,  1653,  1654,
    1655,     0,  1669,     0,     0,  1670,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1656,     0,     0,     0,     0,
       0,  1661,     0,     0,     0,  1658,     0,     0,     0,     0,
       0,     0,  1659,     0,     0,     0,     0,     0,     0,  1662,
       0,     0,     0,     0,  1663,     0,     0,     0,     0,     0,
       0,     0,     0,  1671,     0,     0,     0,     0,     0,  1660,
       0,     0,     0,     0,     0,     0,     0,  1664,  1665,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1666,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1671,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1667,     0,     0,  1668,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1669,     0,     0,  1670,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1661,     0,
       0,     0,     0,  1672,     0,     0,  1673,  1674,  1675,     0,
    1676,  1677,  1678,  1679,  1680,  1681,  1662,     0,     0,     0,
       0,  1663,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1664,  1665,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1672,     0,  1666,
    1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1671,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1667,     0,     0,  1668,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1669,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1672,     0,     0,  1673,  1674,
    1675,     0,  1676,  1677,  1678,  1679,  2245,  1681,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1671,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   567,     0,  2136,     0,
       0,     0,  1672,     0,     0,  1673,  1674,  1675,     0,  1676,
    1677,  1678,  1679,  1680,  1681,   119,   120,   121,   122,   123,
     124,   125,   126,   568,   127,   128,   129,   569,   570,   571,
     572,   573,   574,   575,   576,   577,   131,   132,   578,   133,
     134,   135,   579,   137,   138,   139,   580,   581,   582,   583,
     584,   585,   145,   146,   147,   148,   149,   150,   586,   587,
     151,   152,   153,   154,   588,   589,   157,   590,   158,   159,
     160,   161,   591,   592,   593,   594,   595,   165,   166,   167,
     168,   169,   596,   171,   172,   173,   597,   174,   175,   176,
     177,   178,   179,   598,   599,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   601,   192,   193,   602,   195,
     603,   196,   604,   197,   198,   199,   200,   201,   202,   605,
     606,   203,   204,   205,   206,   607,   608,   207,   208,   209,
     210,   211,   212,   609,   213,   214,   215,   610,   216,   217,
     218,   611,   219,   220,   221,   222,   612,   224,   225,   226,
     227,   228,   229,   613,   614,   231,   615,   616,   232,   233,
     617,   235,   618,   236,   619,   237,   620,   621,   622,   240,
     241,   623,   624,   244,   625,   626,   245,   627,   628,   629,
     248,   249,   630,   250,   251,   252,   253,   254,   255,   256,
     631,   258,   259,   260,   261,   632,   262,   263,   264,   265,
     266,   267,   268,   633,   269,   634,   635,   272,   273,   274,
     275,   276,   636,   637,   638,   639,   640,   280,   641,   642,
     283,   643,   285,   286,   287,   288,   289,   290,   644,   645,
     291,   646,   293,   647,   648,   295,   649,   296,   297,   298,
     299,   300,   301,   302,   650,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   651,   652,   653,   328,
     329,   330,   331,   654,   655,   333,   334,   656,   336,   657,
     658,   338,   659,   340,   341,   342,   660,   343,   344,   661,
     662,   345,   346,   347,   663,   664,   348,   349,   665,   666,
     352,   353,   667,   668,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   669,   670,   671,   672,
     368,   369,   673,   674,   372,   373,   675,   676,   375,   376,
     377,   677,   378,   379,   380,   381,   382,   383,   678,   384,
     385,   386,   387,   388,   679,   390,   391,   392,   393,   680,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   681,   407,   408,   682,   410,   411,   412,
     683,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   684,   685,   427,   428,   429,   430,
     431,   432,   686,   434,   435,   687,   688,   437,   438,   689,
     440,   690,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   691,   454,   692,   693,   694,   456,
     457,   695,   458,   696,   460,   697,   461,   462,   463,   464,
     465,   698,   466,   699,   700,   701,   702,   469,   470,   703,
     472,   704,   705,   474,   475,   706,   477,   478,   479,   480,
     481,   707,   708,   482,   483,   484,   709,   485,   486,   487,
     488,   710,   489,   490,   491,   492,   493,   711,   712,   496,
     713,   497,   714,   499,   500,   501,   502,   503,   504,   505,
     715,   716,   506,   717,   718,   507,   508,   509,   510,   511,
     512,   719,   720,   721,   722,   723,   724,   725,   726,   727,
     728,   729,   524,   525,   526,   527,   567,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,   568,   127,   128,   129,   569,   570,   571,
     572,   573,   574,   575,   576,   577,   131,   132,   578,   133,
     134,   135,   579,   137,   138,   139,   580,   581,   582,   583,
     584,   585,   145,   146,   147,   148,   149,   150,   586,   587,
     151,   152,   153,   154,   588,   589,   157,   590,   158,   159,
     160,   161,   591,   592,   593,   594,   595,   165,   166,   167,
     168,   169,   596,   171,   172,   173,   597,   174,   175,   176,
     177,   178,   179,   598,   599,   181,   182,   183,   184,   185,
     186,   600,   188,   189,   190,   601,   192,   193,   602,   195,
     603,   196,   604,   197,   198,   199,   200,   201,   202,   605,
     606,   203,   204,   205,   206,   607,   608,   207,   208,   209,
     210,   211,   212,   609,   213,   214,   215,   610,   216,   217,
     218,   611,   219,   220,   221,   222,   612,   224,   225,   226,
     227,   228,   229,   613,   614,   231,   615,   616,   232,   233,
     617,   235,   618,   236,   619,   237,   620,   621,   622,   240,
     241,   623,   624,   244,   625,   626,   245,   627,   628,   629,
     248,   249,   630,   250,   251,   252,   253,   254,   255,   256,
     631,   258,   259,   260,   261,   632,   262,   263,   264,   265,
     266,   267,   268,   633,   269,   634,   635,   272,   273,   274,
     275,   276,   636,   637,   638,   639,   640,   280,   641,   642,
     283,   643,   285,   286,   287,   288,   289,   290,   644,   645,
     291,   646,   293,   647,   648,   295,   649,   296,   297,   298,
     299,   300,   301,   302,   650,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   651,   652,   653,   328,
     329,   330,   331,   654,   655,   333,   334,   656,   336,   657,
     658,   338,   659,   340,   341,   342,   660,   343,   344,   661,
     662,   345,   346,   347,   663,   664,   348,   349,   665,   666,
     352,   353,   667,   668,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   669,   670,   671,   672,
     368,   369,   673,   674,   372,   373,   675,   676,   375,   376,
     377,   677,   378,   379,   380,   381,   382,   383,   678,   384,
     385,   386,   387,   388,   679,   390,   391,   392,   393,   680,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   681,   407,   408,   682,   410,   411,   412,
     683,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   684,   685,   427,   428,   429,   430,
     431,   432,   686,   434,   435,   687,   688,   437,   438,   689,
     440,   690,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   691,   454,   692,   693,   694,   456,
     457,   695,   458,   696,   460,   697,   461,   462,   463,   464,
     465,   698,   466,   699,   700,   701,   702,   469,   470,   703,
     472,   704,   705,   474,   475,   706,   477,   478,   479,   480,
     481,   707,   708,   482,   483,   484,   709,   485,   486,   487,
     488,   710,   489,   490,   491,   492,   493,   711,   712,   496,
     713,   497,   714,   499,   500,   501,   502,   503,   504,   505,
     715,   716,   506,   717,   718,   507,   508,   509,   510,   511,
     512,   719,   720,   721,   722,   723,   724,   725,   726,   727,
     728,   729,   524,   525,   526,   527,   567,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,   568,   127,   128,   129,   569,   570,   571,
     572,   573,   574,   575,   576,   577,   131,   132,   578,   133,
     134,   135,   579,   137,   138,   139,   580,   581,   582,   583,
     584,   585,   145,   146,   147,   148,   149,   150,   586,   587,
     151,   152,   153,   154,   588,   589,   157,   590,   158,   159,
     160,   161,   591,   592,   593,   594,   595,   165,   166,   167,
     168,   169,   596,   171,   172,   173,   597,   174,   175,   176,
     177,   178,   179,   598,   599,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   601,   192,   193,   602,   195,
     603,   196,   604,   197,   198,   199,   200,   201,   202,   605,
     606,   203,   204,   205,   206,   607,   608,   207,   208,   209,
     210,   211,   212,   609,   213,   214,   215,   610,   216,   217,
     218,   611,   219,   220,   221,   222,   612,   224,   225,   226,
     227,   228,   229,   613,   614,   231,   615,   616,   232,   233,
     617,   235,   618,   236,   619,   237,   620,   621,   622,   240,
     241,   623,   624,   244,   625,   626,   245,   627,   628,   629,
     248,   249,   630,   250,   251,   252,   253,   254,   969,   256,
     631,   258,   259,   260,   261,   632,   262,   263,   264,   265,
     266,   267,   268,   633,   269,   634,   635,   272,   273,   274,
     275,   276,   636,   637,   638,   639,   640,   280,   641,   642,
     283,   643,   285,   286,   287,   288,   289,   290,   644,   645,
     291,   646,   293,   647,   648,   295,   649,   296,   297,   298,
     299,   300,   301,   302,   650,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   651,   652,   653,   328,
     329,   330,   331,   654,   655,   333,   334,   656,   336,   657,
     658,   338,   659,   340,   341,   342,   660,   343,   344,   661,
     662,   345,   346,   347,   663,   664,   348,   349,   665,   666,
     352,   353,   667,   668,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   669,   670,   671,   672,
     368,   369,   673,   674,   372,   373,   675,   676,   375,   376,
     377,   677,   378,   379,   380,   381,   382,   383,   678,   384,
     385,   386,   387,   388,   679,   390,   391,   392,   393,   680,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   681,   407,   408,   682,   410,   411,   412,
     683,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   684,   685,   427,   428,   429,   430,
     431,   432,   686,   434,   435,   687,   688,   437,   438,   689,
     440,   690,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   691,   454,   692,   693,   694,   456,
     457,   695,   458,   696,   460,   697,   461,   462,   463,   464,
     465,   698,   466,   699,   700,   701,   702,   469,   470,   703,
     472,   704,   705,   474,   475,   706,   477,   478,   479,   480,
     481,   707,   708,   482,   483,   484,   709,   485,   486,   487,
     488,   710,   489,   490,   491,   492,   493,   711,   712,   496,
     713,   497,   714,   499,   500,   501,   502,   503,   504,   505,
     715,   716,   506,   717,   718,   507,   508,   509,   510,   511,
     512,   719,   720,   721,   722,   723,   724,   725,   726,   727,
     728,   729,   524,   525,   526,   527,   567,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,   568,   127,   128,   129,   569,   570,   571,
     572,   573,   574,   575,   576,   577,   131,   132,   578,   133,
     134,   135,   579,   137,   138,   139,   580,   581,   582,   583,
     584,   585,   145,   146,   147,   148,   149,   150,   586,   587,
     151,   152,   153,   154,   588,   589,   157,   590,   158,   159,
     160,   161,   591,   592,   593,   594,   595,   165,   166,   167,
     168,   169,   596,   171,   172,   173,   597,   174,   175,   176,
     177,   178,   179,   598,   599,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   601,   192,   193,   602,   195,
     603,   196,   604,   197,   198,   199,   200,   201,   202,   605,
     606,   203,   204,   205,   206,   607,   608,   207,   208,   209,
     210,   211,   212,   609,   213,   214,   215,   610,   216,   217,
     218,   611,   219,   220,   221,   222,   612,   224,   225,   226,
     227,   228,   229,   613,   614,   231,   615,   616,   232,   233,
     617,   235,   618,   236,   619,   237,   620,   621,   622,   240,
     241,   623,   624,   244,   625,   626,   245,   627,   628,   629,
     248,   249,   630,   250,   251,   252,   253,   254,   255,   256,
     631,   258,   259,   260,   261,   632,   262,   263,   264,   265,
     266,   267,   268,   633,   269,   634,   635,   272,   273,   274,
     275,   276,   636,   637,   638,   639,   640,   280,   641,   642,
     283,   643,   285,   286,   287,   288,   289,   290,   644,   645,
     291,   646,   293,   647,   648,   295,   649,   296,   297,   298,
     299,   300,   301,   302,   650,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   651,   652,   653,   328,
     329,   330,   331,   654,   655,   333,   334,   656,   336,   657,
     658,   338,   659,   340,   341,   342,   660,   343,   344,   661,
     662,   345,   346,   347,   663,   664,   348,   349,   665,   666,
     352,   353,   667,   668,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   669,   670,   671,   672,
     368,   369,   673,   674,   372,   373,   675,   676,   375,   376,
     377,   677,   378,   379,   380,   381,   382,   383,   678,   384,
     385,   386,   387,   388,   679,   390,   391,   392,   393,   680,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   681,   407,   408,   682,   410,   411,   412,
     683,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   684,   685,   427,   428,   429,   430,
     431,   432,   686,   434,   435,   687,   688,   437,   438,   689,
     440,   690,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   691,   454,   692,   693,   694,   456,
     457,   695,   458,   696,   460,   697,   461,   462,   463,   464,
     465,   698,   466,   699,   700,   701,   702,   469,   470,   703,
     472,   704,   705,   474,   475,   706,   477,   478,   479,   480,
     481,   707,   708,   482,   483,   484,   709,   485,   486,   487,
     488,   710,   489,   490,   491,   492,   493,   711,   712,   496,
     713,   497,   714,   499,   500,   501,   502,   503,   504,   505,
     715,   716,   506,   717,   718,   507,   508,   509,   510,   511,
     512,   719,   720,   721,   722,   723,   724,   725,   726,   727,
     728,   729,   524,   525,   526,   527,   567,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,  2290,
     124,   125,   126,   568,   127,   128,   129,   569,   570,   571,
     572,   573,   574,   575,   576,   577,   131,   132,   578,   133,
     134,   135,   579,   137,   138,   139,   580,   581,   582,   583,
     584,   585,   145,   146,   147,   148,   149,   150,   586,   587,
     151,   152,   153,   154,   588,   589,   157,   590,   158,   159,
     160,   161,   591,   592,   593,   594,   595,   165,   166,   167,
     168,   169,   596,   171,   172,   173,   597,   174,   175,   176,
     177,   178,   179,   598,   599,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   601,   192,   193,   602,   195,
     603,   196,   604,   197,   198,   199,   200,   201,   202,   605,
     606,   203,   204,   205,   206,   607,   608,   207,   208,   209,
    2291,   211,   212,   609,   213,   214,   215,   610,   216,   217,
     218,   611,   219,   220,   221,   222,   612,   224,   225,   226,
     227,   228,   229,   613,   614,   231,   615,   616,   232,   233,
     617,   235,   618,   236,   619,   237,   620,   621,   622,   240,
     241,   623,   624,   244,   625,   626,   245,   627,   628,   629,
     248,   249,   630,   250,   251,   252,   253,   254,   255,   256,
     631,   258,   259,   260,   261,   632,   262,   263,   264,   265,
     266,   267,   268,   633,   269,   634,   635,   272,   273,   274,
     275,   276,   636,   637,   638,   639,   640,   280,   641,   642,
     283,   643,   285,   286,   287,   288,   289,   290,   644,   645,
     291,   646,   293,   647,   648,   295,   649,   296,   297,   298,
     299,   300,   301,   302,   650,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   651,   652,   653,   328,
     329,   330,   331,   654,   655,   333,   334,   656,   336,   657,
     658,   338,   659,   340,   341,   342,   660,   343,   344,   661,
     662,   345,   346,   347,   663,   664,   348,   349,   665,   666,
     352,   353,   667,   668,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   669,   670,   671,   672,
     368,   369,   673,   674,   372,   373,   675,   676,   375,   376,
     377,   677,   378,   379,   380,   381,   382,   383,   678,   384,
     385,   386,   387,   388,   679,   390,   391,   392,   393,   680,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   681,   407,   408,   682,   410,   411,   412,
     683,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   684,   685,   427,   428,   429,   430,
     431,  2292,   686,   434,   435,   687,   688,   437,   438,   689,
     440,   690,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   691,   454,   692,   693,   694,   456,
     457,   695,   458,   696,   460,   697,   461,   462,   463,   464,
     465,   698,   466,   699,   700,   701,   702,   469,   470,   703,
     472,   704,   705,   474,   475,   706,   477,   478,   479,   480,
     481,   707,   708,   482,   483,   484,   709,   485,   486,   487,
     488,   710,   489,   490,   491,   492,   493,   711,   712,   496,
     713,   497,   714,   499,   500,   501,   502,   503,   504,   505,
     715,   716,   506,   717,   718,   507,   508,   509,   510,   511,
     512,   719,   720,   721,   722,   723,   724,   725,   726,   727,
     728,   729,   524,   525,   526,   527,   993,     0,   835,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
     572,     0,     0,     0,     0,   577,   131,   132,     0,   133,
     134,   135,   579,   137,   138,   139,   580,   581,   582,   583,
     584,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   588,   589,   157,     0,   158,   159,
     160,   161,   591,     0,   593,     0,   595,   165,   166,   167,
     168,   169,   596,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,   599,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   601,   192,   193,   602,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   612,   224,   225,   226,
     227,   228,   229,   613,  1379,   231,     0,     0,   232,   233,
     617,   235,     0,   236,     0,   237,   620,     0,   622,   240,
     241,   623,   624,   244,     0,     0,   245,     0,   628,   629,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
     631,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,   634,   635,   272,   273,   274,
     275,   276,   636,   637,     0,   639,     0,   280,   641,   642,
     283,   643,   285,   286,   287,   288,   289,   290,     0,     0,
     291,   646,   293,   647,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   650,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   651,   652,   653,   328,
     329,   330,   331,   654,     0,   333,   334,   656,   336,     0,
     658,   338,   659,   340,   341,   342,     0,   343,   344,  1380,
       0,   345,   346,   347,     0,     0,   348,   349,   665,   666,
     352,   353,   667,   668,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   673,   674,   372,   373,   675,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   679,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,   682,   410,   411,   412,
     683,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   685,   427,   428,   429,   430,
     431,   432,   686,   434,   435,     0,   688,   437,   438,   689,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   691,   454,   692,     0,     0,   456,
     457,     0,   458,   696,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   699,   700,     0,     0,   469,   470,   703,
     472,   704,  1381,   474,   475,   706,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   711,   712,   496,
       0,   497,   714,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   719,   720,   721,   722,   723,   724,   725,   726,   727,
     728,   729,   524,   525,   526,   527,   993,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     3,     4,     0,
     572,     0,     0,     0,     0,   577,   131,   132,     0,   133,
     134,   135,   579,   137,   138,   139,   580,   581,   582,   583,
     584,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   588,   589,   157,     0,   158,   159,
     160,   161,   591,     0,   593,     0,   595,   165,   166,   167,
     168,   169,   596,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,   599,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   601,   192,   193,   602,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   612,   224,   225,   226,
     227,   228,   229,   613,     0,   231,     0,     0,   232,   233,
     617,   235,     0,   236,     0,   237,   620,     0,   622,   240,
     241,   623,   624,   244,     0,     0,   245,     0,   628,   629,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
     631,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,   634,   635,   272,   273,   274,
     275,   276,   636,   637,     0,   639,     0,   280,   641,   642,
     283,   643,   285,   286,   287,   288,   289,   290,     0,     0,
     291,   646,   293,   647,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   650,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   651,   652,   653,   328,
     329,   330,   331,   654,     0,   333,   334,   656,   336,     0,
     658,   338,   659,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   665,   666,
     352,   353,   667,   668,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   673,   674,   372,   373,   675,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   679,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,   682,   410,   411,   412,
     683,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   685,   427,   428,   429,   430,
     431,   432,   686,   434,   435,     0,   688,   437,   438,   689,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   691,   454,   692,     0,     0,   456,
     457,     0,   458,   696,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   699,   700,     0,     0,   469,   470,   703,
     472,   704,     0,   474,   475,   706,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   711,   712,   496,
       0,   497,   714,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   719,   720,   721,   722,   723,   724,   725,   726,   727,
     728,   729,   524,   525,   526,   527,   118,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,   132,     0,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,   804,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   805,     0,   806,     0,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   807,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,   238,     0,   239,   240,
     241,   242,   243,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,     0,     0,
     291,   292,   293,   294,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,   333,   334,   335,   336,     0,
     809,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,   351,
     352,   353,   354,   811,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   812,   371,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,   436,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   815,     0,     0,   456,
     457,     0,   458,   459,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   816,
     472,   817,     0,   474,   475,   818,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   118,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,   132,     0,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,   238,     0,   239,   240,
     241,   242,   243,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,     0,     0,
     291,   292,   293,   294,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,   333,   334,   335,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,   436,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,
     457,     0,   458,   459,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,  1779,   158,   159,
     160,   161,   162,     0,     0,  1780,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,  1781,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,  1782,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,  1783,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,  1784,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,  1785,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,  1779,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,  1781,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,  1782,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,  2373,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,  1784,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,  1785,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     3,     4,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,   562,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   563,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
     810,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   918,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
     810,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,   967,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,  1199,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
     810,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,  1993,     0,     0,
       0,     0,  1994,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,  2001,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,  2002,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,  2003,   458,     0,   460,     0,   461,  2004,   463,  2005,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,  2006,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   835,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,   841,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   842,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   843,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     844,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   845,   468,     0,     0,   846,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   847,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   880,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   913,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   916,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   920,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   951,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   983,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   986,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,  1029,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,  1052,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,   841,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   845,   468,     0,     0,   846,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,  1336,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,  1338,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,  1341,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,  1343,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,  1892,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,  2286,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,  1511,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
    1512,     0,     0,  -881,     0,  1513,   131,   132,     0,   133,
     134,   135,  1514,   137,   138,   139,     0,  1515,  1516,  1517,
    1518,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,  1519,  1520,   157,     0,   158,   159,
     160,   161,     0,     0,  1521,     0,  1522,   165,   166,   167,
     168,   169,  1523,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,  1524,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,  1525,   192,   193,  1526,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,  1088,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,     0,   224,   225,   226,
     227,   228,   229,     0,     0,   231,     0,     0,   232,   233,
    1527,   235,     0,   236,     0,   237,  1528,     0,  1529,   240,
     241,  -881,  1530,   244,     0,     0,   245,     0,     0,     0,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
    1531,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,  1532,     0,   272,   273,   274,
     275,   276,  1533,  1534,     0,  1535,     0,   280,  1536,  1537,
     283,  1538,   285,   286,   287,   288,   289,   290,     0,     0,
     291,  1539,   293,  1540,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,  1541,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,  1542,  1543,  1544,   328,
     329,   330,   331,     0,     0,   333,   334,  1545,   336,     0,
       0,   338,  1546,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,     0,  1547,
     352,   353,  1548,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,     0,  1549,   372,   373,     0,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,  1550,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,  1551,   410,   411,   412,
    1552,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,  1553,   427,   428,   429,   430,
     431,   432,  1554,   434,   435,     0,  1555,   437,   438,  1556,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,  1557,   454,     0,     0,     0,   456,
     457,     0,   458,  1558,   460,     0,   461,   462,   463,   464,
     465,     0,   466,  1559,  1560,     0,     0,   469,   470,     0,
     472,     0,     0,   474,   475,  1561,   477,   478,   479,   480,
     481,  1562,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,     0,  1563,   496,
       0,   497,  1564,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   535,     0,   561,     0,     0,     0,     0,     0,     0,
       0,     0,   524,   525,   526,   527,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   244,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,  3056,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   244,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   857,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,   296,   858,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     859,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   860,   432,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   861,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   862,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   244,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   979,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   244,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     859,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   861,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   244,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,  1346,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   244,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,  1357,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,  1707,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   244,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,     0,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   244,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,  1897,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   244,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,  2273,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   244,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,  2288,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,  1511,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,  1512,     0,     0,     0,     0,
    1513,   131,   132,     0,   133,   134,   135,  1514,   137,   138,
     139,     0,  1515,  1516,  1517,  1518,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,  1519,
    1520,   157,     0,   158,   159,   160,   161,     0,     0,  1521,
       0,  1522,   165,   166,   167,   168,   169,  1523,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,  1524,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1525,   192,   193,  1526,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1088,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,     0,   224,   225,   226,   227,   228,   229,     0,     0,
     231,     0,     0,   232,   233,  1527,   235,     0,   236,     0,
     237,  1528,     0,  1529,   240,   241,     0,  1530,   244,     0,
       0,   245,     0,     0,     0,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,  1531,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
    1532,     0,   272,   273,   274,   275,   276,  1533,  1534,     0,
    1535,     0,   280,  1536,  1537,   283,  1538,   285,   286,   287,
     288,   289,   290,     0,     0,   291,  1539,   293,  1540,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,  1541,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,  1542,  1543,  1544,   328,   329,   330,   331,     0,     0,
     333,   334,  1545,   336,     0,     0,   338,  1546,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,     0,  1547,   352,   353,  1548,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,     0,  1549,   372,
     373,     0,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,  1550,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,  1551,   410,   411,   412,  1552,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
    1553,   427,   428,   429,   430,   431,   432,  1554,   434,   435,
       0,  1555,   437,   438,  1556,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,  1557,
     454,     0,     0,     0,   456,   457,     0,   458,  1558,   460,
       0,   461,   462,   463,   464,   465,     0,   466,  1559,  1560,
       0,     0,   469,   470,     0,   472,     0,     0,   474,   475,
    1561,   477,   478,   479,   480,   481,  1562,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,     0,  1563,   496,     0,   497,  1564,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,  1511,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   524,   525,   526,
     527,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
    1512,     0,     0,     0,     0,  1513,   131,   132,     0,   133,
     134,   135,  1514,   137,   138,   139,     0,  1515,  1516,  1517,
    1518,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,  1519,  1520,   157,     0,   158,   159,
     160,   161,     0,     0,  1521,     0,  1522,   165,   166,   167,
     168,   169,  1523,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,  1524,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,  1525,   192,   193,  1526,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,  1088,
     210,   211,   212,     0,   213,   214,   215,     0,  1871,   217,
     218,     0,   219,   220,   221,   222,     0,   224,   225,   226,
     227,   228,   229,     0,     0,   231,     0,     0,   232,   233,
    1527,   235,     0,   236,     0,   237,  1528,     0,  1529,   240,
     241,     0,  1530,   244,     0,     0,   245,     0,     0,     0,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
    1531,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,  1532,     0,   272,   273,   274,
     275,   276,  1533,  1534,     0,  1535,     0,   280,  1536,  1537,
     283,  1538,   285,   286,   287,   288,   289,   290,     0,     0,
     291,  1539,   293,  1540,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,  1541,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,  1542,  1543,  1544,   328,
     329,   330,   331,     0,     0,   333,   334,  1545,   336,     0,
       0,   338,  1546,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,     0,  1547,
     352,   353,  1548,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,     0,  1549,   372,   373,     0,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,  1550,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,  1551,   410,   411,   412,
    1552,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,  1553,   427,   428,   429,   430,
     431,   432,  1554,   434,   435,     0,  1555,   437,   438,  1556,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,  1557,   454,     0,     0,     0,   456,
     457,     0,   458,  1558,   460,     0,   461,   462,   463,   464,
     465,     0,   466,  1559,  1560,     0,     0,   469,   470,     0,
     472,     0,     0,   474,   475,  1561,   477,   478,   479,   480,
     481,  1562,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,     0,  1563,   496,
       0,   497,  1564,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,  3236,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   524,   525,   526,   527,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,  2978,     0,     0,     0,     0,
    2979,   131,   132,     0,   133,   134,   135,  2980,   137,   138,
     139,     0,  1515,  2981,  1517,  1518,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,  1519,
    1520,   157,     0,   158,   159,   160,   161,     0,     0,  2982,
       0,  2983,   165,   166,   167,   168,   169,  2984,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,  2985,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1525,   192,   193,  1526,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1088,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,     0,   224,   225,   226,   227,   228,   229,     0,     0,
     231,     0,     0,   232,   233,  1527,   235,     0,   236,     0,
     237,  2986,     0,  2987,   240,   241,  2988,  2989,   244,     0,
       0,   245,     0,     0,     0,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,  2990,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
    2991,     0,   272,   273,   274,   275,   276,  1533,  1534,     0,
    1535,     0,   280,  2992,  2993,   283,  2994,   285,   286,   287,
     288,   289,   290,     0,     0,   291,  2995,   293,  2996,     0,
     295,     0,   296,   297,   298,   299,   300,   301,   302,  3237,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,  1542,  2998,  1544,   328,   329,   330,   331,     0,     0,
     333,   334,  3000,   336,     0,     0,   338,  1546,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,     0,  3002,   352,   353,  3003,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,     0,  3004,   372,
     373,     0,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,  1550,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,  3005,   410,   411,   412,     0,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
    3006,   427,   428,   429,   430,   431,   432,     0,   434,   435,
       0,  3008,   437,   438,  1556,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,  3238,
     454,     0,     0,     0,   456,   457,     0,   458,  3010,   460,
       0,   461,   462,   463,   464,   465,     0,   466,  1559,  1560,
       0,     0,   469,   470,     0,   472,     0,     0,   474,   475,
    3011,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,     0,  1563,   496,     0,   497,  3013,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   524,   525,   526,
     527,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
       0,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
       0,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,     0,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,  1806,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
    1512,     0,     0,     0,     0,  1513,   131,   132,     0,   133,
     134,   135,  1514,   137,   138,   139,     0,  1515,  1516,  1517,
    1518,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,  1519,  1520,   157,     0,   158,   159,
     160,   161,     0,     0,  1521,     0,  1522,   165,   166,   167,
     168,   169,  1523,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,  1524,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,  1525,   192,   193,  1526,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,  1088,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,     0,   224,   225,   226,
     227,   228,   229,     0,     0,   231,     0,     0,   232,   233,
    1527,   235,     0,   236,     0,   237,  1528,     0,  1529,   240,
     241,     0,  1530,   244,     0,     0,   245,     0,     0,     0,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
    1531,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,  1532,     0,   272,   273,   274,
     275,   276,  1533,  1534,     0,  1535,     0,   280,  1536,  1537,
     283,  1538,   285,   286,   287,   288,   289,   290,     0,     0,
     291,  1539,   293,  1540,     0,   295,     0,   296,   297,   298,
     299,   300,   301,   302,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,  1542,  1543,  1544,   328,
     329,   330,   331,     0,     0,   333,   334,  1545,   336,     0,
       0,   338,  1546,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,     0,  1547,
     352,   353,  1548,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,     0,  1549,   372,   373,     0,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,  1550,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,  1551,   410,   411,   412,
       0,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,  1553,   427,   428,   429,   430,
     431,   432,     0,   434,   435,     0,  1555,   437,   438,  1556,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,     0,   454,     0,     0,     0,   456,
     457,     0,   458,  1558,   460,     0,   461,   462,   463,   464,
     465,     0,   466,  1559,  1560,     0,     0,   469,   470,     0,
     472,     0,     0,   474,   475,  1561,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,     0,  1563,   496,
       0,   497,  1564,   499,   500,   501,   502,   503,   504,   505,
       0,     1,   506,     0,     0,   507,   508,   509,   510,   511,
     512,     2,     0,     3,     4,     0,     0,     0,     0,     0,
       0,     0,   524,   525,   526,   527,     0,     0,     0,     0,
       0,     6,     0,     0,     0,     0,     0,     0,     0,     0,
       7,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     8,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    10,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    11,     0,   764,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      13,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    14,    15,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   765,     0,     0,     0,
       0,     0,     0,    18,     0,     0,     0,     0,     0,     0,
       0,    19,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    22,
       0,     0,     0,    23,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -595,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    25,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    26,    27,    28,     0,     0,     0,     0,     0,
      29,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    31,     0,     0,     0,     0,
       0,     0,     0,     0,    32,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      33,     0,     0,     0,     0,     0,     0,    34,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    36,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    37,     0,     0,     0,    38,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,    42,     0,
       0,     0,     0,    43,     0,     0,     0,     0,   766,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   767
};

static const yytype_int16 yycheck[] =
{
       7,    88,     0,   528,     0,     0,     0,    90,    91,    16,
       0,    46,   855,   917,   759,     0,    23,    16,     0,     0,
     945,   905,     0,     0,     0,     0,  1019,    38,  1231,   928,
     767,  1001,   829,  1458,  1270,  1330,  1257,  1733,     7,  1256,
    1060,   879,    20,    20,    23,  1244,   984,   950,  1001,  1609,
    1691,  1009,    37,    92,    23,  1009,  2229,  2120,  1189,    20,
       7,  1009,  1009,  1108,  1583,  1236,    92,  1233,  2194,  1837,
    2196,  1504,  2284,  1312,  1334,  2035,    23,  1195,  2215,  1663,
     988,  1001,  2160,    90,    91,    17,  2399,  1644,  1645,   917,
    2720,   919,    45,   921,     0,  1261,     0,     0,     0,     0,
    1154,   112,     0,     0,     0,  1159,     0,  2682,    13,     0,
    2718,    90,    91,  1360,    19,     0,  2682,  2280,  2214,   104,
    2736,    90,    91,  1116,   766,    30,   767,     0,  2551,  1028,
       0,     0,     0,     0,     0,  2351,  2743,     0,     0,    44,
      45,     0,     0,    90,    91,   825,   760,  2332,  2333,  2334,
     830,    23,  2638,  2036,  1862,     0,  2642,     5,     5,     5,
      13,    14,     0,     0,     0,  1135,  1751,  1663,  1855,  1007,
       0,  1978,  1753,     5,  1858,    55,    63,  2011,  3065,     5,
    2364,    13,    14,     5,     5,    74,     9,  1695,     5,     5,
    2024,    13,    14,     5,     5,  1165,  2362,     5,     9,     5,
       5,    13,    14,     9,     5,   110,     5,  2370,    13,    14,
    2362,     5,  1165,  1010,     9,    34,   786,  2358,    90,    91,
       5,   900,     5,     5,   174,   174,     5,     5,    13,    14,
    3051,   140,    45,   175,    30,    45,     3,     4,     5,     4,
     124,   900,     9,    63,     9,    11,     4,  3068,   119,    30,
      16,     9,    13,    14,    63,     3,    11,    38,   107,  1279,
      53,    16,   100,   194,  1001,    63,  2429,  2430,  1288,  2432,
     100,   184,     5,  1172,  1199,  1245,  3241,  1115,  1248,  1249,
      46,   122,   171,   874,   174,     5,    34,    35,  2906,    85,
     302,  2952,  1245,    30,   174,  1248,  1249,   822,    94,   175,
     230,    38,    82,   296,   230,    82,  3377,  3024,   249,   126,
     127,  2501,   187,    93,    80,  2887,    93,  2889,   302,   148,
     107,   321,   118,  3258,    11,  3407,   117,    80,    15,    16,
       3,  1011,     5,    11,   107,  1086,   377,    15,    16,   196,
     391,    30,  1473,   132,  1024,  2598,   871,  2600,   278,    38,
     117,  1102,   278,    13,  3448,  1554,  3415,   174,  2484,    19,
    1002,    90,   297,   297,   282,   196,  1082,  1083,    46,   294,
      30,    64,   119,  1504,   323,   324,   325,   163,  1221,  1222,
    3501,    74,   117,  1099,    44,    45,   179,  1225,  1648,    13,
      14,   400,   221,  2004,  2005,  2006,   119,   166,   194,   132,
     129,   122,    80,   120,   197,   168,   468,  3478,   120,   202,
    3481,   207,  1382,  1383,  2599,  2183,   137,  1342,  2652,   468,
     350,   164,   149,   122,   164,   173,   169,   175,   161,   104,
    3060,    41,  3007,   321,  1318,    40,   122,   518,  1947,  2651,
     316,  3071,   391,    75,    11,   285,  3267,   240,   529,   338,
     110,    82,    11,  2626,  3062,   222,    15,    16,   296,   194,
     427,  3555,    93,   210,  2542,   234,   296,   529,  3403,   278,
    1979,   401,  1375,   302,   349,   401,   203,  3598,   245,   428,
     529,   198,   369,   148,   535,  2648,   198,  2650,   529,  3376,
     378,   278,   442,   279,   296,   286,    40,  3556,   241,   164,
     467,   241,   291,   378,   169,   174,   323,   324,   325,   184,
     367,  3593,    26,    80,   463,  1560,   126,   216,    32,  3590,
     529,   462,  3239,   535,   524,   474,  1786,  2761,   404,  3101,
     216,   278,   370,   364,   281,   465,   529,    11,  3199,   465,
     370,    15,    16,  2796,  1223,   169,   281,   465,   281,   369,
     293,   535,   245,   286,    30,   468,   221,  3218,   291,  3524,
     369,   546,   496,   286,  1223,   405,   286,  3185,   518,   332,
     459,   369,    46,   178,   391,  2759,   241,  1780,   487,   428,
     529,   531,  2166,  2749,   468,   402,   315,   529,   529,   398,
     480,  2732,  3479,   600,   529,  2028,  1121,  2749,   529,   470,
    2160,   600,  1841,   278,   529,  1196,    80,   424,  2771,   382,
     403,   428,   425,  1183,  1359,   425,   337,  2577,   414,  1364,
    3622,   417,  2812,   137,   465,  1370,  1464,   408,   293,   458,
     108,  1601,  2439,   106,   178,  1478,   524,   302,   132,  3255,
    1377,  2198,   428,  1613,  3646,  1615,   463,   493,   535,   529,
    2235,  1494,   478,   491,  1875,  2236,   132,   474,   563,  3480,
    1907,   491,   442,  2497,   108,   442,  3241,   249,  2228,   515,
    2166,   408,  1642,  1693,   491,  3241,   529,   493,  2365,  1939,
     527,   529,   529,   529,   531,   533,  1922,   532,  2372,  2397,
     535,  1951,   530,   529,   532,   532,   532,   529,   515,   515,
     530,   533,   532,   529,  3190,   528,   435,   529,   529,  3195,
    2218,  2923,   529,   529,  2930,   535,   449,   529,   529,   408,
    3143,   529,  1982,   529,   529,   520,   521,   460,   529,  1989,
     529,   479,   767,   491,  1376,   529,  1377,   820,  1637,  1638,
    1639,  3054,   415,   416,   529,  3375,   529,   529,  1586,  1587,
     529,   529,  1366,   520,   521,   520,   521,   515,  1596,   525,
     767,  1061,   520,   521,   439,  2025,   465,  3383,   529,  2029,
     525,    37,  1610,   442,   527,  1526,    30,  3384,   531,   465,
    1750,  1751,   255,   493,   108,   820,   300,   281,   766,   766,
     491,  1471,   265,   458,  2033,  1546,   368,   291,  2058,   428,
     382,   808,  1640,  1519,  1520,   515,   767,   166,  2904,     8,
     164,   518,    11,   820,   515,   169,    15,    16,   905,    83,
      19,    20,    21,  1038,   531,  2785,   398,   418,  1544,  1044,
     869,  1582,  2910,   520,   521,   522,   523,   524,   525,   808,
    1810,   820,  3602,   869,   522,   523,   524,   525,   855,   856,
    1820,   820,   366,  1823,   281,   760,   761,  1810,  3043,   286,
    1991,   808,   527,   874,  1884,  1165,   531,  1820,  3476,  3499,
    1823,   195,   879,   820,  2485,  2486,  2487,  2488,   132,    26,
     462,   206,    74,   894,   398,   149,  3049,   241,  1604,  1605,
    3650,   889,   483,   889,   889,   889,  3336,  2028,  3338,   889,
    3171,  1805,  3173,   563,   889,   254,  2866,   889,   889,   175,
      40,   889,   889,   889,   889,  1660,   877,  2501,   277,   926,
     927,   348,    26,   930,   931,   117,  1451,   880,    32,  2697,
      60,  2699,   281,   164,    26,  3543,   808,  2184,  2821,   293,
      32,  2824,    33,  2826,  1244,  1999,   212,   529,   820,  3524,
    1778,  1587,  1035,  1923,  1838,  1839,  1840,   471,  3524,  1042,
    1596,  1864,   228,   522,   523,   524,   525,  1905,    59,   529,
    1923,  1909,   238,  3286,  1912,   880,   106,  1805,  2109,     0,
    3420,   988,  2542,   889,   271,   889,   889,   889,   889,  3201,
     137,   889,   889,   889,  1001,   889,  3626,  1825,   889,  1006,
    1007,   150,  1830,  1923,   889,  1012,  1914,  2564,  1015,  1016,
     241,   444,  1019,  1020,  1021,  1022,   889,   532,   950,   889,
     889,   889,   889,   889,  1002,  1002,   889,   889,  1035,  3300,
     889,   889,   527,   137,  1334,  1042,   531,  2462,   857,   858,
    3542,   860,   329,   862,  3181,   137,   520,   521,   522,   523,
     524,   525,  1059,  1060,  1061,   204,  1035,   382,   152,   263,
     264,   494,   293,  1042,   479,    11,  1035,   249,   393,  3441,
    3442,  1816,  2042,  1042,  1081,   205,  1821,   180,   530,   217,
     174,  1116,  2200,   535,  2957,  2203,  2307,  2606,  1035,   281,
    3592,    26,  2965,  1100,   286,  1042,  2335,    32,   527,   298,
      46,   761,   531,   428,  1111,  1112,  1113,   373,  1115,  1116,
    2878,   535,   132,  1120,  2374,   493,   493,   192,   193,   527,
     281,  1120,  2682,   531,  1029,   255,   392,  2258,   180,    82,
     181,  3503,  1043,  3093,    80,   265,  1047,   515,   515,  3351,
      93,   161,   245,  1150,    71,    72,   338,  1052,   278,  1987,
    2316,   529,   529,   300,    37,  1033,   481,   434,   528,   436,
     528,  1168,  1169,  1035,   356,  1204,  1205,   524,  1207,   539,
    1042,   539,     5,  1051,   531,   530,   350,  1055,  1204,  1205,
     535,  1207,   312,   387,   388,  1196,  1923,  1930,   263,   264,
     529,  1934,   243,   245,  1937,   249,   300,  2190,   524,  1206,
     382,   529,   137,  1210,  1211,   531,   857,   858,   300,   860,
    2381,   862,  1117,  1220,  1221,  1222,  2387,   530,  1225,   366,
     880,   368,   535,   434,   132,   436,   522,  2197,  2812,   323,
     324,   325,  2070,   529,   527,   108,   529,  1244,   368,   249,
     842,   843,   844,     4,  1463,   847,  1465,  1466,     9,  1260,
     364,   398,   249,   161,  1554,    26,  2516,   434,   362,   436,
     389,    32,   366,   393,  2234,  2235,   286,   459,     4,   389,
     362,   291,  1279,     9,   366,   491,   468,   493,   206,   382,
     462,  1288,   412,  1188,  1189,    26,   256,  2290,   530,  2292,
     530,    32,   175,   535,   398,   535,   530,   391,   434,   447,
     436,   535,   530,   354,   249,  1312,   398,   535,  2146,   530,
     530,  2195,   387,   388,   535,   535,   428,   516,   517,   518,
     386,   520,   521,   522,   523,   524,   525,  1334,   382,   212,
    2648,   434,  2650,   436,   428,  1333,   481,  1333,  1333,  1333,
     389,  3404,   393,  1333,  1351,   228,   529,   529,  1648,  2287,
    2910,  2289,  1351,  1360,   529,   238,    26,  2790,   530,   462,
      13,    14,    32,   535,   529,   300,   137,   471,  2499,   463,
    1377,  2502,   382,   281,   897,   169,   899,   428,   286,   471,
     474,   432,   434,   291,   436,   382,     4,  1394,    82,   530,
     529,     9,  1399,   174,   535,  1394,   137,   491,  1376,  1376,
     530,  1484,  3614,   529,  1487,   515,   530,   529,   462,  1492,
     462,   535,  1495,   530,   108,   522,  1377,  1500,   535,     4,
    2263,   515,  2682,   529,     9,   512,  3599,   362,  3601,   449,
     481,   366,   227,   530,  3560,   529,  2361,   382,   535,   529,
     460,   529,  1449,  1450,  2665,   530,  2649,  2664,  1455,  3575,
     535,  1458,   462,    13,    14,   529,  1463,  1464,  1465,  1466,
    2696,  1366,  1367,   398,  1369,   462,   527,   137,   529,     6,
     531,  1478,  1479,    10,   530,   529,  3649,  1484,   531,   535,
    1487,    18,   176,    13,    14,  1492,  1786,  1494,  1495,  1458,
     373,   529,  2663,  1500,  2665,    32,  2713,    13,    14,    36,
     296,   530,  2547,  2548,   529,  1484,   535,  1061,  1487,   392,
     529,  1458,   206,  1492,  3640,  1484,  1495,   462,  1487,   529,
     531,  1500,  3648,  1492,   512,   530,  1495,   535,  1188,   300,
     535,  1500,   529,   173,   530,   529,   471,  1484,   530,   535,
    1487,   449,   181,   535,   530,  1492,   530,  1554,  1495,   535,
    2520,  2521,   460,  1500,   530,   530,   250,   530,  2551,   300,
     535,  3329,   535,  3331,   176,   530,  2524,  2525,  1473,   181,
    2524,  2525,  2526,   267,   174,  2523,  2414,  2524,   530,  1586,
    1587,   301,   530,   535,   529,    59,  1458,   535,  1595,  1596,
     529,   362,    13,    14,   429,   366,  1603,  1502,  1583,  1504,
     512,  1583,  1583,  1610,   243,  1583,  1583,  1583,  1583,   530,
     227,   530,  1484,   530,   535,  1487,   535,   530,   535,   530,
    1492,   362,   535,  1495,   535,   366,   153,   398,  1500,  1636,
     300,   243,   530,  1640,   362,   530,  1643,   535,   250,  1939,
     535,  1648,  1649,  1650,  1651,  1652,  1653,  1654,  1655,  1656,
    1657,  1951,    13,    14,  1661,  1662,  1663,   398,  1657,  1666,
     530,   153,  2407,  1670,   153,   535,  1673,  1674,  1675,  1676,
    1677,  1678,  1679,  1680,  1681,   530,   153,  1684,  2415,   428,
     535,  3241,  1982,   153,  1691,    40,  1693,   530,   382,  1989,
    1244,   529,   362,   281,  1663,    40,   366,  1736,  3339,   393,
     471,   530,   148,   530,   481,  1712,   535,  1367,   535,  1369,
    1736,   267,  2682,  2973,    89,   354,  2615,   153,   164,    13,
      14,  2924,   495,   169,   153,  2025,    13,    14,   398,  2029,
     471,   531,  1739,   153,   428,  2035,    13,    14,    13,    14,
      13,    14,   354,  1750,  1751,    13,    14,    13,    14,  1710,
    2971,   153,   180,   296,   393,    13,    14,   364,  2058,   453,
    3055,    13,    14,    13,    14,    13,    14,    13,    14,    13,
      14,    13,    14,    13,    14,   221,   180,   442,   206,  1786,
    1334,   393,    13,    14,    13,    14,   529,   481,  1795,   428,
    1797,    13,    14,   432,   529,   241,  1795,  2640,  1797,    13,
      14,   471,   377,   378,   377,   378,   377,   378,  3007,  1016,
     529,  3047,   377,   378,   268,   269,   428,   245,    59,  2703,
     432,  2746,   530,  2726,   387,   388,  2764,   473,   474,   529,
    1837,   430,     8,   223,  1841,  2392,  2393,  1844,  1845,    15,
      16,   245,   481,    19,    20,    21,   228,   293,  2220,  2221,
    3570,  3571,  2822,   306,    40,   529,   302,  3608,  3609,  2879,
     228,  1766,  3558,  1168,  1169,  3290,  3562,   529,   228,   481,
     303,    40,   239,   301,    60,   529,  1781,  1884,  3138,     5,
       5,   529,   333,     5,   529,   529,  1791,   529,  1793,  1972,
       5,  1796,   529,     5,   529,  1880,     5,  1802,     9,  1804,
    1907,   529,   529,   492,   309,   535,   104,  1914,  1915,   535,
     530,    40,  1817,   223,   398,   169,  1923,  1822,   322,   293,
     106,  1826,  1827,  1828,  1829,   291,  1831,  1832,    59,  2012,
     169,  3627,  1939,   174,   239,  2018,  1943,  1944,   529,  1946,
     442,    93,   529,   535,  1951,  1952,  1953,  1954,  1955,  1956,
    1957,   442,    59,  1960,  1961,  1962,  1963,  1964,  1965,  1966,
    1967,  1968,  1969,    59,  3524,  1972,   442,   271,   108,  1976,
    1977,   442,   539,  1980,   225,  1982,   442,   442,   382,   491,
    1987,  3241,  1989,   389,   100,   389,   153,   529,   281,  2786,
     281,    40,  2962,  1972,   529,   281,   281,  2967,   281,   202,
    1554,   174,  2009,  1972,   153,  2012,   434,  2014,   436,  2962,
     531,  2018,   458,    13,   174,   530,   530,   530,  2025,   205,
     530,   530,  2029,  3448,  2031,  1972,  2033,   535,  2035,   535,
     434,   459,   436,  2012,   462,  3252,  2974,  2975,   488,  2018,
     530,   228,   530,  2012,  3014,  3015,   529,   228,   529,  2018,
     288,  2058,   288,   535,    74,   478,   529,    39,   462,   531,
      80,   529,   529,  2070,  2071,  2012,   529,   529,   529,   255,
     529,  2018,  2817,    93,  2374,  3500,   531,   487,     9,   265,
     529,   440,   323,   324,   325,    11,  1991,   440,   364,   528,
     535,   539,   278,   535,  1648,   286,   534,   117,   440,   119,
    1972,  2108,   529,   442,  2111,   184,   165,   174,   148,  2116,
    2117,  2146,   530,   535,   468,   221,   535,  3110,  2023,   401,
     271,  1781,   298,  2028,   164,   152,   312,   230,   321,   169,
    3555,  1791,   297,  1793,  2141,  2142,  1796,  3373,   321,  2146,
    2012,   535,  1802,   535,  1804,   184,  2018,   174,   223,   530,
     391,   529,   230,   281,   230,  2162,   302,  1817,  2165,  2166,
    2167,   343,  1822,   481,   294,   267,  1826,  1827,  1828,  1829,
     153,  1831,  1832,   529,   153,   153,  2183,  2184,   529,   491,
     153,   221,   368,  2190,  3315,   535,  2193,   428,   535,  1061,
     210,    40,   281,   320,   153,     3,   529,  2166,  2943,   281,
      41,   241,   296,  2210,  2109,  3408,     3,   393,   296,    40,
     174,    59,    11,  2118,  2193,    40,  2516,   169,   184,   530,
    2227,   530,   463,   530,  2193,   169,   412,   530,   529,   529,
     529,  2210,  1786,   474,     3,    39,     3,  2244,  2245,   527,
     442,  2210,  1449,  1450,   528,   442,  2193,   527,  1455,   530,
     442,   530,   442,   293,  2261,   149,  2263,   535,   530,  3229,
    3230,   281,   302,  2210,  3524,  2272,   286,   534,   109,   531,
     111,  3241,   113,   530,  3405,   530,   174,  2577,   512,   512,
     512,   530,   529,  2290,  2291,  2292,   442,   530,   529,   156,
      40,  2290,  2291,  2292,  3219,   530,   323,   324,   325,   529,
    2205,   529,   126,   127,   530,   529,  3527,   254,   529,   488,
      59,   518,   535,   514,   480,   465,   297,   297,   338,   535,
     248,  2193,  2329,    59,    59,   271,   281,   153,  2335,   442,
     529,   206,   153,  2368,   153,   288,   356,   442,  2210,  3542,
     516,   517,   518,   442,   520,   521,   522,   523,   524,   525,
     174,  3554,  3089,  2258,   288,   442,   442,   529,  2356,  2264,
    2356,  2356,  2356,    40,   391,   529,  2356,  2374,   530,   364,
     294,   530,  1244,   296,   535,    40,   153,   491,     5,   153,
     533,   286,  2682,   530,   174,  1939,   529,  2394,   529,  3592,
      59,   530,  2399,   530,   530,   189,   169,  1951,    80,   144,
    2399,   428,   202,   535,   527,   539,   174,  2414,  2415,   530,
     530,   530,   530,   530,   370,   308,  2423,   178,   458,   529,
     297,   529,   184,   153,  2423,   453,    40,    86,  1982,   530,
     530,   535,   529,   320,   529,  1989,   463,   535,     8,   459,
     530,    11,  3341,   535,   529,    15,    16,   474,   468,    19,
      20,    21,    40,   530,    40,  2462,   530,   530,   529,   531,
     530,   529,  1334,  3301,   491,  3303,   296,   468,   174,   535,
    3313,  2025,    40,   529,   490,  2029,   530,   530,   202,  2384,
     530,  2035,   528,   528,   535,  2785,   530,   527,   515,   530,
     530,   531,    60,  2462,  2501,   530,   530,   474,  3295,   323,
     324,   325,   529,   296,  2058,  2592,   518,    59,   530,  2516,
     208,   530,     7,     8,   117,  2462,  2551,  2528,    13,  3316,
     530,  3318,  3515,   530,    19,  3450,  2533,    40,    23,   491,
      25,   529,  2539,  2540,    29,    30,    31,   230,   106,    34,
      88,   195,    37,    38,  2551,  2205,    41,   286,   286,    44,
      45,    40,  2587,   518,  3524,  3459,  3440,   531,  2565,   531,
     531,  2568,   531,  2570,   531,     5,  2866,   391,   531,   442,
    2577,  2578,   442,   531,  2581,  2582,   281,   531,   402,  2586,
    2587,   531,   531,   531,   107,   530,  2593,   176,   531,   531,
    2462,  3434,   181,   531,  2499,    90,    91,  2502,   531,   531,
     424,  2608,   531,  2508,   428,  2640,   531,   528,   528,   104,
     178,  2618,   531,   531,   109,   110,   111,   112,   113,   531,
     531,  2606,   531,   531,  2606,  2606,   530,  2612,  2606,  2606,
    2606,  2606,   202,  2640,   531,   531,   531,   205,   530,   463,
     531,   531,   531,   531,   529,   491,   428,   320,   529,   307,
     474,   296,     9,   529,   243,   225,   363,   529,   529,   345,
      59,   250,   530,   202,   528,   530,   535,   491,   195,   535,
     473,    91,  2679,  2973,   535,  2682,  2683,   530,  2685,   529,
    2679,   356,  1554,   153,  2683,    40,  2685,   255,   531,   124,
    2697,   515,  2699,   530,   153,    40,   530,   265,   378,   378,
      40,   529,     5,   530,  2787,   529,   547,  3007,    37,   529,
     278,   552,   529,    42,   555,    40,   468,   535,   529,   317,
    2755,   286,   529,   253,  2384,   194,   468,  2725,   298,  2725,
    2725,  2725,   453,  2638,  2719,  2725,   307,  2642,  2643,  2644,
     529,   299,    74,    74,   312,  1952,  1953,  1954,  1955,  1956,
    1957,   163,  3497,  1960,  1961,  1962,  1963,  1964,  1965,  1966,
    1967,  1968,  1969,  2748,    80,   354,  2671,     9,   380,    59,
     530,   530,   101,   529,  2809,  2782,  1648,   530,  2785,    93,
    2787,  2686,  2687,  2688,  2689,  2690,  2691,  2692,  2693,  2694,
    2695,   528,   133,  3093,   528,   518,   278,  2804,  2805,   296,
     368,   453,  2809,  2886,   393,  2812,    40,   529,  2787,   529,
     535,   299,   299,   117,   307,   530,   139,   530,  2787,   529,
    2374,   530,   530,   174,   473,   393,   530,   208,   296,   296,
     529,   398,  2839,   530,   300,   122,   465,    25,  3138,   428,
    2787,   174,   530,   432,   412,   377,   175,  2854,   533,   149,
      25,    36,   530,  2860,  2861,   184,   377,   304,  2865,  2866,
     534,  2967,  2666,  2870,   889,  2900,  2873,  2874,  2285,  1803,
     174,  2878,  2879,  1268,  1711,  2882,  2679,  2328,  1847,  2886,
    2355,   803,  2423,   212,  3089,  2790,  2893,  3412,  2715,  3465,
    3585,  3212,   481,  3528,  3537,  3578,  1231,  2278,  3269,   228,
    2291,  3526,  2737,  3535,  2658,  3523,  2275,  2886,  2392,   238,
    2685,  2816,  2393,    37,  1786,  2787,  1330,  2886,    42,  3080,
    2617,  1914,  1359,  2402,  3410,  1377,  3343,  3500,   116,  3444,
    2937,  2616,  3613,  2227,  2141,  2142,  2606,  1061,  2945,  2886,
    2261,  3241,  1213,  1188,   180,   274,   516,   517,   518,  1775,
     520,   521,   522,   523,   524,   525,   895,  2964,  1214,  2483,
     311,  3509,  2516,  2244,  1739,  1034,  2973,   296,  3422,   810,
     206,  1034,   323,   324,   325,  3305,  1774,   101,    23,  1216,
    2210,  2023,  3133,  2643,  2644,   820,   808,  2812,  1011,  2461,
     323,   324,   325,  2462,   323,  2508,  3233,  2038,  1009,  1923,
    3007,   330,  3426,  1009,  1009,  1009,  1009,   311,  1923,   245,
    1009,  2671,  1009,  1009,  2886,  1009,  1923,  3425,  2118,   323,
     324,   325,  3625,  2577,  2540,  2228,  2686,  2687,  2688,  2689,
    2690,  2691,  2692,  2693,  2694,  2695,  2072,  2855,  2166,  2944,
     391,  2893,  2163,  2561,   373,  1479,  1710,  3054,  2031,   104,
     891,   175,   547,   866,    -1,  3054,    -1,   552,   391,    -1,
     555,    -1,    -1,   392,    -1,   301,    -1,  1939,   563,  3076,
       0,    -1,    -1,    -1,    -1,  3110,    -1,   428,  3063,  1951,
      -1,    -1,  3089,    -1,    -1,  3092,  3093,   391,   212,    -1,
      20,    -1,    -1,    23,    -1,   428,    -1,    -1,    -1,    -1,
      -1,   942,    -1,  3110,   228,    -1,    -1,    37,    -1,    -1,
    1982,    -1,   463,    -1,   238,    -1,    46,  1989,   959,   960,
    1244,   962,   963,   474,   428,    -1,    -1,    -1,  2682,    -1,
     463,  3138,    -1,    -1,   463,    -1,  3143,    -1,    -1,   468,
     491,   474,    -1,    -1,    -1,    -1,   382,    -1,  3155,  3156,
     274,    -1,  3159,  2025,  3161,    -1,    -1,  2029,   491,   463,
      90,    91,    92,  2035,   515,    -1,    -1,    -1,    -1,    -1,
     474,    -1,  1013,    -1,   104,    -1,  1017,    -1,   529,  3186,
      -1,  1061,   515,    -1,    -1,    -1,  2058,   491,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   529,    -1,   434,   323,
     436,     8,    -1,  3210,    11,    -1,   330,    -1,    15,    16,
    1334,   515,    19,    20,    21,    -1,    -1,   453,    -1,    -1,
      -1,  3126,    -1,   459,  3524,   529,   462,    -1,  3133,    -1,
      -1,  2785,    -1,    -1,  3241,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,   373,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   759,   760,   761,    -1,   392,    -1,
      -1,    -1,  3257,    80,    -1,    -1,    -1,    -1,    -1,  3286,
      -1,    -1,    -1,  3290,  2944,  3190,    -1,  3286,    -1,    -1,
    3195,    -1,    -1,    -1,  3301,    -1,  3303,    -1,  3305,    -1,
      -1,    -1,  3309,    -1,  3311,    -1,  3313,   802,   803,    -1,
      -1,    -1,  2866,   808,    -1,   810,  3221,  3324,    -1,    -1,
      -1,  3290,  3329,    -1,  3331,   820,    -1,    -1,    -1,   824,
     825,    -1,  3339,    -1,   829,   830,    -1,  3242,  3243,   463,
      -1,    -1,    -1,  3290,    -1,  3352,    -1,   842,   843,   844,
    3357,    -1,   847,  3352,    -1,  3340,   180,  3342,    -1,    -1,
      -1,  3266,   857,   858,  1244,   860,    -1,   862,    -1,    -1,
      -1,    -1,   179,    -1,  2581,  2582,    -1,    -1,    -1,   874,
      -1,    -1,   206,    -1,    -1,   880,    -1,    -1,    -1,  1230,
     197,    -1,    -1,    -1,    -1,   202,   891,  3382,    -1,   894,
     895,    -1,  1243,    -1,  3411,    -1,   530,    -1,    -1,    -1,
    3315,   535,    -1,  3398,    -1,  3422,    -1,    -1,  3290,  2973,
      -1,   245,    -1,  1264,    -1,    -1,    -1,  3434,    -1,    -1,
    1554,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3448,    -1,    -1,    -1,    -1,    -1,   942,   943,    -1,
      -1,    -1,    -1,  3007,  1334,    -1,    -1,    -1,    -1,  3466,
      -1,    -1,    -1,    -1,   959,   960,    -1,   962,   963,    -1,
     965,    -1,    -1,    -1,    -1,    -1,    -1,   301,    -1,  3448,
      -1,    -1,    -1,   978,    -1,    -1,    -1,    -1,  1329,    -1,
      -1,   298,    -1,  3500,  1335,    -1,    -1,    -1,   322,    -1,
    3405,  3448,  2374,    -1,  1345,    -1,    -1,    37,  3515,    -1,
      -1,    -1,    42,    -1,    -1,  1010,  1011,  3524,  1013,  3526,
      -1,  1016,  1017,    -1,  1648,    -1,    40,  3526,  1023,  1024,
       8,  3500,    55,    11,  1029,    -1,    -1,    15,    16,  3093,
    1035,    19,    20,    21,    -1,    -1,    60,  1042,  3555,    -1,
      -1,    -1,    -1,  3500,    -1,    -1,  3541,  1052,   382,    -1,
      -1,  3221,  3569,  3570,  3571,   389,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,  1069,  2782,  3448,    -1,    -1,   102,
      -1,    -1,  3242,  3243,  3138,    -1,  3555,    -1,  3573,    -1,
      -1,    -1,   106,   107,    -1,  3602,   403,    -1,    -1,    -1,
     123,    -1,    -1,   117,    -1,    -1,  3266,    -1,  3555,    -1,
     434,    -1,   436,  1061,   802,  3520,   546,    -1,    -1,   142,
      -1,    -1,  1117,   146,    -1,    -1,    -1,    -1,  3500,   453,
      -1,    -1,    -1,    -1,    -1,   459,    -1,    -1,   462,    -1,
    1481,    -1,     0,  3650,  2516,   175,   834,   170,    -1,    -1,
     173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1786,    -1,   178,    -1,    -1,   190,    -1,    -1,
      -1,   859,    -1,    -1,  1554,    -1,  1171,    -1,    -1,  1174,
      -1,    -1,   212,  3555,    -1,    -1,    -1,  3241,    -1,    -1,
      -1,   205,    -1,  1188,  1189,    -1,    -1,    -1,   228,    -1,
      -1,  1196,    -1,    -1,    -1,  2577,   513,   895,   238,   516,
     517,   518,    -1,   520,   521,   522,   523,   524,   525,    -1,
    3625,    -1,    -1,    -1,   202,  1220,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1230,  1231,    -1,  2945,    -1,
      -1,   255,   100,    -1,   274,    -1,    -1,   225,  1243,    -1,
      -1,   265,    -1,  1061,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,   278,  1260,   296,   281,  1648,  1264,
      -1,   294,    -1,    -1,  1269,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    -1,
     148,    -1,    -1,   323,   317,    -1,  1244,    -1,   312,    -1,
     330,     8,    -1,    -1,    11,    -1,   164,    -1,    15,    16,
    2682,   169,    -1,  1001,    -1,  1939,   174,    -1,    -1,    -1,
     298,  1009,    -1,    -1,    -1,   348,   184,  1951,    -1,    -1,
      -1,   189,  1327,    -1,  1329,    -1,   766,   767,    -1,    46,
    1335,    -1,    -1,   373,    -1,    -1,    53,   101,    -1,    -1,
    1345,    -1,    -1,    -1,   368,  1350,    -1,    -1,  1982,    -1,
    3520,    -1,   392,   221,  1359,  1989,    -1,    -1,  1709,  1364,
    1711,  1366,  1367,    80,  1369,  1370,    -1,    -1,   808,   393,
      -1,  1722,    -1,   241,    -1,  3092,  1334,    -1,    -1,    -1,
     820,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   412,    -1,
     414,  2025,    -1,   417,    -1,  2029,  1786,    -1,    -1,    -1,
      -1,  2035,    -1,  2785,    -1,    -1,    -1,    37,    -1,    -1,
      -1,   175,    42,  1764,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   463,  2058,   293,  1244,  1125,   296,   869,
      -1,    -1,    -1,    -1,   302,    -1,    -1,  1135,    -1,    -1,
      -1,    -1,    -1,    -1,  1449,  1450,    -1,    -1,   212,   889,
    1455,    -1,    -1,  1458,    -1,    -1,    -1,    -1,  1156,    -1,
    3524,    -1,   179,    -1,   228,    -1,  1471,  1165,  1473,  1474,
      -1,   101,    -1,    -1,   238,    -1,  1481,   345,    -1,  1484,
     197,    -1,  1487,    -1,  2866,   202,    -1,  1492,    -1,    -1,
    1495,    -1,    -1,    -1,    -1,  1500,    -1,  1502,    -1,  1504,
      -1,    -1,   370,    -1,    -1,   529,  1857,  1858,  1859,  1860,
     274,    -1,  1863,    -1,    -1,    -1,  1334,    -1,    -1,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,   516,   517,
     518,    -1,   520,   521,   522,   523,   524,   525,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,    -1,  1939,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   323,
     428,  1951,  1002,    -1,    -1,    -1,   330,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   298,   212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     458,  2973,  1982,    -1,    -1,  1035,  1554,    -1,   228,  1989,
     468,    -1,  1042,    -1,  1609,    -1,    -1,    -1,   238,   373,
      -1,    -1,    -1,    -1,    -1,    -1,  1621,    -1,    -1,    -1,
     488,    -1,   490,   491,    -1,  3007,     0,    -1,   392,    -1,
      -1,    -1,    -1,    -1,    -1,  2025,    -1,  1077,    -1,  2029,
      -1,    -1,    -1,    -1,   274,  2035,    -1,    -1,    -1,  1089,
      -1,    -1,  2003,    -1,    -1,  1660,    -1,    -1,  1663,   527,
      -1,    -1,   530,   531,   532,    -1,   296,    -1,  2058,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1116,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
    1648,    -1,    -1,   323,    -1,  1393,    -1,    -1,    -1,   463,
     330,    -1,  1707,    -1,  1709,    -1,  1711,    -1,    -1,    -1,
      -1,  3093,    -1,    -1,    -1,    -1,    -1,  1722,    -1,  1724,
    1725,  1726,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1739,    -1,  1554,    -1,    -1,    -1,
    2374,    -1,    -1,   373,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3138,    -1,    -1,  1764,
      -1,  1766,   392,    -1,  1204,  1205,   530,  1207,    -1,    -1,
      -1,    -1,    -1,    -1,   148,  1780,  1781,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1791,  1792,  1793,  1794,
     164,  1796,    -1,    -1,    -1,   169,   513,  1802,    -1,  1804,
     174,    -1,    -1,   520,   521,   522,   523,   524,   525,    -1,
     184,  1816,  1817,    -1,    -1,   189,  1821,  1822,    -1,    -1,
      -1,  1826,  1827,  1828,  1829,    -1,  1831,  1832,  1786,    -1,
    1648,    -1,    -1,   463,    -1,    -1,    -1,    -1,   468,    -1,
      -1,    -1,    -1,  1848,    -1,    -1,    -1,   221,    -1,    -1,
      -1,    -1,  1857,  1858,  1859,  1860,    -1,  1862,  1863,  3241,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,    -1,
      -1,    -1,    -1,  1878,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2516,    -1,    -1,  1016,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,  1902,    11,    -1,
      -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   293,
      -1,    -1,   296,    36,    -1,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1376,    -1,     8,    -1,
      -1,    11,    -1,  2577,    -1,    15,    16,  1952,  1953,  1954,
    1955,  1956,  1957,    -1,    -1,  1960,  1961,  1962,  1963,  1964,
    1965,  1966,  1967,  1968,  1969,    -1,    -1,  1972,  1786,    -1,
      -1,   345,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      -1,  1939,    -1,    53,  2374,    -1,  1991,    -1,    -1,    -1,
      -1,    -1,    -1,  1951,    -1,    -1,   370,    -1,  2003,    -1,
      37,    -1,    -1,  1701,    -1,    42,  2357,  2012,    -1,    -1,
      80,    -1,  2363,  2018,    -1,    -1,    -1,    -1,  2023,    -1,
    2371,  2372,  2373,  2028,  1982,    -1,    -1,  1725,  1726,    -1,
       0,  1989,  2037,  2038,    -1,  2386,    -1,    -1,  2389,    -1,
      -1,    -1,    -1,    -1,  1484,    -1,    -1,  1487,  2682,    -1,
    2401,    -1,  1492,    -1,   428,  1495,    -1,    -1,    -1,    -1,
    1500,    -1,    -1,    -1,   101,    -1,    -1,  2025,    -1,    -1,
      -1,  2029,    -1,    -1,    -1,    -1,   146,  2035,    -1,    -1,
    1211,    -1,    -1,    -1,   458,    -1,    -1,    -1,    -1,  1220,
      -1,    -1,    -1,    -1,   468,    -1,    -1,    -1,    -1,    -1,
    2058,    -1,    -1,    -1,  2109,    -1,    -1,    -1,  2113,   179,
      -1,    -1,   225,  2118,   488,    -1,   490,   491,    -1,    -1,
      -1,  1939,    -1,    -1,    -1,    -1,  2516,   197,    -1,    -1,
     100,    -1,   202,  1951,    -1,  1833,  2141,  2142,   175,  2490,
    2491,  2492,  3524,  1583,    -1,    -1,    -1,    -1,  1846,  1847,
      -1,  2785,    -1,   527,    -1,  2160,   530,   531,   532,    -1,
      -1,  2166,    -1,    -1,  1982,    -1,    -1,    -1,    -1,    -1,
     240,  1989,    -1,    -1,    -1,   212,    -1,    -1,   148,    -1,
      -1,    -1,    -1,    -1,    -1,   298,    -1,  2577,  2193,    -1,
      -1,   228,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
    2205,   238,    -1,    -1,   174,  2210,    -1,  2025,    -1,  2214,
      -1,  2029,    -1,    -1,   184,    -1,    -1,  2035,    -1,   189,
      -1,    -1,    -1,  1663,    -1,  1923,    -1,    -1,   298,    -1,
      -1,  1929,  2866,    -1,    -1,    -1,    -1,   274,    -1,    -1,
    2058,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   221,    -1,  2258,    -1,    -1,  2261,    -1,    -1,  2264,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   241,    -1,    -1,    -1,  2280,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2634,    -1,    -1,   323,    -1,    -1,    -1,
      -1,    -1,  2682,   330,    -1,    -1,  1736,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1449,  1450,
      -1,    -1,    -1,   293,  1455,    -1,   296,    -1,    -1,    -1,
      -1,    -1,   302,   403,    -1,    -1,   373,    -1,    -1,  2973,
      -1,    -1,    -1,    -1,    -1,    -1,  2351,    -1,    -1,    -1,
      -1,    -1,  2357,    -1,    -1,   392,    -1,    -1,  2363,    -1,
      -1,    -1,    -1,    -1,    -1,  2370,  2371,  2372,  2373,    -1,
      -1,    -1,    -1,  3007,    -1,   345,  2727,    -1,    -1,  2384,
      -1,  2386,    -1,    -1,  2389,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2397,    -1,    -1,  2785,  2401,    -1,    -1,    -1,
     370,    -1,  2407,   516,   517,   518,  2757,   520,   521,   522,
     523,   524,   525,    -1,    -1,    -1,  2374,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2429,  2430,   463,  2432,    -1,    -1,
      -1,  1871,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1880,    -1,    -1,   513,    -1,    -1,  2797,  2798,  2799,  2800,
     520,   521,   522,   523,   524,   525,    -1,  2462,   428,  3093,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,  2866,  2482,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2490,  2491,  2492,   458,    36,
      -1,    -1,    -1,    -1,  2499,    -1,  2501,  2502,   468,    46,
      -1,    -1,    -1,  2508,  3138,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   488,    -1,
     490,   491,    -1,  2528,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1972,    80,    -1,    -1,    -1,  2542,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2374,   527,  2516,    -1,
     530,   531,   532,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2012,    -1,    -1,    -1,  2581,  2582,  2018,    -1,
      -1,     8,    -1,  2973,    11,    -1,    -1,    -1,    15,    16,
      -1,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,  2297,
    2951,    -1,    -1,    -1,    -1,  2610,    -1,  3241,  1739,    36,
      -1,  2616,    -1,    -1,    -1,    -1,    -1,  3007,    -1,  2577,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2634,
      -1,    -1,   179,  2638,    -1,    -1,    -1,  2642,  2643,  2644,
      -1,    -1,    -1,  2648,  2649,  2650,    -1,  2652,    -1,    -1,
     197,  2349,    -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2671,    -1,  2673,    -1,
    2368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   225,   226,
      -1,  2686,  2687,  2688,  2689,  2690,  2691,  2692,  2693,  2694,
    2695,    -1,    -1,   240,    -1,    -1,    -1,    -1,  2516,     3,
      -1,     5,    -1,  3093,    -1,    -1,  2146,    -1,    -1,    -1,
      -1,    -1,    -1,  2718,    -1,    -1,    -1,  2415,    -1,    -1,
      -1,    -1,  2727,    -1,  2682,    -1,  2166,  2425,    -1,  2427,
      -1,    -1,  2737,  2431,   281,  2433,    -1,   284,    -1,    -1,
      -1,    -1,  2182,    -1,    -1,    -1,    -1,    -1,  3138,    -1,
      -1,   298,  2757,  2193,   301,    -1,  2761,    -1,    -1,  2577,
      -1,    -1,    -1,    -1,    68,    69,  2771,    -1,    -1,    -1,
    2210,    -1,    -1,    -1,    -1,    -1,    -1,  2782,    -1,    -1,
      -1,  2786,  2787,    -1,    -1,  2790,    -1,    -1,    -1,  1016,
      -1,    -1,  2797,  2798,  2799,  2800,    -1,    -1,   225,    -1,
      -1,    -1,    -1,    -1,  2809,   109,   110,  2812,    -1,   113,
     114,  2816,  2817,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2825,  1952,  1953,  1954,  1955,  1956,  1957,  2785,    -1,  1960,
    1961,  1962,  1963,  1964,  1965,  1966,  1967,  1968,  1969,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2853,    -1,
    2855,  3241,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2682,    -1,    -1,    -1,    -1,    -1,
      -1,   298,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2884,
      -1,  2886,    -1,    -1,    -1,    -1,    -1,    -1,   192,   193,
    3524,    -1,    -1,    -1,    -1,  2900,    -1,    -1,    -1,  2904,
      -1,    -1,    -1,    -1,    -1,  2910,    -1,    -1,  2866,  3260,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2924,
      -1,    -1,    -1,    -1,    -1,  2930,    -1,    -1,  2368,    -1,
      -1,  3282,  3283,    -1,    -1,    -1,  3287,    -1,  2943,  2944,
    2945,    -1,    -1,    -1,    -1,    -1,  2951,    -1,    -1,    -1,
      -1,    -1,    -1,   257,   258,   259,   260,   261,   262,   263,
     264,    -1,    -1,  2968,   268,   269,   513,  2785,    -1,   516,
     517,   518,    -1,   520,   521,   522,   523,   524,   525,    -1,
      -1,    -1,    -1,    -1,  2682,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   539,  1220,     8,    -1,    -1,    11,    -1,  3350,
      -1,    15,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2141,  2142,    -1,    -1,    -1,  2973,    -1,  2715,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3381,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,
      -1,  3046,   346,   347,  3049,    -1,    -1,    -1,  2866,  3007,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3062,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    80,    11,    -1,    -1,
      -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,
    3085,    -1,    -1,   387,   388,    -1,    -1,  3092,    -1,   516,
     517,   518,    36,   520,   521,   522,   523,   524,   525,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2551,    -1,    -1,    -1,  3120,    -1,    -1,    -1,    -1,
      -1,  3126,    -1,    -1,    -1,    -1,    -1,    -1,  3133,    -1,
    2261,    -1,   146,    -1,  3524,  3093,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2587,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2973,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3168,    -1,   179,  2606,    -1,   855,   856,
      -1,    -1,  2612,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3138,   485,   486,   197,    -1,  3190,    -1,    -1,   202,  3007,
    3195,    -1,  2890,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2640,  3552,    -1,    -1,     8,   509,   510,    11,    -1,    -1,
      -1,    15,    16,    -1,    -1,    -1,  3221,    -1,    -1,    -1,
      -1,    -1,  1449,  1450,    -1,    -1,   240,    -1,  1455,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3242,  3243,   926,
      -1,    -1,    46,   930,   931,    -1,    -1,    -1,    -1,    53,
      -1,     8,    -1,    -1,    11,  3260,    -1,  3262,    15,    16,
      -1,  3266,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3093,    80,  3282,  3283,  2719,
      -1,   225,  3287,  3241,   298,  3290,    -1,    -1,    -1,    46,
    3295,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,   988,    -1,    -1,    -1,    -1,  3311,    -1,  2748,    -1,
    3315,  3316,    -1,  3318,    -1,  2755,    -1,    -1,    -1,  1006,
    3138,    -1,    -1,    80,    -1,  1012,    -1,    -1,  1015,    -1,
      -1,    -1,  1019,  1020,  1021,  1022,    -1,    -1,  3343,    -1,
      -1,    -1,   146,    -1,    -1,  3350,    -1,  2787,    -1,    -1,
      -1,    -1,    -1,    -1,   298,    -1,    -1,    -1,    -1,     8,
      -1,  3059,    11,    -1,    -1,    -1,    15,    16,    -1,  2809,
      -1,     8,  1059,  1060,    11,   179,  3381,    -1,    15,    16,
      -1,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,   403,
      -1,  3089,    -1,   197,  1081,    -1,    -1,    46,   202,    36,
    3405,    -1,    -1,  3408,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3426,   179,  3241,  1111,  1112,  1113,    -1,  1115,  1116,
      -1,    80,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,
     197,    -1,    -1,  3448,    -1,   202,  2886,    -1,    -1,    -1,
    2581,  2582,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2900,    -1,  1689,  1150,    -1,    -1,    -1,    -1,   225,   226,
      -1,  3476,    -1,    -1,  3172,    -1,    -1,    -1,    -1,    -1,
      -1,  1168,  1169,   240,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3497,  3498,   298,  3500,  3501,   146,    -1,   513,
      -1,    -1,    -1,    -1,  3509,    -1,   520,   521,   522,   523,
     524,   525,  1739,    -1,    -1,  3520,    -1,    -1,    -1,  1206,
      -1,    -1,    -1,  1210,  1211,    -1,    -1,   284,    -1,    -1,
     179,    -1,    -1,    -1,  1221,  1222,    -1,  3542,  3543,    -1,
      -1,   298,    -1,  3241,    -1,    -1,    -1,  3552,   197,  3554,
    3555,    -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3524,    -1,    -1,    -1,
      -1,    -1,   516,   517,   518,    -1,   520,   521,   522,   523,
     524,   525,    -1,    -1,    -1,    -1,    -1,  3592,   225,    -1,
      -1,   240,  1279,  3598,    -1,    -1,    -1,    -1,    -1,   403,
      -1,  1288,    -1,    -1,    -1,    -1,    -1,    -1,  3613,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
    3625,    -1,    -1,  3063,    -1,  1312,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   403,   126,   127,   298,
      -1,  2782,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,   298,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
    3110,    19,    20,    21,    -1,    -1,  3374,    -1,  2809,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    -1,    -1,   174,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,  3524,    -1,    -1,   513,
      -1,    -1,  1399,    -1,    -1,    -1,   520,   521,   522,   523,
     524,   525,    -1,  2854,    -1,  1952,  1953,  1954,  1955,  1956,
    1957,    -1,    80,  1960,  1961,  1962,  1963,  1964,  1965,  1966,
    1967,  1968,  1969,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   403,    -1,   513,    -1,    -1,   516,
     517,   518,    -1,   520,   521,   522,   523,   524,   525,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1463,    -1,  1465,  1466,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1478,  1479,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1494,    -1,    -1,
      -1,    -1,    -1,    -1,  2945,    -1,    -1,  3257,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3524,    -1,    -1,    -1,
      -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3279,
      -1,    -1,    -1,    -1,   323,   324,   325,    -1,    -1,   197,
      -1,    -1,    -1,    -1,   202,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,   513,    -1,    19,    20,    21,    -1,
      -1,   520,   521,   522,   523,   524,   525,   225,   226,   516,
     517,   518,    -1,   520,   521,   522,   523,   524,   525,    -1,
      -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3340,    -1,  3342,    -1,    -1,    -1,    -1,    -1,  1595,    -1,
      -1,    -1,   391,    -1,  2141,  2142,  1603,    -1,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   281,    -1,    -1,   284,    -1,    -1,    -1,
      -1,    -1,  3382,    -1,    -1,   424,    -1,    -1,    -1,   428,
     298,    -1,    -1,   301,    -1,    -1,  1643,    -1,  3398,    -1,
      -1,  3092,  1649,  1650,  1651,  1652,  1653,  1654,  1655,  1656,
      -1,   450,    -1,    -1,  1661,  1662,    -1,    -1,    -1,  1666,
      -1,    -1,    -1,  1670,   463,     0,  1673,  1674,  1675,  1676,
    1677,  1678,  1679,  1680,  1681,   474,    -1,  1684,    -1,    -1,
      -1,    -1,    -1,    -1,  1691,    -1,  1693,    22,    -1,    -1,
      -1,    -1,   491,    -1,    -1,     8,    -1,    32,    11,    34,
      35,    -1,    15,    16,    -1,  1712,    19,    20,    21,    -1,
      -1,    -1,    47,    -1,  2261,    -1,   515,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,     8,
     529,    -1,    11,    -1,    -1,   403,    15,    16,    -1,    -1,
      75,    -1,    -1,  1750,  1751,    -1,    -1,    -1,    -1,    84,
      -1,    86,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,   111,    -1,    -1,    -1,
      -1,  3541,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   126,   127,   128,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,
      -1,    -1,    -1,  3573,    -1,    -1,    -1,   152,    -1,   154,
     155,    -1,    -1,    -1,    -1,   298,    -1,    -1,    -1,    -1,
    1837,    -1,    -1,     8,  1841,   170,    11,  1844,  1845,   174,
      15,    16,    -1,    -1,    -1,   513,    -1,    -1,   516,   517,
     518,    -1,   520,   521,   522,   523,   524,   525,    -1,    -1,
    3311,    -1,    -1,    -1,    -1,    -1,   201,   146,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,  1884,    53,    -1,
      -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     179,    -1,    -1,    -1,    -1,    80,    -1,  1914,  1915,   244,
      -1,    -1,   225,    -1,    -1,    -1,    -1,    -1,   197,    -1,
      -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1943,  1944,    -1,  1946,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1976,
    1977,   146,    -1,  1980,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,   298,    -1,    -1,   323,   324,
     325,    53,    -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,
     335,    -1,  2009,    -1,   179,    -1,    -1,  2014,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,   298,
      -1,    -1,   197,    -1,  2031,    -1,  2033,   202,    -1,    -1,
      -1,   366,    -1,    -1,  2581,  2582,    -1,    -1,    -1,    -1,
     375,    -1,    -1,   516,   517,   518,    -1,   520,   521,   522,
     523,   524,   525,    -1,    -1,  1016,   391,    -1,    -1,    -1,
      -1,    -1,    -1,   398,  2071,   240,    -1,   402,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   412,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   424,
      -1,    -1,    -1,   428,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2108,    -1,    -1,  2111,    -1,    -1,    68,    69,  2116,
    2117,    -1,    -1,    -1,    -1,   450,    -1,   179,    -1,    -1,
      -1,    -1,    -1,   298,   403,    -1,    -1,    -1,   463,    -1,
      -1,   466,    -1,    -1,   469,   197,    26,    -1,    -1,   474,
     202,    -1,    32,    -1,    -1,    -1,    -1,    -1,   109,   110,
      40,    -1,   113,   114,    -1,  2162,   491,    -1,  2165,    -1,
    2167,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,    -1,
      60,    -1,    -1,    -1,    -1,  1136,  2183,    -1,   240,    -1,
     515,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   529,    -1,    -1,   532,    -1,    -1,
      -1,    -1,    -1,   516,   517,   518,    -1,   520,   521,   522,
     523,   524,   525,    -1,    -1,    -1,   106,    -1,    -1,   281,
    2227,    -1,   284,  1184,    -1,    -1,    -1,    -1,   403,    -1,
      -1,   192,   193,    -1,   513,  2782,   298,  2244,  2245,   301,
      -1,   520,   521,   522,   523,   524,   525,   137,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2263,    -1,    -1,  1220,
      -1,    -1,  2809,    -1,    -1,  2272,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,
      -1,    -1,  1273,    -1,    -1,   205,    -1,    -1,    -1,    -1,
      -1,    -1,  2329,    -1,    -1,    -1,    -1,    -1,  2335,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,    -1,
      -1,   403,    -1,    -1,    -1,   520,   521,   522,   523,   524,
     525,    -1,    -1,    -1,    -1,    -1,  1317,    -1,    -1,    -1,
      -1,  1322,    -1,    -1,    -1,   255,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   265,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   346,   347,  2394,   278,    -1,
      -1,     3,    -1,    -1,    -1,    -1,     8,    -1,  2945,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
     300,    -1,  1373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   312,    -1,    36,    -1,   387,   388,    40,    -1,
      -1,    -1,     8,    -1,    46,    11,  1397,    -1,    -1,    15,
      16,    53,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,   513,    -1,    -1,   516,   517,   518,    -1,   520,   521,
     522,   523,   524,   525,    -1,    -1,    -1,    -1,    80,    -1,
      46,    -1,   362,   535,    -1,    -1,   366,    53,   368,    -1,
      -1,    -1,    -1,    -1,  1445,    -1,  1447,    -1,  1449,  1450,
      -1,  1452,    -1,    -1,  1455,    -1,    -1,    -1,  1459,    -1,
      -1,  1462,    -1,   393,    80,    -1,  1467,    -1,   398,  1470,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   412,    -1,   485,   486,  2533,     8,    -1,    -1,
      11,    -1,  2539,  2540,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,  2551,  3092,  1507,    -1,   509,   510,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,  2565,    40,
      -1,  2568,    -1,  2570,    -1,    46,    -1,   179,   529,    -1,
      -1,  2578,    53,    -1,    -1,    -1,    -1,    -1,    -1,  2586,
    2587,   471,    -1,    -1,    -1,   197,  2593,    -1,    -1,    -1,
     202,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      -1,  2608,    -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2618,    -1,   225,   226,    -1,    -1,    -1,    -1,    -1,
      -1,   197,    -1,    -1,    -1,    -1,   202,    -1,   240,    -1,
    1591,    -1,    -1,  2640,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    26,  1607,    -1,    -1,   225,
     226,    32,    -1,    -1,    -1,    -1,  1617,  1618,  1619,    40,
      -1,    -1,    -1,  1624,   240,    -1,    -1,  1628,    -1,   281,
      -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,    60,
      -1,    -1,    -1,    -1,    -1,    -1,   298,    -1,    -1,   301,
    2697,    -1,  2699,    -1,    -1,    -1,    -1,    -1,   179,    -1,
      -1,    -1,    -1,    -1,    -1,   281,    -1,    -1,   284,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
      -1,   202,   298,    -1,    -1,   106,    -1,    -1,    -1,  1690,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,   240,
      -1,    -1,    -1,    -1,  3311,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1733,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1749,    -1,
      -1,   403,    -1,  1754,    -1,    -1,    -1,  2804,  2805,    -1,
     281,    -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,
    1771,    -1,    -1,    -1,    -1,    -1,    -1,   298,    -1,    -1,
     301,    -1,    -1,    -1,   205,    -1,    -1,   403,    -1,    -1,
      -1,    -1,  2839,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2854,    -1,    -1,
      -1,    -1,    -1,  2860,  2861,    -1,    -1,    -1,  2865,    -1,
      -1,    -1,    -1,  2870,    -1,    -1,  2873,  2874,    -1,    -1,
      -1,  2878,  2879,    -1,   255,  2882,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   265,    -1,  2893,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   278,    -1,    -1,
      -1,   513,    -1,    -1,   516,   517,   518,    -1,   520,   521,
     522,   523,   524,   525,    -1,    -1,    -1,    -1,    -1,   300,
      -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2937,   312,    -1,    -1,    -1,    -1,    -1,   513,    -1,    -1,
     516,   517,   518,    -1,   520,   521,   522,   523,   524,   525,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2964,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1941,   362,    -1,    -1,    -1,   366,    -1,   368,  1949,  1950,
      -1,  1952,  1953,  1954,  1955,  1956,  1957,    -1,    -1,  1960,
    1961,  1962,  1963,  1964,  1965,  1966,  1967,  1968,  1969,  1970,
      -1,    -1,   393,    -1,    -1,    -1,    -1,   398,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   412,   513,    -1,    -1,   516,   517,   518,    -1,   520,
     521,   522,   523,   524,   525,    -1,    -1,    -1,    -1,   530,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,  3076,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     471,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3110,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,  2074,    -1,    -1,  2077,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3143,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3155,  3156,
      -1,    -1,  3159,    -1,  3161,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2124,    -1,    -1,    -1,  2128,  2129,  2130,
    2131,  2132,  2133,  2134,  2135,    -1,    -1,    -1,    -1,  3186,
    2141,  2142,    -1,  2144,  2145,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2158,    -1,    -1,
    2161,    -1,    -1,  3210,    -1,    -1,    -1,    -1,  2169,  2170,
    2171,  2172,  2173,  2174,  2175,  2176,  2177,  2178,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,   179,    -1,
      11,    -1,    -1,  2204,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
      -1,   202,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3305,   240,
    2261,    -1,  3309,    -1,    -1,    -1,  3313,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3324,    -1,    -1,
      -1,    -1,  3329,    -1,  3331,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3339,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     281,    -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,
    3357,    -1,    -1,    -1,    -1,    -1,    -1,   298,    -1,    -1,
     301,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2330,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2340,
    2341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3411,    -1,    -1,    -1,   179,    -1,
      -1,    -1,    -1,    -1,    -1,  3422,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   197,  3434,    -1,    -1,
      -1,   202,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2410,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,  3466,
      -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,    -1,   240,
      -1,    -1,    -1,    -1,    -1,  2436,  2437,  2438,    -1,    -1,
    2441,  2442,  2443,  2444,  2445,  2446,    -1,    -1,    -1,  2450,
    2451,  2452,  2453,  2454,  2455,  2456,  2457,  2458,  2459,    -1,
      -1,    -1,    -1,    -1,  2465,  2466,    -1,    -1,    -1,    -1,
     281,    -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,    -1,    -1,
     301,    -1,  2493,    -1,    -1,    -1,    -1,  2498,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3569,  3570,  3571,    -1,    -1,    -1,    36,    -1,
      -1,  2532,   513,    -1,    -1,   516,   517,   518,    46,   520,
     521,   522,   523,   524,   525,    53,    -1,    -1,  2549,   530,
      -1,  2552,    -1,    -1,    -1,  3602,    -1,  2558,  2559,    -1,
      -1,    -1,    -1,    -1,    -1,  2566,  2567,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,  2580,
    2581,  2582,  2583,    -1,  2585,    -1,    -1,    -1,  2589,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3650,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,  2645,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,   197,
      -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   513,    -1,    -1,   516,   517,   518,    -1,   520,
     521,   522,   523,   524,   525,    -1,    -1,   225,   226,   530,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,  2756,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   281,    -1,    -1,   284,    -1,    -1,    36,
      -1,  2782,   179,    -1,    -1,    -1,    -1,    -1,    -1,    46,
     298,    -1,    -1,   301,    -1,    -1,    53,    -1,    -1,    -1,
     197,    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2840,
      -1,  2842,    -1,   240,    -1,    -1,    -1,    -1,  2849,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2859,    -1,
      -1,  2862,    -1,  2864,    -1,    -1,    -1,  2868,    -1,    -1,
    2871,  2872,    -1,    -1,  2875,  2876,    -1,    -1,    -1,    -1,
      -1,    -1,  2883,    -1,   281,    -1,    -1,   284,    -1,    -1,
      -1,  2892,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
      -1,   298,    -1,    -1,   301,    -1,  2907,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,
      -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,    24,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     197,    -1,    -1,    -1,  2945,   202,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    81,    -1,    -1,    -1,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    -1,    -1,   513,   403,    -1,   516,   517,
     518,    -1,   520,   521,   522,   523,   524,   525,    -1,    -1,
      -1,    -1,   530,    -1,   281,    -1,    -1,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     147,   298,    -1,    -1,   301,    -1,    -1,    -1,    -1,    -1,
     157,    -1,   147,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   157,    -1,   171,    -1,    -1,    -1,    -1,   176,
      -1,    -1,    -1,    -1,    -1,    -1,   171,    -1,    -1,    -1,
      -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3091,  3092,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   206,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   206,    -1,    -1,    -1,    -1,   513,  3118,  3119,   516,
     517,   518,    -1,   520,   521,   522,   523,   524,   525,    -1,
      -1,    -1,    -1,   530,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3142,    -1,   250,    -1,  3146,   403,   254,  3149,  3150,
    3151,    -1,    -1,  3154,    -1,   250,  3157,  3158,    -1,   254,
     267,    -1,    -1,    -1,    -1,  3166,    -1,    -1,    -1,    -1,
      -1,    -1,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3207,    -1,    -1,    -1,
      -1,    -1,  3213,    -1,    -1,   322,    -1,    -1,    -1,    -1,
      -1,   328,    -1,    -1,    -1,  3226,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   328,    -1,    -1,    -1,   344,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   344,
      -1,    -1,    -1,    -1,    -1,    -1,   513,    -1,    -1,   516,
     517,   518,    -1,   520,   521,   522,   523,   524,   525,    -1,
      -1,    -1,   379,   530,    -1,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,    -1,   393,   382,    -1,   396,
      -1,  3292,    -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,
      -1,   396,    -1,    -1,    -1,    -1,    -1,   414,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   414,
      -1,   428,    -1,    -1,    -1,  3326,  3327,  3328,    -1,   436,
     437,    -1,    -1,   428,    -1,    -1,    -1,    -1,    -1,    -1,
     447,    -1,   437,    -1,    -1,  3346,   453,    -1,    -1,    -1,
      -1,    -1,   447,    -1,    -1,    -1,    -1,  3358,   453,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   481,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   481,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3427,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3436,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3461,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3496,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,  3539,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,  3605,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,    -1,   175,
     176,   177,   178,   179,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,    -1,   294,   295,
      -1,    -1,   298,   299,   300,    -1,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,    -1,    -1,
      -1,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
      -1,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,    -1,   429,   430,   431,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,    -1,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,    -1,    -1,   460,   461,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,    -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,   522,    -1,    -1,    -1,
      -1,   527,    -1,   529,    -1,    -1,    -1,   533,    -1,    -1,
     536,   537,   538,   539,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,    -1,   294,   295,    -1,    -1,   298,
     299,   300,    -1,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,    -1,    -1,    -1,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,    -1,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,    -1,
     429,   430,   431,    -1,   433,   434,   435,   436,   437,    -1,
     439,   440,   441,    -1,    -1,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,   460,   461,   462,    -1,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,    -1,    -1,
     489,    -1,    -1,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,   522,    -1,    -1,    -1,    -1,   527,    -1,
     529,    -1,    -1,    -1,   533,    -1,    -1,   536,   537,   538,
     539,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,    -1,   515,    -1,    -1,    -1,    -1,   520,   521,
     522,    -1,    -1,    -1,    -1,   527,    -1,   529,   530,    -1,
      -1,   533,    -1,    -1,   536,   537,   538,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,    -1,   294,   295,
      -1,    -1,   298,   299,   300,    -1,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
      -1,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,    -1,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,    -1,    -1,   489,    -1,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,    -1,   515,
      -1,    -1,    -1,    -1,   520,   521,   522,    -1,    -1,    -1,
      -1,   527,    -1,   529,    -1,    -1,    -1,   533,    -1,    -1,
     536,   537,   538,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,    -1,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,    -1,   294,   295,    -1,    -1,   298,   299,
     300,    -1,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,    -1,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,    -1,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,    -1,    -1,   489,
      -1,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,    -1,   515,    -1,    -1,    -1,    -1,
     520,   521,   522,    -1,    -1,    -1,    -1,   527,    -1,   529,
      -1,    -1,    -1,   533,    -1,    -1,   536,   537,   538,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,   132,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
      -1,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,    -1,
     294,   295,    -1,    -1,   298,   299,   300,    -1,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
      -1,    -1,    -1,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,    -1,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,    -1,   429,   430,   431,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,    -1,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,   461,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,    -1,    -1,   489,    -1,    -1,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,    -1,    -1,    -1,   520,   521,   522,    -1,
      -1,    -1,    -1,   527,    -1,   529,   530,    -1,    -1,   533,
      -1,    -1,   536,   537,   538,     3,     4,     5,     6,     7,
      -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,    -1,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,    -1,   294,   295,    -1,    -1,
     298,   299,   300,    -1,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,   429,   430,   431,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,    -1,
      -1,   489,    -1,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,    -1,    -1,   515,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   527,
      -1,   529,    -1,    -1,    -1,   533,    -1,    -1,   536,   537,
     538,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,    -1,   429,   430,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,
     522,    -1,    -1,    -1,    -1,   527,    -1,   529,    -1,    -1,
      -1,   533,    -1,    -1,   536,   537,   538,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,    -1,   175,
     176,   177,   178,   179,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,    -1,   294,   295,
      -1,    -1,   298,   299,   300,    -1,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,    -1,    -1,
      -1,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
      -1,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,    -1,   429,   430,   431,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,    -1,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,    -1,    -1,   460,   461,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,    -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,   522,    -1,    -1,    -1,
      -1,   527,    -1,   529,    -1,    -1,    -1,   533,    -1,    -1,
     536,   537,   538,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,    -1,   175,   176,   177,   178,   179,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,    -1,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,    -1,   294,   295,    -1,    -1,   298,   299,
     300,    -1,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,    -1,    -1,    -1,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,    -1,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,    -1,   429,
     430,   431,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,    -1,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,
     460,   461,   462,    -1,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,    -1,    -1,   489,
      -1,    -1,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,   522,    -1,    -1,    -1,    -1,   527,    -1,   529,
     530,    -1,    -1,   533,    -1,    -1,   536,   537,   538,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
      -1,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,    -1,
     294,   295,    -1,    -1,   298,   299,   300,    -1,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
      -1,    -1,    -1,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,    -1,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,    -1,   429,   430,   431,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,    -1,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,   461,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,    -1,    -1,   489,    -1,    -1,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,    -1,    -1,    -1,   520,   521,   522,    -1,
      -1,    -1,    -1,   527,    -1,   529,    -1,    -1,    -1,   533,
      -1,    -1,   536,   537,   538,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,    -1,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,    -1,   294,   295,    -1,    -1,
     298,   299,   300,    -1,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
      -1,   429,   430,   431,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,   461,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,    -1,   520,   521,   522,    -1,    -1,    -1,    -1,   527,
      -1,   529,   530,    -1,    -1,   533,    -1,    -1,   536,   537,
     538,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,    -1,   175,   176,   177,   178,   179,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,    -1,   429,   430,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,
     522,    -1,    -1,    -1,    -1,   527,    -1,   529,    -1,    -1,
      -1,   533,    -1,    -1,   536,   537,   538,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,    -1,   175,
     176,   177,   178,   179,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,    -1,   294,   295,
      -1,    -1,   298,   299,   300,    -1,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,    -1,    -1,
      -1,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
      -1,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,    -1,   429,   430,   431,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,    -1,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,    -1,    -1,   460,   461,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,    -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,   522,    -1,    -1,    -1,
      -1,   527,    -1,   529,    -1,    -1,    -1,   533,    -1,    -1,
     536,   537,   538,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,    -1,   175,   176,   177,   178,   179,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,    -1,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,    -1,   294,   295,    -1,    -1,   298,   299,
     300,    -1,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,    -1,    -1,    -1,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,    -1,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,    -1,   429,
     430,   431,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,    -1,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,
     460,   461,   462,    -1,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,    -1,    -1,   489,
      -1,    -1,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,   522,    -1,    -1,    -1,    -1,   527,    -1,   529,
      -1,    -1,    -1,   533,    -1,    -1,   536,   537,   538,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,    -1,
     294,   295,    -1,    -1,   298,   299,   300,    -1,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
      -1,    -1,    -1,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,    -1,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,    -1,   429,   430,   431,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,    -1,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,   461,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,    -1,    -1,   489,    -1,    -1,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,    -1,    -1,    -1,   520,   521,   522,    -1,
      -1,    -1,    -1,   527,    -1,   529,    -1,    -1,    -1,   533,
      -1,    -1,   536,   537,   538,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,    -1,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,    -1,   294,   295,    -1,    -1,
     298,   299,   300,    -1,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
      -1,   429,   430,   431,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,   461,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,    -1,   520,   521,   522,    -1,    -1,    -1,    -1,   527,
      -1,   529,   530,    -1,    -1,   533,    -1,    -1,   536,   537,
     538,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,    -1,   175,   176,   177,   178,   179,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,
     522,    -1,    -1,    -1,    -1,   527,    -1,   529,    -1,    -1,
      -1,   533,    -1,    -1,   536,   537,   538,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,    -1,   175,
     176,   177,   178,   179,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,    -1,   294,   295,
      -1,    -1,   298,   299,   300,    -1,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,    -1,    -1,
      -1,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
      -1,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,    -1,   429,   430,   431,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,    -1,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,    -1,    -1,   460,   461,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,    -1,   488,   489,    -1,    -1,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,   522,    -1,    -1,    -1,
      -1,   527,    -1,   529,    -1,    -1,    -1,   533,    -1,    -1,
     536,   537,   538,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,    -1,   175,   176,   177,   178,   179,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,    -1,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,    -1,   294,   295,    -1,    -1,   298,   299,
     300,    -1,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,    -1,    -1,    -1,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,    -1,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,    -1,   429,
     430,   431,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,    -1,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,
     460,   461,   462,    -1,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,    -1,    -1,   489,
      -1,    -1,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,   522,    -1,    -1,    -1,    -1,   527,    -1,   529,
      -1,    -1,    -1,   533,    -1,    -1,   536,   537,   538,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
      -1,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,    -1,
     294,   295,    -1,    -1,   298,   299,   300,    -1,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
      -1,    -1,    -1,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,    -1,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,    -1,   429,   430,   431,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,    -1,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,   461,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,    -1,    -1,   489,    -1,    -1,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,    -1,    -1,    -1,   520,   521,   522,    -1,
      -1,    -1,    -1,   527,    -1,   529,    -1,    -1,    -1,   533,
      -1,    -1,   536,   537,   538,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,    -1,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,    -1,   294,   295,    -1,    -1,
     298,   299,   300,    -1,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
      -1,   429,   430,   431,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,   461,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,    -1,   520,   521,   522,    -1,    -1,    -1,    -1,   527,
      -1,   529,    -1,    -1,    -1,   533,    -1,    -1,   536,   537,
     538,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,    -1,   175,   176,   177,   178,   179,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,    -1,   429,   430,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,
     522,    -1,    -1,    -1,    -1,   527,    -1,   529,    -1,    -1,
      -1,   533,    -1,    -1,   536,   537,   538,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,    -1,   175,
     176,   177,   178,   179,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,    -1,   294,   295,
      -1,    -1,   298,   299,   300,    -1,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,    -1,    -1,
      -1,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
      -1,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,    -1,   429,   430,   431,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,    -1,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,    -1,    -1,   460,   461,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,    -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,   522,    -1,    -1,    -1,
      -1,   527,    -1,   529,    -1,    -1,    -1,   533,    -1,    -1,
     536,   537,   538,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,    -1,   175,   176,   177,   178,   179,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,    -1,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,    -1,   294,   295,    -1,    -1,   298,   299,
     300,    -1,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,    -1,    -1,    -1,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,    -1,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,    -1,   429,
     430,   431,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,    -1,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,
     460,   461,   462,    -1,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,    -1,    -1,   489,
      -1,    -1,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,   522,    -1,    -1,    -1,    -1,   527,    -1,   529,
      -1,    -1,    -1,   533,    -1,    -1,   536,   537,   538,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
      -1,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,    -1,
     294,   295,    -1,    -1,   298,   299,   300,    -1,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
      -1,    -1,    -1,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,    -1,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,    -1,   429,   430,   431,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,    -1,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,   461,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,    -1,    -1,   489,    -1,    -1,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,    -1,    -1,    -1,   520,   521,   522,    -1,
      -1,    -1,    -1,   527,    -1,   529,    -1,    -1,    -1,   533,
      -1,    -1,   536,   537,   538,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,    -1,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,    -1,   294,   295,    -1,    -1,
     298,   299,   300,    -1,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
      -1,   429,   430,   431,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,   461,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,    -1,   520,   521,   522,    -1,    -1,    -1,    -1,   527,
      -1,   529,    -1,    -1,    -1,   533,    -1,    -1,   536,   537,
     538,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,    -1,   175,   176,   177,   178,   179,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,    -1,   429,   430,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,
     522,    -1,    -1,    -1,    -1,   527,    -1,   529,    -1,    -1,
      -1,   533,    -1,    -1,   536,   537,   538,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,    -1,   175,
     176,   177,   178,   179,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,    -1,   294,   295,
      -1,    -1,   298,   299,   300,    -1,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,    -1,    -1,
      -1,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
      -1,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,    -1,   429,   430,   431,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,    -1,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,    -1,    -1,   460,   461,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,    -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,   522,    -1,    -1,    -1,
      -1,   527,    -1,   529,    -1,    -1,    -1,   533,    -1,    -1,
     536,   537,   538,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,    -1,   175,   176,   177,   178,   179,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,    -1,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,    -1,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,    -1,   294,   295,    -1,    -1,   298,   299,
     300,    -1,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,    -1,    -1,    -1,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,    -1,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,    -1,   429,
     430,   431,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,    -1,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,
     460,   461,   462,    -1,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,    -1,    -1,   489,
      -1,    -1,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,    -1,    -1,    -1,    -1,   527,    -1,   529,
      -1,    -1,    -1,   533,    -1,    -1,   536,   537,   538,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
      -1,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,    -1,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,    -1,   282,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,    -1,
     294,   295,    -1,    -1,   298,   299,   300,    -1,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
      -1,    -1,    -1,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,    -1,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,    -1,   429,   430,   431,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,    -1,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,   461,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,    -1,    -1,   489,    -1,    -1,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,    -1,    -1,    -1,   520,   521,   522,    -1,
      -1,    -1,    -1,   527,    -1,   529,    -1,    -1,    -1,   533,
      -1,    -1,   536,   537,   538,     3,     4,     5,     6,     7,
      -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,    -1,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,    -1,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,    -1,   294,   295,    -1,    -1,
     298,   299,   300,    -1,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
      -1,   429,   430,   431,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,   461,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,   521,    -1,    -1,    -1,    -1,    -1,   527,
      -1,   529,    -1,    -1,    -1,   533,    -1,    -1,   536,   537,
     538,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,    -1,   175,   176,   177,   178,   179,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,    -1,   429,   430,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,
      -1,    -1,    -1,    -1,    -1,   527,    -1,   529,    -1,    -1,
      -1,   533,    -1,    -1,   536,   537,   538,     3,     4,     5,
       6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,    -1,   175,
     176,   177,   178,   179,   180,    -1,    -1,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,    -1,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,    -1,   294,   295,
      -1,    -1,   298,   299,   300,    -1,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,    -1,    -1,
      -1,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
      -1,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,    -1,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,    -1,   429,   430,   431,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,    -1,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,    -1,    -1,   460,   461,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,    -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   527,    -1,   529,    -1,    -1,    -1,   533,    -1,    -1,
     536,   537,   538,     3,     4,     5,     6,     7,    -1,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,    -1,   175,   176,   177,   178,   179,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,    -1,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,    -1,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,    -1,   294,   295,    -1,    -1,   298,   299,
     300,    -1,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,    -1,    -1,    -1,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,    -1,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,    -1,    -1,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,    -1,   429,
     430,   431,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,    -1,    -1,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,
     460,   461,   462,    -1,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,    -1,    -1,   489,
      -1,    -1,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   527,    -1,   529,
      -1,    -1,    -1,   533,    -1,    -1,   536,   537,   538,     3,
       4,     5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
      -1,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,    -1,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,    -1,
     294,   295,    -1,    -1,   298,   299,   300,    -1,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
      -1,    -1,    -1,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,    -1,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,    -1,   429,   430,   431,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,    -1,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,   461,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,    -1,    -1,   489,    -1,    -1,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   527,    -1,   529,    -1,    -1,    -1,   533,
      -1,    -1,   536,   537,   538,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,    -1,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,    -1,   175,   176,   177,
     178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,    -1,    -1,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,    -1,   282,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,    -1,   294,   295,    -1,    -1,
     298,   299,   300,    -1,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
      -1,   429,   430,   431,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,   461,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,   521,   522,     3,    -1,    -1,    -1,   527,
      -1,   529,    10,    -1,    -1,   533,    -1,    -1,   536,   537,
     538,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,    -1,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,    -1,   282,   283,   284,   285,    -1,   287,
     288,   289,   290,   291,   292,    -1,   294,   295,    -1,    -1,
     298,   299,   300,    -1,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
      -1,   429,   430,   431,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,   461,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,     4,     5,    -1,    -1,    -1,     9,   527,
      -1,   529,    -1,    -1,    -1,   533,    -1,    -1,   536,   537,
     538,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
      -1,   222,    -1,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
      -1,   282,   283,   284,   285,    -1,   287,   288,   289,   290,
     291,   292,    -1,   294,   295,   296,    -1,   298,   299,   300,
      -1,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,    -1,    -1,    -1,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,    -1,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,    -1,   429,   430,
     431,    -1,   433,   434,   435,   436,   437,    -1,   439,   440,
     441,    -1,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,
     461,   462,    -1,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,    -1,    -1,     3,    -1,    -1,    -1,    -1,   520,
     521,   522,    -1,    -1,    -1,    -1,   527,    -1,   529,    -1,
      -1,    -1,   533,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,    -1,   164,   165,   166,   167,   168,
     169,   170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,
      -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,    -1,   227,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
     279,   280,    -1,   282,   283,    -1,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,    -1,    -1,   298,
     299,   300,    -1,   302,   303,   304,   305,    -1,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,    -1,    -1,    -1,   327,   328,
     329,    -1,   331,   332,   333,    -1,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,    -1,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,   407,    -1,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,    -1,
     429,    -1,   431,    -1,   433,   434,   435,   436,   437,    -1,
     439,   440,   441,    -1,    -1,   444,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,   456,   457,   458,
      -1,   460,   461,   462,    -1,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,    -1,   478,
      -1,   480,   481,   482,   483,   484,   485,   486,    -1,    -1,
     489,    -1,    -1,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   530,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,
      -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
     279,   280,    -1,   282,   283,    -1,   285,    -1,   287,   288,
     289,   290,   291,   292,    -1,   294,   295,    -1,    -1,   298,
     299,   300,    -1,    -1,   303,   304,   305,    -1,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,    -1,    -1,    -1,   327,   328,
     329,    -1,   331,   332,   333,    -1,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,    -1,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,   407,    -1,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,    -1,
     429,    -1,   431,    -1,   433,   434,   435,   436,   437,    -1,
     439,   440,   441,    -1,    -1,   444,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,   460,   461,   462,    -1,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,    -1,   478,
      -1,   480,   481,   482,   483,   484,   485,   486,    -1,    -1,
     489,    -1,    -1,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     529,   530,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,    -1,   237,   238,
     239,   240,    -1,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,    -1,   282,   283,   284,   285,    -1,   287,   288,
     289,   290,   291,   292,    -1,   294,   295,    -1,   297,   298,
     299,   300,    -1,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,    -1,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
     429,   430,   431,    -1,   433,   434,   435,   436,   437,    -1,
     439,   440,   441,    -1,    -1,   444,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,    -1,    -1,
     489,    -1,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,     3,    -1,   515,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     529,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    34,    35,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,    -1,   282,   283,   284,   285,    -1,   287,   288,
     289,   290,   291,   292,    -1,   294,   295,    -1,    -1,   298,
     299,   300,    -1,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,    -1,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
     429,   430,   431,    -1,   433,   434,   435,   436,   437,    -1,
     439,   440,   441,    -1,    -1,   444,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,    -1,    -1,
     489,    -1,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,    -1,     3,   515,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     529,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,    -1,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    -1,   237,
     238,   239,   240,    -1,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,    -1,   282,   283,   284,   285,    -1,   287,
     288,   289,   290,   291,   292,    -1,   294,   295,    -1,   297,
     298,   299,   300,    -1,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
      -1,   429,   430,   431,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,   461,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   529,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,    -1,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,    -1,   282,   283,   284,   285,    -1,   287,
     288,   289,   290,   291,   292,    -1,   294,   295,    -1,    -1,
     298,   299,   300,    -1,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
      -1,   429,   430,   431,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,   461,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   529,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,    -1,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,    -1,   282,   283,   284,   285,    -1,   287,
     288,   289,   290,   291,   292,    -1,   294,   295,    -1,    -1,
     298,   299,   300,    -1,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,    -1,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
      -1,   429,   430,   431,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,   461,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   529,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,    -1,   174,    -1,   176,   177,
     178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,
      -1,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,   279,   280,    -1,   282,   283,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,    -1,   294,   295,    -1,    -1,
     298,   299,   300,    -1,    -1,   303,   304,   305,    -1,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,    -1,   331,   332,   333,    -1,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,   429,    -1,   431,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,    -1,
      -1,   489,    -1,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,     3,    -1,   515,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   529,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,    -1,   174,    -1,   176,   177,
     178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,
      -1,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,   279,   280,    -1,   282,   283,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,    -1,   294,   295,    -1,    -1,
     298,   299,   300,    -1,    -1,   303,   304,   305,    -1,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,    -1,   331,   332,   333,    -1,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
     428,   429,    -1,   431,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,    -1,
      -1,   489,    -1,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,     3,    -1,   515,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   529,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,    -1,   174,    -1,   176,   177,
     178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,
      -1,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,   279,   280,    -1,   282,   283,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,    -1,   294,   295,    -1,    -1,
     298,   299,   300,    -1,    -1,   303,   304,   305,    -1,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,    -1,   331,   332,   333,    -1,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
     428,   429,    -1,   431,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,    -1,
      -1,   489,    -1,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,    -1,     3,   515,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   529,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   529,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   529,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   529,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   529,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   529,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   529,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   529,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   529,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,    -1,     3,     4,     5,
      -1,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    15,
      16,    -1,   529,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,    -1,   154,   155,
     156,   157,   158,   159,    -1,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,    -1,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
      -1,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,    -1,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   509,   510,   511,   512,    -1,     3,    -1,
     516,   517,   518,     8,   520,   521,   522,   523,   524,   525,
      15,    16,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,    -1,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,
      -1,   176,   177,   178,    -1,   180,    -1,    -1,   183,    -1,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,   222,    -1,   224,
      -1,    -1,   227,    -1,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,    -1,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,    -1,
     275,   276,   277,   278,   279,   280,    -1,   282,   283,    -1,
     285,    -1,   287,   288,   289,   290,   291,   292,    -1,   294,
     295,    -1,    -1,   298,   299,   300,    -1,    -1,   303,   304,
     305,    -1,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,    -1,
      -1,    -1,   327,   328,   329,    -1,   331,   332,   333,    -1,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,    -1,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,    -1,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,   407,    -1,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,    -1,   429,    -1,   431,    -1,   433,   434,
     435,   436,   437,    -1,   439,   440,   441,    -1,    -1,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,   457,    -1,    -1,   460,   461,   462,    -1,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,    -1,   478,    -1,   480,   481,   482,   483,   484,
     485,   486,    -1,    -1,   489,    -1,    -1,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,    -1,    -1,
      -1,   516,   517,   518,    -1,   520,   521,   522,   523,   524,
     525,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    36,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,
      -1,     8,    -1,    80,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    80,    11,    -1,    -1,    36,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,     8,   179,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
     197,    -1,    -1,    -1,   179,   202,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,   197,    -1,    -1,    -1,    53,   202,   225,   226,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,
     225,   226,   179,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,
     197,    -1,    -1,    -1,   179,   202,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   281,    -1,    -1,   284,    -1,    -1,
      -1,    -1,   197,    -1,    -1,    -1,    -1,   202,   225,   226,
      -1,   298,    -1,    -1,   301,    -1,   281,    -1,    -1,   284,
      -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,
     225,   226,    -1,   298,    -1,    -1,   301,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   179,    -1,   281,    -1,    -1,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     197,   298,    -1,    -1,   301,   202,   281,    -1,    -1,   284,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   298,    -1,    -1,   301,    -1,   225,   226,
      -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,     8,    -1,   240,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,   281,    -1,    53,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   298,    -1,    -1,   301,    -1,   403,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    -1,   109,   110,    -1,    -1,   113,
     114,    -1,    -1,    -1,     8,    -1,    -1,    11,   403,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   513,    -1,    -1,   516,
     517,   518,    36,   520,   521,   522,   523,   524,   525,    -1,
      -1,    -1,    46,   530,    -1,    -1,    -1,    -1,   513,    53,
      -1,   516,   517,   518,    -1,   520,   521,   522,   523,   524,
     525,    -1,    -1,    -1,    -1,   530,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,   192,   193,
      -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,    -1,   179,    -1,    -1,    -1,   513,    -1,    -1,   516,
     517,   518,    -1,   520,   521,   522,   523,   524,   525,    -1,
     197,    -1,    -1,   530,    -1,   202,    -1,    -1,   513,    -1,
      -1,   516,   517,   518,    -1,   520,   521,   522,   523,   524,
     525,    -1,    -1,    -1,    -1,   530,    -1,    -1,   225,   226,
      -1,    -1,    -1,   257,   258,   259,   260,   261,   262,   263,
     264,    -1,    -1,   240,   268,   269,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,   179,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,   197,   281,    -1,   513,   284,   202,   516,
     517,   518,    36,   520,   521,   522,   523,   524,   525,    -1,
      -1,   298,    46,   530,   301,    -1,    -1,    -1,    -1,    53,
      -1,   225,   226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   346,   347,    -1,    -1,   240,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   387,   388,    -1,    -1,   281,    -1,    36,
     284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,   298,    -1,    53,   301,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,     8,    -1,    80,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,   197,    -1,    -1,    53,    -1,   202,    -1,
      -1,   485,   486,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,   225,   226,    80,    -1,   509,   510,    -1,    -1,   403,
      -1,    -1,    36,    -1,    -1,    -1,   240,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,
      -1,    -1,   179,    -1,    -1,    -1,   513,    -1,    -1,   516,
     517,   518,    -1,   520,   521,   522,   523,   524,   525,    -1,
     197,    -1,    -1,   530,    -1,   202,    80,   281,    -1,    -1,
     284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   298,    -1,    -1,   301,   225,   226,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,
     197,    -1,   516,   517,   518,   202,   520,   521,   522,   523,
     524,   525,    -1,    -1,   281,    -1,   530,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   225,   226,
      -1,   298,    -1,    -1,   301,   179,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,   202,   403,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   225,   226,    -1,   281,    -1,    -1,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,
      -1,   298,    -1,    -1,   301,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   403,   281,    -1,    -1,
     284,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,   298,    -1,    -1,   301,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,
      -1,    -1,   516,   517,   518,    -1,   520,   521,   522,   523,
     524,   525,    -1,    -1,    -1,    80,   530,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   513,    -1,    -1,   516,
     517,   518,    36,   520,   521,   522,   523,   524,   525,   403,
      -1,    -1,    46,   530,    -1,    -1,    -1,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,   197,    -1,    -1,    -1,    -1,   202,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   513,    -1,    -1,   516,
     517,   518,    -1,   520,   521,   522,   523,   524,   525,    -1,
     225,   226,    -1,   530,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    -1,   513,
      -1,    -1,   516,   517,   518,    -1,   520,   521,   522,   523,
     524,   525,    -1,    -1,   528,    52,   281,    -1,    -1,   284,
      -1,    -1,    -1,    -1,    61,   179,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   298,    -1,    -1,   301,    -1,    75,    -1,
      -1,    -1,    -1,   197,    -1,    -1,    -1,     8,   202,    86,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    98,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   225,   226,    -1,   111,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,   240,    -1,    -1,   126,
     127,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     137,    -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,    -1,    -1,
     284,    -1,    -1,   170,    -1,    -1,    -1,   174,   403,    -1,
      -1,    -1,    -1,    -1,   298,    -1,    -1,   301,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   179,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
      -1,   202,    -1,    -1,    -1,    -1,    -1,    -1,   513,   403,
      -1,   516,   517,   518,    -1,   520,   521,   522,   523,   524,
     525,    -1,    -1,   528,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,
      -1,    -1,    -1,    -1,    -1,    -1,   323,   324,   325,    -1,
      -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,   335,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     281,    -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,   366,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,   375,    -1,
     301,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,   513,
      -1,   398,   516,   517,   518,   402,   520,   521,   522,   523,
     524,   525,    -1,    -1,   528,   412,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   424,    -1,    -1,
      -1,   428,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   450,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   463,    -1,    -1,    -1,
      -1,    -1,   469,    -1,    -1,    -1,    -1,   474,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   491,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,   513,    -1,    -1,   516,   517,   518,    -1,   520,
     521,   522,   523,   524,   525,    -1,    -1,   528,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   522,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,    -1,
      -1,    -1,   176,   177,   178,    -1,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,    -1,    -1,   227,    -1,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,   277,   278,   279,   280,    -1,   282,   283,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,    -1,
     294,   295,    -1,    -1,   298,   299,   300,    -1,    -1,   303,
     304,   305,    -1,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
      -1,    -1,    -1,   327,   328,   329,    -1,   331,   332,   333,
      -1,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,    -1,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,    -1,   429,    -1,   431,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,    -1,    -1,
     444,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,   461,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,    -1,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,    -1,    -1,   489,    -1,    -1,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   522,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,    -1,
      -1,    -1,   176,   177,   178,    -1,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,    -1,    -1,   227,    -1,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,   277,   278,   279,   280,    -1,   282,   283,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,    -1,
     294,   295,    -1,    -1,   298,   299,   300,    -1,    -1,   303,
     304,   305,    -1,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
      -1,    -1,    -1,   327,   328,   329,    -1,   331,   332,   333,
      -1,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,    -1,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,    -1,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,    -1,   429,    -1,   431,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,    -1,    -1,
     444,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,   461,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,    -1,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,    -1,    -1,   489,    -1,    -1,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,     3,
       4,     5,    -1,    -1,    -1,     9,    -1,    -1,   522,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
      -1,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,    -1,   282,   283,
     284,   285,    -1,   287,   288,   289,   290,   291,   292,    -1,
     294,   295,   296,    -1,   298,   299,   300,    -1,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
      -1,    -1,    -1,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,    -1,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,    -1,   429,   430,   431,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,    -1,    -1,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,   461,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,    -1,    -1,   489,    -1,    -1,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    -1,
      -1,     8,    -1,    -1,    11,    -1,   520,   521,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    46,
       8,    -1,    -1,    11,    -1,    -1,    53,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    46,     8,
      -1,    -1,    11,    -1,    -1,    53,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    46,    -1,   126,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      -1,    -1,   179,    53,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
     197,    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,
      80,   169,    -1,    -1,    36,    -1,   174,    -1,    -1,    -1,
      -1,   179,    -1,    -1,    46,    -1,    -1,    -1,   225,   226,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,
      -1,    -1,    -1,   240,   202,    -1,    -1,    -1,    -1,   168,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
     179,    -1,    -1,    -1,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,
      -1,    -1,   240,   202,   281,    -1,    -1,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   298,    -1,    -1,   301,    -1,   225,   226,    -1,   179,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   240,    -1,   281,    -1,    -1,   284,   197,    -1,    -1,
      -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     298,    -1,    -1,   301,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   225,   226,   179,    -1,    -1,
      -1,    -1,   281,    -1,    -1,   284,    -1,    -1,    -1,    -1,
     240,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   298,
     202,    -1,   301,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   225,   226,    -1,   403,    -1,    -1,    -1,
      -1,   281,    -1,   332,   284,    -1,    -1,    -1,   240,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,    -1,
      -1,   301,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,   403,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,   281,
      -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,   468,    40,    -1,    -1,    -1,   298,    -1,    46,   301,
      -1,    -1,    -1,    -1,   403,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,   513,    -1,    -1,   516,
     517,   518,    -1,   520,   521,   522,   523,   524,   525,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,   513,    -1,    -1,   516,   517,
     518,    -1,   520,   521,   522,   523,   524,   525,    36,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,   403,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   513,    -1,    -1,   516,   517,   518,
      -1,   520,   521,   522,   523,   524,   525,    -1,    -1,    -1,
      -1,   179,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,
      -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   513,    -1,    -1,   516,   517,   518,    -1,
     520,   521,   522,   523,   524,   525,    -1,   225,   226,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   513,    -1,    -1,   516,   517,   518,    -1,   520,   521,
     522,   523,   524,   525,    -1,    -1,   174,    -1,    -1,    -1,
      -1,   179,    -1,   281,     8,    -1,   284,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   197,
     298,    -1,    -1,   301,   202,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    -1,    46,     8,    -1,    -1,    11,   225,   226,    53,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   281,    -1,    -1,   284,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
     298,    -1,    -1,   301,    -1,   403,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,   179,    53,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,   197,    -1,    -1,    -1,    -1,   202,    -1,
      -1,    -1,    -1,    80,   169,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,   179,    -1,    -1,    46,    -1,    -1,
      -1,   225,   226,    -1,    53,   403,    -1,    -1,    -1,    -1,
      -1,    -1,   197,    -1,    -1,   513,   240,   202,   516,   517,
     518,    -1,   520,   521,   522,   523,   524,   525,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   240,    -1,   281,    -1,    -1,
     284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   298,    -1,    -1,   301,    -1,    -1,
      -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   281,    -1,    -1,   284,
     197,    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   298,    -1,   513,   301,    -1,   516,   517,
     518,    -1,   520,   521,   522,   523,   524,   525,   225,   226,
     179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,   197,    -1,
      -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,   225,   226,    -1,   403,
      -1,    -1,    -1,    -1,   281,    -1,    36,   284,    -1,    -1,
      -1,   240,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      -1,   298,    -1,    53,   301,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,   403,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      80,    -1,   281,    -1,    -1,   284,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,
      46,    -1,   301,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,   513,
      -1,    -1,   516,   517,   518,    -1,   520,   521,   522,   523,
     524,   525,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,   179,
      -1,   516,   517,   518,    -1,   520,   521,   522,   523,   524,
     525,   438,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,
       8,    -1,   202,    11,   403,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   225,   226,    -1,    36,    -1,
      -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,    46,    -1,
     240,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,   197,    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   513,    -1,    -1,   516,
     517,   518,    80,   520,   521,   522,   523,   524,   525,   225,
     226,   281,    -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,   298,    -1,
      -1,   301,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   513,    -1,    -1,   516,   517,   518,
      -1,   520,   521,   522,   523,   524,   525,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   281,    -1,     8,   284,    -1,
      11,    -1,    -1,    -1,    15,    16,    -1,    -1,    19,    20,
      21,    -1,   298,    -1,    -1,   301,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,   179,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,   197,
      -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   281,    -1,    -1,   284,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     298,    -1,    -1,   301,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   179,    -1,
      -1,    -1,    -1,   513,    -1,    -1,   516,   517,   518,    -1,
     520,   521,   522,   523,   524,   525,   197,    -1,    -1,    -1,
      -1,   202,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,    -1,   240,
     516,   517,   518,    -1,   520,   521,   522,   523,   524,   525,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     281,    -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   513,    -1,    -1,   516,   517,
     518,    -1,   520,   521,   522,   523,   524,   525,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,     5,    -1,
      -1,    -1,   513,    -1,    -1,   516,   517,   518,    -1,   520,
     521,   522,   523,   524,   525,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,   284,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,   296,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,   430,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    34,    35,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,   284,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,   430,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,   284,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,   430,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,   284,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,   430,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    -1,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,   171,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,   171,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,   240,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    34,    35,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
     297,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
     297,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
     297,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,     4,    -1,    -1,
      -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    40,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    -1,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,    -1,   154,   155,   156,
     157,   158,   159,    -1,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,   212,    -1,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,    -1,   282,   283,   284,   285,    -1,
      -1,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,    -1,   330,   331,   332,    -1,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,    -1,    -1,    -1,   426,
     427,    -1,   429,   430,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,    -1,
     447,    -1,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,   458,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,    -1,   475,   476,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,    -1,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,    -1,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,    -1,   429,    -1,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,    -1,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,    -1,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,    -1,   429,    -1,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,    -1,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,    -1,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,    -1,   429,    -1,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,    -1,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,    -1,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,    -1,   429,    -1,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,    -1,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,    -1,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,    -1,   429,    -1,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,    -1,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,    -1,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,    -1,   429,    -1,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,    -1,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,    -1,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,    -1,   429,    -1,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,    -1,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,    -1,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
      -1,    -1,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,    -1,   429,    -1,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,    -1,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,    -1,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,    -1,   429,    -1,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,    -1,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,    -1,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,    -1,   429,    -1,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,   305,    -1,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,   329,    -1,   331,
     332,   333,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,    -1,   429,    -1,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    -1,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,    -1,   154,   155,   156,   157,   158,   159,    -1,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,    -1,   175,   176,   177,    -1,   179,   180,    -1,
      -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,    -1,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,    -1,
     282,   283,   284,   285,    -1,    -1,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,    -1,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,    -1,   330,   331,
     332,    -1,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,    -1,   426,   427,    -1,   429,   430,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,    -1,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   509,   510,   511,
     512,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    -1,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,    -1,   154,   155,   156,
     157,   158,   159,    -1,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,    -1,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,   212,    -1,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,    -1,   282,   283,   284,   285,    -1,
      -1,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,    -1,   330,   331,   332,    -1,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,    -1,    -1,    -1,   426,
     427,    -1,   429,   430,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,    -1,
     447,    -1,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,   458,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,    -1,   475,   476,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    -1,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,    -1,   154,   155,   156,   157,   158,   159,    -1,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,    -1,   175,   176,   177,   178,   179,   180,    -1,
      -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,    -1,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,    -1,
     282,   283,   284,   285,    -1,    -1,   288,   289,   290,   291,
     292,    -1,   294,   295,    -1,    -1,   298,   299,   300,    -1,
      -1,   303,   304,    -1,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,    -1,   330,   331,
     332,    -1,    -1,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,    -1,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,    -1,   426,   427,    -1,   429,   430,   431,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
      -1,    -1,   444,   445,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,   461,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,    -1,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   509,   510,   511,
     512,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
      -1,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,   305,    -1,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,    -1,   374,   375,   376,
     377,    -1,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,    -1,   429,    -1,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    -1,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,    -1,   154,   155,   156,
     157,   158,   159,    -1,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,    -1,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,   212,    -1,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,    -1,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,    -1,   282,   283,   284,   285,    -1,
      -1,   288,   289,   290,   291,   292,    -1,   294,   295,    -1,
      -1,   298,   299,   300,    -1,    -1,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,    -1,    -1,    -1,
     327,   328,    -1,   330,   331,   332,    -1,    -1,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
      -1,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,    -1,    -1,    -1,   426,
     427,    -1,   429,   430,   431,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,    -1,    -1,   444,   445,    -1,
     447,    -1,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,   461,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,    -1,   475,   476,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,    22,   489,    -1,    -1,   492,   493,   494,   495,   496,
     497,    32,    -1,    34,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   126,   127,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,    -1,    -1,   144,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   170,
      -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   244,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,    -1,
     331,    -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,   398,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   412,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   450,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   463,    -1,    -1,    -1,    -1,    -1,   469,    -1,
      -1,    -1,    -1,   474,    -1,    -1,    -1,    -1,   479,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   529
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    32,    34,    35,    47,    52,    61,    75,    84,
      86,    98,   100,   111,   126,   127,   128,   137,   144,   152,
     154,   155,   170,   174,   201,   244,   323,   324,   325,   331,
     335,   366,   375,   391,   398,   402,   412,   424,   428,   450,
     463,   466,   469,   474,   491,   515,   529,   541,   542,   543,
     544,   545,   552,   563,   564,   565,   568,   569,   571,   582,
     600,   648,   651,   660,   668,   671,   675,   677,   680,   681,
     692,   698,   700,   704,   711,   715,   716,   717,   724,   729,
     745,   746,   749,   750,   753,   755,   756,   757,   758,   760,
     762,   763,   767,   820,   821,   994,   997,   998,   999,  1000,
    1005,  1008,  1014,  1015,  1016,  1020,   444,   494,   995,   206,
     382,   393,   428,   481,   108,   195,   566,   995,     3,    22,
      23,    24,    25,    26,    27,    28,    29,    31,    32,    33,
      42,    43,    44,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    59,    60,    61,    62,    63,
      64,    67,    68,    69,    70,    71,    72,    73,    75,    76,
      77,    78,    79,    81,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    94,    95,    96,    97,    98,    99,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   118,   120,   121,   122,
     123,   124,   125,   128,   129,   130,   131,   134,   135,   136,
     137,   138,   139,   141,   142,   143,   145,   146,   147,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   162,   165,   166,   167,   168,   170,   172,   173,   175,
     176,   177,   178,   179,   180,   183,   185,   186,   187,   188,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   203,   204,   205,   206,   207,   208,   209,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   222,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   237,   238,   239,   240,   242,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   282,   283,   284,   285,   287,   288,   289,
     290,   291,   292,   294,   295,   298,   299,   300,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   327,   328,
     329,   330,   331,   332,   333,   335,   336,   337,   339,   340,
     341,   342,   343,   344,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   403,   404,   405,   406,
     407,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   426,   427,   429,   430,
     431,   433,   434,   435,   436,   437,   439,   440,   441,   444,
     445,   446,   447,   448,   450,   451,   452,   453,   454,   455,
     456,   457,   460,   461,   462,   464,   465,   466,   467,   469,
     470,   471,   472,   473,   474,   475,   476,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   489,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   575,   685,
     686,   687,   900,   983,   987,     3,   178,   251,   421,   570,
     575,   685,   296,   995,    55,   174,   529,   595,   180,   245,
     301,   322,   382,   434,   436,   453,   459,   462,   646,   673,
     723,     5,    30,   335,   575,   576,   982,     3,    30,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    45,    49,
      53,    54,    55,    56,    57,    58,    65,    66,    71,    72,
      74,    79,    80,    81,    82,    83,    89,    93,   100,   101,
     108,   112,   115,   117,   119,   126,   127,   132,   133,   140,
     144,   148,   153,   160,   161,   163,   164,   167,   169,   171,
     173,   174,   175,   178,   179,   181,   182,   184,   185,   186,
     189,   197,   202,   210,   212,   213,   219,   220,   221,   222,
     223,   225,   226,   228,   235,   236,   238,   240,   241,   243,
     251,   273,   274,   275,   280,   281,   284,   286,   287,   289,
     293,   296,   297,   301,   302,   305,   306,   309,   310,   323,
     324,   325,   326,   329,   330,   333,   334,   338,   345,   351,
     356,   370,   373,   377,   391,   392,   399,   402,   403,   406,
     408,   421,   423,   424,   425,   428,   430,   432,   438,   440,
     441,   442,   443,   446,   448,   449,   452,   458,   459,   463,
     468,   474,   475,   477,   479,   487,   488,   490,   491,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     581,   685,   689,   691,    24,    81,    97,   147,   157,   171,
     176,   206,   250,   254,   267,   328,   344,   379,   382,   393,
     396,   414,   428,   436,   437,   447,   453,   481,   673,   693,
     694,   697,   995,   982,   100,   137,   479,   529,   544,   545,
     552,   568,   569,   582,   600,   648,   651,   660,   668,   675,
     677,   680,   681,   692,   700,   707,   711,   717,   724,   745,
     749,   750,   753,   755,   994,   997,   998,  1000,  1005,  1008,
    1014,  1020,   108,    75,    66,    79,    81,   160,   235,   287,
     297,   310,   329,   334,   378,   423,   446,   448,   452,   474,
     529,   574,   575,   576,   756,   821,   823,   825,   835,   842,
     843,   900,   902,   903,   108,     5,   575,   577,   747,   575,
     982,    30,   180,   245,   397,   440,   444,   476,   575,  1006,
    1007,  1018,   995,    30,   132,   776,   777,   180,   245,   382,
     397,   440,   476,  1009,  1010,  1018,   995,   575,   755,   767,
    1019,   575,   842,   428,   773,   574,   175,   529,  1002,   529,
     354,   768,   769,   982,   768,   756,   757,  1014,     0,   532,
     479,   705,   122,   216,   465,   217,   148,   221,   302,   458,
     779,   780,   825,   825,   756,   758,   760,   535,    30,   440,
     444,   755,  1019,   195,   574,   982,   195,   574,   195,   842,
     195,   574,   281,   577,   350,   996,   527,   531,   578,   579,
     529,    82,   108,   176,   206,   250,   267,   382,   393,   428,
     453,   481,   573,   108,   755,   574,   434,   436,   434,   436,
     364,   195,   574,   574,   176,   181,   243,   250,   354,   393,
     428,   432,   481,   658,   661,   389,   206,    30,   982,   195,
     581,   256,   447,   107,   428,   428,   481,   386,   389,   195,
     575,   695,   989,   195,   979,   982,   195,   982,   529,   703,
     301,   436,   707,     3,   474,   685,   689,   708,   710,   711,
     713,   714,   705,   575,   577,   570,   529,   529,   169,   529,
     756,   843,   529,   529,   574,   529,   529,   529,   174,   529,
     529,   529,   529,   756,   821,   825,   835,   522,   578,    40,
     575,   836,   837,   836,   391,   535,   759,    37,    42,   101,
     175,   212,   228,   238,   274,   323,   330,   373,   392,   463,
     839,   837,    40,   575,   836,   838,   515,   847,   577,   518,
     529,   529,   751,  1007,  1007,  1007,   512,   227,  1007,   531,
     296,     4,     6,     7,     8,     9,    10,    39,    54,    56,
      57,    65,    71,    72,    83,   112,   115,   117,   136,   153,
     161,   167,   185,   186,   219,   220,   222,   251,   273,   275,
     281,   286,   289,   298,   351,   377,   406,   440,   441,   449,
     475,   513,   520,   521,   522,   527,   529,   533,   536,   537,
     538,   575,   577,   756,   810,   859,   862,   865,   866,   867,
     869,   870,   871,   872,   874,   875,   891,   893,   894,   895,
     896,   897,   898,   899,   900,   901,   903,   905,   920,   921,
     932,   954,   961,   969,   970,   971,   983,   984,   985,   968,
     970,  1009,  1009,   577,  1009,   512,  1009,   174,   442,   518,
     996,   531,   578,   682,   842,     3,   173,   175,   479,   711,
    1001,  1003,   173,  1004,   891,   938,   939,   768,   535,   529,
     991,   530,   530,   530,   543,   574,   174,   301,   732,   158,
     682,   747,    30,   132,   774,   774,    59,   774,   164,   169,
     241,   293,   785,   787,   788,   813,   815,   816,   817,   184,
     296,   468,   296,   779,   780,   529,   429,  1017,   512,   227,
     153,    26,    32,   137,   300,   362,   366,   398,   471,   557,
     560,   561,   362,   153,    40,    60,   106,   205,   255,   265,
     278,   312,   362,   368,   393,   398,   412,   546,   549,   560,
     153,   362,   398,   560,   153,   362,   398,   560,   153,    40,
     567,   297,   496,   891,   962,   580,   581,   579,     3,    30,
      37,    42,    49,    55,    81,    83,    89,   101,   132,   173,
     175,   178,   179,   197,   212,   225,   226,   228,   238,   240,
     251,   274,   284,   306,   309,   330,   373,   392,   403,   421,
     430,   452,   477,   479,   530,   685,   690,   891,   941,   942,
     986,   992,   891,   428,   574,   575,   530,   529,   635,   382,
     646,   673,   281,   669,    40,   481,   195,   574,   195,   574,
     650,   195,   574,   195,   574,   267,   195,   575,   672,    89,
     720,   153,   495,    90,   129,   315,   435,   195,   575,   153,
     531,   990,    63,   369,   535,   696,   153,   535,   696,   153,
     296,   701,   702,   891,   992,   364,   530,   535,     4,   161,
     296,   449,   520,   521,   548,   551,   577,   706,   708,   709,
     712,   985,   707,   442,   529,   590,   594,   891,   939,   529,
       3,    68,    69,   109,   110,   113,   114,   192,   193,   257,
     258,   259,   260,   261,   262,   263,   264,   268,   269,   346,
     347,   387,   388,   485,   486,   509,   510,   577,   877,   878,
     879,   880,   881,   882,   883,   884,   885,   886,   887,   888,
     889,   944,   945,   837,   838,   891,   574,   891,   946,   520,
     521,   575,   892,   893,   921,   932,   948,   574,   529,   891,
     938,   949,   891,    58,   174,   236,   443,   891,   939,   952,
     891,   530,   576,   529,   430,   793,   794,   794,   776,   777,
     825,   223,   771,    37,   228,   392,   839,   228,   306,   840,
     825,   840,   228,   839,   529,   228,   840,   149,   203,   827,
     228,   794,   529,   576,   529,   794,   303,   891,  1011,  1013,
     941,     3,    37,    42,    49,    54,    55,    56,    57,    71,
      72,    81,    83,    89,   101,   112,   115,   167,   173,   175,
     179,   197,   212,   219,   220,   222,   225,   226,   228,   238,
     240,   251,   273,   274,   275,   284,   289,   306,   309,   330,
     351,   373,   377,   392,   399,   403,   406,   421,   430,   440,
     441,   452,   458,   475,   479,   685,   688,   853,   855,   856,
     858,   860,   862,   864,   866,   867,   868,   870,   871,   874,
     875,   943,   988,    40,   239,   575,   529,   527,   756,   478,
     873,   891,   958,   873,   873,   529,   529,   861,   861,   333,
     756,   529,   863,   533,    71,    72,   873,   891,   861,   529,
     529,   493,   515,   529,   876,   529,   876,   891,   891,   891,
      83,   149,   972,   973,   891,   939,   940,   756,   891,   938,
     576,   922,   923,   924,     9,   581,   531,   578,   963,   578,
     529,   577,   529,   529,   577,   985,     3,     8,    11,    15,
      16,    17,    18,    19,    20,    21,    36,    40,    46,    53,
      80,   179,   197,   202,   225,   226,   240,   281,   284,   298,
     301,   403,   513,   516,   517,   518,   520,   521,   522,   523,
     524,   525,   930,   931,   932,   934,   966,   492,   906,   309,
     891,   535,   771,   529,   577,   771,     3,   117,   245,   548,
     577,   875,  1012,   104,  1013,  1013,   575,    40,   575,   530,
     535,   705,   535,   530,   769,   979,   980,    40,   991,   682,
     196,   364,   223,   635,   398,   174,   480,   748,   758,   758,
      30,   781,   782,   891,    59,   758,   775,   166,   277,   801,
     230,   278,   350,   401,   465,     4,     9,    30,   796,   891,
     520,   521,   797,   798,   891,   893,   813,   814,   788,   787,
     785,   786,   169,   816,   291,   818,    59,   764,   765,   766,
     828,   892,   970,   970,   785,   813,   939,   239,   574,    74,
      82,    93,   171,   195,   338,   459,   575,   617,   627,   642,
      82,    93,   754,    93,   754,   529,   442,   529,   615,   249,
     462,   615,    93,   535,   442,   574,     3,   858,   548,    59,
     550,   548,   548,   106,   255,   265,    59,   442,   491,   515,
     547,   271,   382,   547,   549,   842,    93,   442,   754,   382,
     574,   442,   382,   566,   575,   590,   528,   539,   941,   941,
     942,   535,   779,   780,    13,    14,   225,   225,   442,   442,
     575,   634,   639,   491,   593,   574,   354,   393,   428,   481,
     658,   661,   389,   153,   100,   600,   660,   670,   675,   717,
    1020,   145,   855,   574,   281,   546,   676,   281,   529,   635,
      40,   281,   635,   281,   529,   652,   653,   654,   655,   656,
     657,   659,   195,   574,   281,   202,   674,   195,   575,   629,
     721,   581,   153,   174,   699,   695,   580,   531,   989,   979,
     982,   982,   989,   530,   535,    13,   707,   713,     4,   985,
       4,   985,   577,   581,   592,   599,    55,   102,   123,   142,
     146,   170,   173,   190,   286,   294,   317,   348,   596,    40,
     530,   891,   530,   174,   535,   530,   326,   947,   530,   892,
     892,    11,    15,    16,    19,    20,    21,   202,   225,   298,
     516,   517,   518,   520,   521,   522,   523,   524,   525,   932,
     892,   530,   535,   844,   845,   902,   169,   174,   950,   951,
     535,   530,    40,   952,   939,   952,   952,   174,   530,    40,
     836,   529,   980,     4,     9,   575,   789,   791,   792,   970,
     968,   180,   245,   428,   434,   436,   462,   574,   772,   488,
     848,   825,   228,   825,   296,   468,   841,   825,   228,   970,
     825,   288,   288,   529,   825,   576,   849,   850,   529,   576,
     849,   535,   530,   535,   531,   529,   858,   529,   529,   531,
      39,   857,   529,   877,   878,   879,   880,   881,   882,   883,
     884,   885,   886,   887,   888,   889,   890,   530,   535,   861,
     582,   681,   724,   729,   752,   755,   997,  1014,   939,   940,
     529,   487,   955,   956,   891,   940,   985,   891,   925,   926,
     927,   928,   873,   873,     8,    15,    16,    19,    20,    21,
     516,   517,   518,   520,   521,   522,   523,   524,   525,   575,
     930,   935,   530,   939,   440,   440,   985,   985,   529,   529,
     575,   364,   977,   169,   528,   530,   535,   539,   535,   534,
     522,   579,   939,   985,   891,   890,   890,   855,   891,   891,
     891,   891,   891,   891,   891,   891,     5,   581,   993,   440,
      45,   425,   967,   989,   891,   891,   529,   756,   896,   953,
     961,   132,   161,   281,   286,   291,   449,   460,   891,   286,
     529,   891,   442,    53,   179,   197,   202,   240,   403,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,    30,
      38,   408,   929,   527,   531,   965,   184,   165,   907,   377,
     529,   921,   971,   174,   822,   941,   822,   529,   577,   575,
     574,  1001,   563,   574,   891,   535,   530,   254,   281,   770,
     468,   684,   574,   726,   529,   575,   731,   741,   742,   744,
     575,   577,   575,   577,    41,   126,   783,   535,   468,   783,
     271,   758,   377,   378,   520,   521,   798,   800,   893,   401,
     230,   297,   321,   321,   535,   524,     4,   799,   985,   799,
     377,   378,   800,   574,   978,   285,   405,   819,   529,   980,
     981,   535,   184,   468,   202,   184,   223,   814,   786,   530,
     362,   560,   529,   195,   627,   982,   230,   281,   230,   468,
     529,   620,   854,   855,   982,   575,   195,   982,   195,   575,
      26,   137,   398,   556,   559,   581,   611,   625,   982,   581,
     619,   638,   982,   557,   982,   362,   398,   546,   560,   548,
     989,   982,   548,   989,   982,   548,   362,   398,   560,   982,
     982,   982,   982,   362,   398,   560,   982,   982,   577,   521,
     891,   962,   779,   779,   779,   477,   942,   196,   367,   778,
     891,   891,   286,   572,   577,   286,   572,   575,   343,   589,
     530,   535,   294,   174,   442,   584,   669,   481,   574,   574,
     650,   574,   574,   267,   672,   574,   301,   646,   529,   756,
     529,   153,   153,   240,   575,   617,   627,   630,   633,   643,
     645,   491,   493,   622,   152,   755,   153,   491,   722,   153,
     530,   941,   535,   535,    40,   281,   320,   153,     3,   529,
     281,   296,   575,     3,   696,   580,   696,   296,   696,   701,
     891,   590,   251,   522,   527,   529,   548,   591,   712,   897,
     898,   899,   530,   535,    40,   588,   577,   588,   281,   286,
     348,   588,    59,   588,   855,   530,   891,   891,   891,   950,
     855,   892,   892,   892,   892,   892,   892,   132,   281,   291,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     825,   530,   535,    40,   846,   891,   891,   951,   950,   855,
     530,   530,   530,   939,   855,   980,   530,   321,   524,   321,
     378,   524,   529,   529,   771,   434,   436,   434,   436,   574,
     773,   773,   773,   891,   184,   802,   841,   825,   891,   529,
     825,   169,   529,   576,   832,   841,   855,   530,   535,   849,
     530,  1011,     3,   943,    39,   857,   575,   852,   852,     3,
     527,   527,   985,   442,   442,   442,   442,   855,   465,   530,
     528,   939,   891,   140,   956,   957,   530,   530,   530,   539,
     535,   534,   531,   530,   530,   512,   512,   530,   530,   891,
     980,   529,   891,   974,   575,   904,   959,   960,   891,   891,
     922,   973,   530,   530,   530,   512,   892,   892,   146,   939,
     174,   132,   161,   286,   291,   449,   460,   529,   146,   935,
     891,   425,   967,   891,   953,   891,   442,   529,   756,   891,
     962,   580,   529,   529,   156,   908,   823,   824,   848,   779,
     848,   985,   890,   991,   991,   254,   529,   824,   488,   683,
      40,    59,   727,   737,   744,   963,   535,   822,   518,   748,
     748,   514,   784,   782,   298,   930,   933,   784,     4,   985,
     800,   297,   465,   797,   535,   248,   980,   764,    59,   970,
     529,   576,    59,   271,   442,   891,   281,   642,   529,   153,
     529,   620,   206,   639,   640,   601,    40,   178,   610,   636,
     601,    26,   137,   366,   368,   398,   553,   554,   555,   561,
     562,   153,   696,   153,   696,   611,   625,   611,   530,   535,
     577,   604,   518,   531,   530,   535,   442,   382,    93,   442,
     754,   382,   442,   442,   442,   382,   567,   539,   528,   539,
     778,   778,   778,   942,   288,   288,   530,   529,   583,     3,
     415,   416,   577,   598,   634,   589,   574,   676,   529,    40,
     635,   655,   657,   574,   674,   669,   364,   428,   577,   678,
     679,   639,   574,   574,   650,   574,   530,   535,   294,   615,
     294,   296,   614,   982,   491,   649,   574,   615,    40,   574,
     530,   653,   659,   656,   659,   428,   891,   153,     5,   672,
     599,   153,   574,   699,   989,   586,   597,   712,   592,   577,
     577,   286,   639,   522,   639,   577,   522,   639,   577,   530,
     530,   951,   174,   132,   291,   529,   530,   535,   847,   844,
     529,   530,   530,   530,   575,   789,   848,   773,   773,   773,
     773,   574,   574,   574,    59,   189,   811,   841,   980,   529,
     829,   830,   831,   894,   896,   980,   169,    80,   851,   850,
     530,   530,   527,   855,   530,   535,   530,   985,   528,   985,
     530,   878,   880,   881,   882,   881,   882,   882,   530,   438,
     891,   144,   891,   925,   935,   876,   876,   530,   530,   891,
     974,   975,   976,    40,   202,   535,   530,   977,   890,   891,
      36,    36,   891,   530,   891,   174,   529,   943,   891,   530,
     146,   892,   892,   146,   146,   891,   891,   528,   539,   529,
     964,   780,   488,   891,   308,   912,   535,   802,   778,   802,
     530,   752,   891,   370,   735,   575,   271,   329,   117,   311,
     529,   725,   755,   530,   535,   731,   683,   891,   166,   234,
     529,   784,   297,   574,   530,   981,   184,   756,   757,   970,
     981,   982,   982,   530,   153,   640,   627,   640,   601,   629,
     535,   530,   119,   210,   278,   281,   626,   529,    33,    59,
     647,   636,    74,    80,    93,   117,   119,   210,   281,   286,
     338,   356,   459,   468,   606,   607,   621,   178,   117,   194,
     281,   615,   547,   107,   117,   178,   281,   414,   417,   549,
     615,   398,   555,   453,   982,   575,   559,     3,    37,    42,
      49,    55,    81,    83,    89,   101,   173,   175,   178,   179,
     197,   212,   225,   226,   228,   238,   240,   251,   274,   280,
     284,   298,   306,   309,   330,   373,   392,   399,   403,   421,
     430,   452,   458,   479,   520,   521,   548,   577,   602,   641,
     685,   691,   855,   933,   986,   581,   638,   982,   982,   982,
     982,   982,   982,   982,   982,   982,   982,   590,   962,   962,
     530,   530,   530,   779,   107,   382,   531,   547,   598,   529,
     633,   755,   722,   320,   529,   646,   195,   574,   530,   535,
     530,   676,   529,    40,   624,   622,   630,    86,   703,   107,
     278,   635,   755,   655,   657,    40,    40,   756,   757,   574,
     296,   662,   674,   530,   629,   468,   719,   696,   530,   535,
     639,   892,   174,   529,   943,   837,   825,   849,   530,   535,
     530,   802,   574,   574,   574,   574,    30,   103,   185,   376,
     529,   803,   804,   805,   806,   807,   808,   809,   891,   891,
     490,   909,   530,   893,   936,   937,   202,   184,   826,   830,
     530,   832,   833,   834,   989,   857,   985,   857,   575,   857,
     528,   528,   891,   535,   530,   575,   891,   893,   960,   891,
     891,   891,   943,   530,   891,    36,    36,   891,   891,   146,
     530,   521,   962,   530,   941,   530,   891,   530,   529,   575,
     913,   811,   530,   811,   577,   530,   969,   474,   427,   467,
     736,   575,   730,   740,   296,   733,   518,   744,   735,   935,
      59,   530,   530,   473,   474,   761,   601,   627,   530,   530,
     491,   632,   120,   198,   208,   119,   470,   891,   117,    40,
     529,   989,   982,   892,   120,   198,   119,   286,   230,   574,
     632,    88,   647,   195,   286,   548,   891,   647,   286,   520,
     521,   551,   575,   855,   696,   696,     3,   251,   421,   986,
     990,   518,   442,   442,   528,   528,   778,   530,   530,   575,
     590,   468,   585,   587,   639,   530,   649,    40,     5,   599,
     428,   281,   529,   577,   722,   633,   152,   755,   150,   204,
     614,   122,   137,   337,   649,   107,   722,   491,  1021,   428,
     320,   163,   279,   428,   664,   307,   529,   296,   575,   718,
     529,   597,   892,   943,   530,   530,   530,     9,   363,   795,
     811,   529,   400,   529,   530,   535,   575,   910,   911,   345,
     812,   535,   530,   529,   576,    59,   530,   202,   530,   833,
     528,   855,   974,   528,   195,   530,   891,   891,   891,   539,
     528,   539,   530,   530,   575,   914,   909,   577,   909,   535,
     473,   963,   530,   535,    91,   735,   891,   530,   981,   981,
     356,   632,   529,   623,   601,   530,   194,   529,   891,   281,
     607,   632,   635,   982,    40,   153,   851,   990,   524,   602,
     982,   982,   530,   547,   124,   530,   622,   755,   662,   530,
     574,   153,    40,   530,   982,   649,    30,    85,    94,   118,
     194,   207,   414,   417,   618,   618,   378,   378,    40,    64,
      74,   245,   756,     5,   522,   529,   574,   574,   529,   599,
     574,   529,   575,   734,   743,   902,   530,   837,   530,   529,
     909,   939,   529,   939,   805,    40,   535,   891,   468,   790,
     893,   970,   980,   837,   529,   837,   891,   962,   962,   317,
     915,   812,   812,   755,   311,   755,   730,   296,   529,   728,
     574,   601,   581,   628,   631,   418,   483,   608,   609,   529,
     603,   891,   530,   253,   644,   194,   468,   558,   524,   453,
     590,   577,   722,   614,  1021,   307,   529,   574,   755,   622,
     703,   755,    74,   299,    74,   662,   973,   980,   663,   664,
     663,   627,   665,   666,   530,   719,   891,    80,   738,   530,
     535,   738,     9,   812,   530,   804,   530,   913,   911,   380,
     530,   970,   528,   528,   528,    59,   779,   790,   790,   736,
      93,   743,   133,   635,   518,   530,   535,   546,   530,   278,
     616,   175,   316,   404,   296,   612,   613,   637,   603,   891,
     453,    40,   529,   529,  1021,   614,   649,  1021,   299,   299,
     307,   530,   139,   530,   535,   529,   530,   989,   739,   989,
     722,   734,   739,   530,   790,   530,   792,   530,   938,   187,
     349,   378,   916,   473,   982,   530,   282,   465,   644,   602,
     631,   530,   609,   208,   122,   465,   296,   637,   296,   612,
     755,   665,   529,   574,   300,   667,   627,   743,   738,   783,
     848,   783,    53,   104,   455,   891,   917,   918,   917,   917,
     530,   755,   848,   398,   613,    63,   278,   369,   398,   605,
     605,  1021,   530,   665,   663,   533,   530,   739,   784,   784,
     918,   377,   168,   332,   168,   332,   149,   919,   919,   919,
     742,   601,    25,   117,   286,   667,   530,   924,   722,   783,
      36,   104,   184,   278,   439,   848,   667,   534,   848,   784,
     918,   377,   304
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   540,   541,   542,   542,   543,   543,   543,   543,   543,
     543,   543,   543,   543,   543,   543,   543,   543,   543,   543,
     543,   543,   543,   543,   543,   543,   543,   543,   543,   543,
     543,   543,   543,   543,   543,   543,   543,   543,   543,   543,
     543,   543,   543,   543,   543,   543,   543,   543,   668,   668,
     668,   669,   669,   670,   670,   670,   670,   670,  1020,  1020,
    1020,  1020,  1020,  1021,  1021,  1021,  1021,   749,   749,   749,
     994,   994,   994,   994,   994,   994,   995,   995,   995,   996,
     996,   996,   750,   751,   751,   752,   752,   752,   752,   752,
     752,   998,   700,   700,   700,   701,   701,   702,   702,   703,
     703,  1014,  1014,  1014,  1014,  1014,  1014,  1014,  1014,  1015,
    1015,  1016,  1016,  1017,  1017,  1018,  1018,  1019,  1019,   717,
     717,   718,   719,   719,   720,   720,   721,   721,   722,   722,
     723,   723,   582,   582,   582,   583,   583,   583,   584,   584,
     585,   585,   586,   586,   587,   587,   588,   588,   589,   589,
     590,   590,   591,   591,   591,   591,   591,   591,   591,   591,
     592,   593,   593,   594,   594,   595,   595,   596,   596,   596,
     596,   596,   596,   596,   596,   596,   596,   596,   596,   596,
     596,   596,   596,   597,   598,   598,   598,   598,   598,   599,
     599,  1000,  1000,  1000,  1000,  1000,  1001,  1001,  1001,  1001,
    1001,  1002,  1002,  1003,  1003,  1004,  1004,   671,   671,   671,
     672,   672,   673,   673,   673,   674,   674,   545,   545,   546,
     546,   547,   547,   547,   548,   548,   548,   548,   549,   549,
     549,   549,   549,   549,   549,   549,   549,   549,   549,   549,
     549,   549,   550,   550,   551,   551,   551,   999,   660,   660,
     660,   661,   661,   661,   662,   662,   662,   663,   663,   664,
     664,   665,   665,   665,   666,   666,   667,   667,   571,   571,
     572,   572,   573,   573,   573,   573,   573,   573,   573,   573,
     573,   573,   573,   569,   569,   570,   570,   564,   564,   565,
     565,   565,   566,   566,   567,   567,   544,   544,   544,   544,
     544,   544,   651,   651,   651,   651,   651,   651,   652,   653,
     654,   654,   655,   655,   656,   657,   657,   658,   658,   659,
     659,  1008,  1008,  1008,  1008,  1008,  1009,  1009,  1009,  1009,
    1010,  1010,  1011,  1012,  1012,  1012,  1012,  1012,  1012,  1012,
    1013,  1013,   675,   675,   675,   676,   676,   563,   563,   997,
     552,   552,   552,   552,   552,   552,   552,   552,   553,   553,
     554,   554,   555,   555,   555,   555,   556,   556,   557,   557,
     557,   557,   557,   557,   557,   557,   557,   557,   557,   557,
     557,   557,   557,   557,   557,   557,   557,   557,   557,   557,
     557,   557,   557,   557,   557,   557,   557,   558,   558,   559,
     559,   559,   559,   560,   560,   561,   562,   562,   562,   753,
     753,   753,   753,   753,   753,   753,   753,   753,   753,   753,
     753,   753,   754,   754,   568,   574,   574,   575,   575,   575,
     576,   576,   577,   578,   578,   579,   580,   581,   581,   581,
     581,   648,   648,   648,   649,   649,   649,   650,   680,   680,
     680,   680,   600,   600,   600,   601,   601,   602,   602,   602,
     602,   602,   602,   603,   603,   604,   605,   605,   605,   605,
     605,   606,   606,   606,   606,   607,   607,   607,   607,   607,
     607,   607,   607,   608,   608,   609,   609,   610,   610,   610,
     611,   612,   613,   613,   613,   613,   613,   614,   614,   614,
     614,   615,   616,   616,   617,   617,   618,   618,   618,   618,
     618,   618,   618,   618,   619,   619,   620,   621,   621,   621,
     621,   622,   622,   622,   622,   623,   624,   624,   624,   625,
     626,   626,   626,   626,   626,   626,   627,   627,   628,   628,
     629,   630,   630,   630,   631,   631,   632,   632,   633,   633,
     633,   634,   635,   635,   636,   636,   637,   638,   638,   638,
     638,   639,   639,   640,   640,   641,   641,   641,   642,   642,
     642,   642,   642,   642,   643,   643,   644,   644,   644,   644,
     645,   646,   646,   646,   646,   646,   646,   646,   646,   647,
     647,   745,   745,   745,   745,   746,   746,   747,   747,   748,
     748,   748,   755,   755,   756,   756,   756,   757,   757,   757,
     757,   757,   757,   757,   757,   758,   758,   759,   759,   760,
     760,   760,   760,   760,   760,   760,   760,   760,   760,   760,
     760,   760,   760,   760,   760,   760,   760,   760,   761,   761,
     762,   762,   763,   763,   764,   764,   764,   765,   765,   766,
     766,   767,   767,   767,   768,   768,   769,   770,   770,   770,
     771,   771,   772,   772,   772,   772,   772,   772,   772,   772,
     772,   773,   773,   774,   774,   774,   775,   776,   776,   777,
     777,   778,   778,   778,   779,   779,   780,   780,   781,   781,
     782,   782,   783,   783,   783,   784,   784,   784,   785,   785,
     785,   785,   786,   786,   787,   787,   787,   787,   788,   788,
     789,   789,   789,   789,   789,   789,   790,   790,   791,   791,
     792,   792,   792,   792,   793,   794,   794,   795,   795,   796,
     796,   796,   796,   796,   797,   798,   798,   798,   799,   799,
     800,   800,   801,   801,   802,   802,   802,   803,   803,   804,
     804,   805,   805,   805,   805,   805,   806,   807,   808,   809,
     810,   810,   811,   811,   812,   812,   813,   813,   814,   814,
     815,   815,   816,   817,   817,   817,   817,   818,   818,   819,
     819,   819,   820,   820,   821,   821,   822,   822,   823,   823,
     824,   824,   825,   825,   825,   825,   825,   825,   825,   825,
     825,   825,   825,   825,   826,   826,   827,   827,   827,   828,
     828,   829,   829,   829,   829,   830,   830,   831,   831,   832,
     832,   833,   834,   834,   835,   835,   835,   835,   835,   835,
     835,   835,   835,   835,   835,   836,   836,   836,   836,   837,
     837,   838,   838,   838,   838,   838,   839,   839,   839,   839,
     839,   839,   840,   840,   841,   841,   842,   842,   842,   842,
     843,   843,   844,   845,   845,   846,   846,   847,   847,   848,
     848,   849,   849,   850,   851,   851,   852,   852,   853,   853,
     854,   854,   855,   855,   855,   855,   855,   855,   855,   855,
     855,   855,   856,   856,   857,   857,   857,   858,   858,   858,
     858,   858,   858,   858,   859,   859,   859,   859,   860,   861,
     861,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     862,   862,   863,   863,   864,   864,   865,   865,   866,   867,
     868,   868,   869,   869,   870,   871,   872,   872,   872,   872,
     872,   872,   873,   873,   874,   874,   874,   874,   875,   876,
     876,   876,   877,   877,   878,   878,   879,   879,   880,   880,
     881,   881,   882,   882,   883,   883,   884,   884,   885,   885,
     886,   886,   887,   887,   888,   888,   889,   889,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   893,   893,   894,   894,   894,
     894,   894,   894,   895,   895,   895,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   897,   898,
     899,   900,   900,   900,   900,   900,   900,   901,   901,   902,
     902,   903,   903,   903,   903,   903,   903,   903,   903,   903,
     903,   903,   903,   903,   903,   904,   905,   905,   906,   906,
     907,   907,   907,   908,   908,   909,   909,   910,   910,   911,
     912,   912,   912,   913,   914,   914,   915,   915,   916,   916,
     916,   916,   917,   917,   918,   918,   918,   918,   918,   919,
     919,   919,   919,   919,   920,   920,   921,   921,   922,   923,
     923,   924,   924,   925,   926,   926,   927,   927,   928,   928,
     929,   929,   929,   930,   930,   931,   931,   931,   931,   931,
     931,   931,   931,   931,   931,   931,   931,   931,   931,   932,
     932,   933,   933,   934,   934,   934,   934,   934,   934,   934,
     934,   935,   935,   936,   936,   937,   937,   938,   938,   939,
     939,   940,   940,   941,   941,   942,   942,   942,   943,   943,
     944,   944,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   946,   946,   947,
     948,   948,   949,   949,   949,   949,   949,   949,   950,   951,
     952,   952,   952,   953,   953,   953,   953,   954,   955,   955,
     956,   957,   957,   958,   958,   959,   959,   960,   961,   961,
     579,   579,   579,   579,   962,   962,   963,   963,   964,   964,
     964,   965,   965,   965,   965,   965,   966,   966,   967,   967,
     968,   968,   969,   969,   970,   970,   971,   971,   971,   972,
     972,   973,   973,   974,   975,   975,   976,   976,   977,   977,
     977,   978,   978,   979,   979,   980,   980,   981,   981,   982,
     983,   983,   984,   984,   984,   984,   984,   984,   984,   984,
     984,   984,   984,   984,   984,   984,   985,   986,   986,   986,
     987,   987,   987,   988,   988,   988,   989,   989,   990,   990,
     991,   991,   992,   993,   993,   715,   715,   716,   692,   692,
     692,   692,   692,   692,   693,   693,   693,   693,   693,   693,
     693,   693,   693,   693,   693,   693,   693,   693,   693,   693,
     693,   693,   693,   694,   694,   694,   694,   694,   694,   695,
     695,   696,   696,   696,   697,   697,   697,   677,   677,   677,
     678,   678,   679,   679,  1005,  1005,  1005,  1005,  1005,  1006,
    1006,  1007,  1007,  1007,   724,   725,   725,   725,   725,   725,
     726,   726,   727,   727,   727,   728,   728,   728,   729,   729,
     730,   731,   731,   732,   732,   732,   733,   733,   733,   734,
     734,   734,   735,   735,   736,   736,   737,   737,   738,   738,
     739,   739,   740,   740,   741,   741,   742,   742,   743,   743,
     744,   698,   698,   699,   699,   704,   704,   704,   704,   705,
     705,   706,   706,   706,   707,   707,   707,   707,   707,   707,
     707,   707,   707,   707,   707,   707,   707,   707,   707,   707,
     707,   707,   707,   707,   707,   707,   707,   707,   707,   707,
     707,   707,   707,   707,   707,   707,   708,   708,   708,   709,
     709,   710,   710,   711,   711,   712,   712,   712,   712,   713,
     714,   714,   681,   681,   682,   682,   682,   683,   683,   684,
     684,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   687,   687,   687,   687,   687,
     687,   687,   687,   687,   687,   687,   687,   687,   687,   687,
     687,   687,   687,   687,   687,   687,   687,   687,   687,   687,
     687,   687,   687,   688,   688,   688,   688,   688,   688,   688,
     688,   688,   688,   688,   688,   688,   688,   688,   688,   688,
     688,   688,   688,   688,   688,   688,   688,   688,   688,   688,
     688,   688,   689,   689,   689,   689,   689,   689,   689,   689,
     689,   689,   689,   689,   689,   689,   689,   689,   689,   689,
     689,   689,   689,   689,   689,   689,   689,   689,   689,   689,
     689,   689,   689,   689,   689,   689,   689,   689,   689,   689,
     689,   689,   689,   689,   689,   689,   689,   689,   689,   689,
     689,   689,   689,   689,   689,   689,   689,   689,   689,   689,
     689,   689,   689,   689,   689,   689,   689,   689,   689,   689,
     689,   689,   689,   689,   689,   689,   689,   689,   689,   689,
     689,   689,   689,   690,   690,   690,   690,   690,   690,   690,
     690,   690,   690,   690,   690,   690,   690,   690,   690,   690,
     690,   690,   690,   690,   690,   690,   690,   690,   690,   690,
     690,   690,   690,   690,   690,   691,   691,   691,   691,   691,
     691,   691,   691,   691,   691,   691,   691,   691,   691,   691,
     691,   691,   691,   691,   691,   691,   691,   691,   691,   691,
     691,   691,   691,   691,   691,   691,   691,   691,   691,   691,
     691,   691,   691,   691,   691,   691,   691,   691,   691,   691,
     691,   691,   691,   691,   691,   691,   691,   691,   691,   691,
     691,   691,   691,   691,   691,   691,   691,   691,   691,   691,
     691,   691,   691,   691,   691,   691,   691,   691,   691,   691,
     691,   691,   691,   691,   691
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     4,     7,
       6,     2,     0,     1,     1,     1,     1,     1,     9,    12,
      11,    12,    14,     3,     4,     4,     0,     2,     4,     5,
       2,     3,     3,     2,     2,     2,     1,     1,     0,     2,
       2,     0,     5,     3,     0,     1,     1,     1,     1,     1,
       1,     4,     3,     9,    12,     1,     3,     1,     3,     3,
       0,     2,     2,     2,     2,     3,     4,     3,     1,     1,
       1,     1,     1,     1,     0,     1,     3,     1,     3,    13,
      16,     1,     2,     0,     1,     0,     1,     0,     2,     0,
       1,     0,    11,     9,     7,     0,     3,     3,     1,     1,
       3,     0,     1,     3,     1,     0,     1,     0,     1,     0,
       1,     3,     1,     1,     1,     1,     3,     1,     1,     0,
       2,     2,     0,     2,     0,     1,     0,     1,     1,     1,
       3,     3,     1,     1,     3,     3,     3,     3,     3,     3,
       4,     3,     2,     1,     1,     1,     1,     3,     1,     1,
       3,     4,     6,     5,     4,     6,     1,     1,     1,     1,
       1,     1,     0,     1,     3,     1,     0,     8,    11,    10,
       0,     1,     0,     1,     1,     0,     2,     4,     6,     1,
       2,     1,     1,     0,     1,     2,     2,     1,     2,     2,
       1,     2,     3,     2,     2,     2,     2,     3,     3,     3,
       1,     3,     1,     0,     1,     2,     2,     2,    13,    16,
      15,     1,     1,     1,     4,     2,     7,     1,     0,     4,
       3,     1,     2,     0,     1,     3,     4,     0,     6,     6,
       1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     1,     3,     2,     1,     0,     5,     8,     2,
       3,     5,     1,     0,     2,     0,     6,     8,     6,     8,
       6,     8,     5,     8,     7,     5,     8,     7,     4,     4,
       1,     3,     1,     1,     3,     1,     3,     1,     1,     2,
       3,     2,     3,     3,     3,     3,     1,     3,     3,     2,
       3,     3,     1,     1,     1,     3,     5,     1,     1,     1,
       1,     3,     5,     8,     7,     1,     0,     2,     4,     8,
       4,     6,     4,     6,     4,     6,     4,     6,     1,     2,
       3,     2,     1,     3,     2,     3,     1,     3,     2,     5,
       3,     6,     4,     6,     6,     6,     5,     5,     6,     9,
       4,     5,     7,     6,     4,     8,     4,     2,     4,     3,
       6,     4,     2,     2,     2,     2,     1,     2,     0,     1,
       2,     2,     2,     1,     3,     4,     2,     1,     0,     6,
       6,     8,     6,     8,     6,     8,     6,     8,     8,    10,
       8,    10,     1,     0,     2,     1,     2,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     1,     1,     1,
       1,     7,    10,     9,     2,     3,     0,     4,     2,     3,
       2,     3,     9,    12,    11,     0,     2,     1,     1,     1,
       1,     1,     1,     3,     0,     1,     2,     1,     1,     2,
       2,     3,     1,     1,     2,     2,     1,     2,     3,     5,
       3,     2,     5,     1,     1,     1,     0,     5,     7,     5,
       2,     3,     1,     1,     2,     2,     0,     3,     4,     4,
       0,     3,     2,     0,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     3,     1,     2,     2,
       2,     2,     2,     2,     0,     3,     3,     3,     0,     1,
       2,     1,     2,     2,     2,     2,     3,     4,     1,     3,
       1,     1,     1,     1,     3,     1,     2,     0,     1,     2,
       0,     1,     3,     0,     2,     0,     3,     3,     1,     5,
       3,     1,     3,     1,     2,     1,     4,     5,     5,     6,
       3,     7,     4,    11,     1,     3,     2,     2,     2,     0,
       3,     1,     1,     2,     2,     2,     2,     1,     0,     1,
       2,     2,     4,     6,     6,     0,     1,     1,     1,     0,
       2,     2,     1,     1,     3,     3,     3,     1,     2,     4,
       4,     2,     3,     5,     5,     1,     1,     3,     0,    11,
      11,    10,    12,     1,     2,     5,     4,     4,     4,     4,
       7,     5,     4,     7,     6,     9,     9,     4,     1,     1,
       1,     1,     1,     1,     1,     5,     1,     1,     3,     1,
       2,     2,     2,     3,     1,     3,     7,     1,     2,     0,
       2,     0,     3,     3,     4,     4,     4,     4,     3,     2,
       1,     1,     0,     1,     1,     0,     2,     1,     5,     1,
       0,     2,     2,     0,     1,     0,     3,     5,     1,     3,
       4,     3,     1,     1,     0,     2,     2,     0,     2,     2,
       1,     1,     1,     0,     2,     4,     5,     4,     2,     3,
       2,     2,     2,     2,     1,     2,     3,     0,     1,     0,
       5,     1,     4,     6,     2,     1,     0,     4,     0,     1,
       1,     2,     2,     2,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     3,     3,     0,     1,     3,     1,
       2,     1,     1,     1,     1,     1,     2,     4,     4,     5,
       1,     1,     2,     0,     2,     0,     1,     3,     1,     0,
       1,     2,     3,     2,     4,     2,     3,     2,     0,     1,
       2,     0,     4,     5,     1,     2,     2,     0,     1,     3,
       1,     2,     3,     3,     3,     3,     3,     3,     1,     4,
       9,     9,     7,     9,     3,     0,     2,     2,     0,     5,
       3,     0,     1,     1,     3,     5,     3,     1,     2,     1,
       3,     5,     1,     2,     3,     4,     5,     4,     5,     4,
       6,     5,     4,     5,     5,     5,     2,     4,     1,     1,
       0,     1,     4,     5,     4,     0,     2,     2,     2,     1,
       1,     1,     1,     0,     4,     2,     1,     2,     2,     4,
       2,     6,     2,     1,     3,     4,     0,     2,     0,     2,
       0,     1,     3,     3,     2,     0,     2,     4,     1,     1,
       1,     0,     2,     3,     5,     6,     2,     3,     1,     5,
       5,     5,     3,     3,     3,     4,     0,     1,     1,     1,
       1,     1,     2,     4,     1,     1,     1,     1,     2,     3,
       0,     1,     1,     1,     1,     1,     2,     2,     2,     2,
       2,     1,     3,     0,     1,     1,     1,     1,     5,     2,
       1,     1,     1,     1,     4,     1,     2,     2,     1,     3,
       3,     2,     1,     0,     5,     2,     5,     2,     1,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     3,     3,     3,     3,     3,     0,     1,
       3,     3,     5,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       2,     2,     3,     3,     2,     2,     3,     3,     5,     4,
       6,     3,     5,     4,     6,     4,     6,     5,     7,     3,
       2,     4,     3,     2,     3,     3,     3,     3,     4,     3,
       4,     3,     4,     5,     6,     6,     7,     6,     7,     6,
       7,     3,     4,     4,     6,     1,     5,     4,     3,     5,
       1,     3,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     5,     6,     6,     7,     1,     2,     1,     1,     1,
       2,     2,     4,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     4,     2,     2,     3,     3,
       4,     3,     6,     7,     9,     7,     7,     5,     1,     1,
       1,     5,     6,     6,     4,     4,     4,     4,     6,     5,
       5,     5,     4,     6,     4,     1,     7,     9,     5,     0,
       5,     4,     0,     1,     0,     2,     0,     1,     3,     3,
       2,     2,     0,     6,     1,     0,     3,     0,     3,     3,
       3,     0,     1,     4,     2,     2,     2,     2,     2,     3,
       2,     2,     3,     0,     4,     3,     1,     5,     3,     1,
       3,     1,     2,     3,     1,     3,     1,     2,     1,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     1,     4,     1,     4,     1,     2,     1,     2,     1,
       2,     1,     3,     1,     3,     1,     2,     1,     3,     1,
       2,     1,     0,     1,     3,     1,     3,     3,     1,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     3,     2,
       3,     0,     3,     3,     2,     2,     1,     0,     2,     2,
       3,     2,     1,     1,     3,     1,     1,     5,     1,     2,
       4,     2,     0,     1,     0,     1,     3,     1,     1,     2,
       3,     5,     7,     7,     1,     0,     0,     2,     0,     2,
       3,     3,     3,     5,     7,     7,     0,     2,     1,     0,
       1,     0,     1,     3,     1,     2,     3,     2,     1,     4,
       2,     1,     0,     3,     1,     3,     1,     2,     4,     2,
       0,     1,     3,     1,     3,     1,     2,     1,     3,     1,
       1,     2,     1,     1,     2,     1,     1,     2,     7,     2,
       5,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     3,
       3,     0,     1,     1,     1,     4,     6,     3,     6,     4,
       6,     4,     6,     8,     1,     1,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     1,     1,     1,     3,     3,
       3,     3,     1,     2,     2,     1,     3,     1,     1,     1,
       3,     1,     1,     0,     1,     1,     1,     6,     8,     5,
       1,     0,     1,     3,     2,     3,     3,     3,     3,     1,
       1,     1,     2,     3,     9,     1,     4,     4,     7,     2,
       1,     3,     2,     2,     0,     4,     3,     0,     1,     0,
       2,     3,     5,     2,     2,     0,     8,     5,     0,     5,
       5,     7,     2,     0,     1,     1,     1,     3,     2,     0,
       1,     0,     1,     3,     1,     3,     1,     2,     1,     3,
       2,     5,     7,     0,     2,     2,     4,     3,     5,     1,
       0,     1,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     7,     3,     1,     2,     3,     2,     0,     2,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 516 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 19595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 532 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 19611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 544 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 19622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* stmt: %empty  */
#line 595 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 19628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 19712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 19718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 19734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 19750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 19766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 19787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 19808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 19814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 19820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 19826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 19832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 19879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* TransactionStmt: BEGIN_P opt_transaction opt_transaction_type  */
#line 11 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					n->transaction_type = (yyvsp[0].transactiontype);
					(yyval.node) = (PGNode *)n;
				}
#line 19890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* TransactionStmt: START opt_transaction opt_transaction_type  */
#line 18 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					n->transaction_type = (yyvsp[0].transactiontype);
					(yyval.node) = (PGNode *)n;
				}
#line 19901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* TransactionStmt: COMMIT opt_transaction  */
#line 25 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 19913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* TransactionStmt: END_P opt_transaction  */
#line 33 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 19925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 41 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 19937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* opt_transaction: WORK  */
#line 51 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 19943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* opt_transaction: TRANSACTION  */
#line 52 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 19949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* opt_transaction: %empty  */
#line 53 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 19955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* opt_transaction_type: READ_P ONLY  */
#line 57 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        { (yyval.transactiontype) = PG_TRANS_TYPE_READ_ONLY; }
#line 19961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* opt_transaction_type: READ_P WRITE_P  */
#line 58 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        { (yyval.transactiontype) = PG_TRANS_TYPE_READ_WRITE; }
#line 19967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* opt_transaction_type: %empty  */
#line 59 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                { (yyval.transactiontype) = PG_TRANS_TYPE_DEFAULT; }
#line 19973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 19985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 19997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* UpdateExtensionsStmt: opt_with_clause UPDATE EXTENSIONS opt_column_list  */
#line 8 "third_party/libpg_query/grammar/statements/update_extensions.y"
                                {
					PGUpdateExtensionsStmt *n = makeNode(PGUpdateExtensionsStmt);
					n->extensions = (yyvsp[0].list);

					if ((yyvsp[-3].with)) {
                          ereport(ERROR,
                                  (errcode(PG_ERRCODE_SYNTAX_ERROR),
                                   errmsg("Providing a with clause with an UPDATE EXTENSIONS statement is not allowed"),
                                   parser_errposition((yylsp[-3]))));
                          break;
                    }

					(yyval.node) = (PGNode *)n;
				}
#line 20016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 20027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 20116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 20128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 20140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 20151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 20162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 20173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 20184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 20195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 20206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* var_name: ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* var_name: var_name '.' ColId  */
#line 69 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 20218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* table_id: ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 20224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* table_id: table_id '.' ColId  */
#line 74 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 20230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 20302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 20308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 20314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 20326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 20338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 20344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 20350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 20382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 20405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* CopyStmt: COPY FROM DATABASE ColId TO ColId copy_database_flag  */
#line 50 "third_party/libpg_query/grammar/statements/copy.y"
                {
				PGCopyDatabaseStmt *n = makeNode(PGCopyDatabaseStmt);
				n->from_database = (yyvsp[-3].str);
				n->to_database = (yyvsp[-1].str);
				n->copy_database_flag = (yyvsp[0].conststr);
				(yyval.node) = (PGNode *)n;
			}
#line 20417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* copy_database_flag: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                        { (yyval.conststr) = NULL; }
#line 20423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* copy_database_flag: '(' SCHEMA ')'  */
#line 62 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "schema"; }
#line 20429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* copy_database_flag: '(' DATA_P ')'  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "data"; }
#line 20435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* copy_from: FROM  */
#line 67 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 20441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* copy_from: TO  */
#line 68 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 20447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 74 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 20455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* copy_delimiter: %empty  */
#line 77 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 20461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 83 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 87 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* opt_using: USING  */
#line 94 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 20483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* opt_using: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 20489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* opt_as: AS  */
#line 99 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 20495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* opt_as: %empty  */
#line 100 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 20501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* opt_program: PROGRAM  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 20507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* opt_program: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 20513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* copy_options: copy_opt_list  */
#line 110 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 111 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 116 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 20531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* copy_generic_opt_arg: NumericOnly  */
#line 117 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 20537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* copy_generic_opt_arg: list_expr  */
#line 118 "third_party/libpg_query/grammar/statements/copy.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 20543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* copy_generic_opt_arg: '*'  */
#line 119 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 20549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 20555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* copy_generic_opt_arg: struct_expr  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 20561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* copy_generic_opt_arg: map_expr  */
#line 122 "third_party/libpg_query/grammar/statements/copy.y"
                                                                            { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 20567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* copy_generic_opt_arg: %empty  */
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 20573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 20581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_oids: WITH OIDS  */
#line 137 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 20589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_oids: %empty  */
#line 140 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 20595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 145 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* copy_opt_list: %empty  */
#line 146 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 20607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* opt_binary: BINARY  */
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 20615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* opt_binary: %empty  */
#line 155 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 20621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* copy_opt_item: BINARY  */
#line 161 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 20629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* copy_opt_item: OIDS  */
#line 165 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* copy_opt_item: FREEZE  */
#line 169 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 173 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 20653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 177 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 20661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* copy_opt_item: CSV  */
#line 181 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 20669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* copy_opt_item: HEADER_P  */
#line 185 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 189 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 20685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 193 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 20693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* copy_opt_item: FORCE QUOTE columnList  */
#line 197 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* copy_opt_item: FORCE QUOTE '*'  */
#line 201 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 20709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* copy_opt_item: PARTITION BY columnList  */
#line 205 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* copy_opt_item: PARTITION BY '*'  */
#line 209 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 20725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 213 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 20733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* copy_opt_item: FORCE NULL_P columnList  */
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* copy_opt_item: ENCODING Sconst  */
#line 221 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 20749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 228 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 20755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* copy_file_name: Sconst  */
#line 233 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* copy_file_name: STDIN  */
#line 234 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 20767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* copy_file_name: STDOUT  */
#line 235 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 20773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* copy_file_name: IDENT '.' ColId  */
#line 236 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 20779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* copy_file_name: IDENT  */
#line 237 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 244 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 20793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 248 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 20801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 20853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 20865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 20879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 20885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 20891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 20897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 20903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 20917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 20923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 20929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 20935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 20941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 20947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 20953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* CreateSecretStmt: CREATE_P opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* CreateSecretStmt: CREATE_P opt_persist SECRET IF_P NOT EXISTS opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-9].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* CreateSecretStmt: CREATE_P OR REPLACE opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 28 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* opt_secret_name: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/create_secret.y"
                    { (yyval.str) = NULL; }
#line 21001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* opt_secret_name: ColId  */
#line 41 "third_party/libpg_query/grammar/statements/create_secret.y"
                { (yyval.str) = (yyvsp[0].str); }
#line 21007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* opt_persist: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("default"); }
#line 21013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* opt_persist: TEMPORARY  */
#line 46 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("temporary"); }
#line 21019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* opt_persist: PERSISTENT  */
#line 47 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("persistent"); }
#line 21025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* opt_storage_specifier: %empty  */
#line 51 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 21031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* opt_storage_specifier: IN_P IDENT  */
#line 52 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 21037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 21079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 21112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 21118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 21126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 21142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 21150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 21182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 21190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 21237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 21243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 21255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 21261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 21271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* CreateModelStmt: CREATE_P OptTemp model_type_value MODEL qualified_name PATH SCONST model_on OUTPUT '(' with_result_col_list ')' opt_option  */
#line 10 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGCreateModelStmt *n = makeNode(PGCreateModelStmt);
					(yyvsp[-8].range)->relpersistence = (yyvsp[-11].ival);
					n->model = (yyvsp[-8].range);
					n->model_type = (yyvsp[-10].ival);
					n->model_path = (yyvsp[-6].str);
					n->model_on = (yyvsp[-5].node);
					n->result_set = (yyvsp[-2].list);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* CreateModelStmt: CREATE_P OptTemp model_type_value MODEL IF_P NOT EXISTS qualified_name PATH SCONST model_on OUTPUT '(' with_result_col_list ')' opt_option  */
#line 24 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGCreateModelStmt *n = makeNode(PGCreateModelStmt);
					(yyvsp[-8].range)->relpersistence = (yyvsp[-14].ival);
					n->model = (yyvsp[-8].range);
					n->model_type = (yyvsp[-13].ival);
					n->model_path = (yyvsp[-6].str);
					n->model_on = (yyvsp[-5].node);
					n->result_set = (yyvsp[-2].list);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* CreateModelStmt: CREATE_P OR REPLACE OptTemp model_type_value MODEL qualified_name PATH SCONST model_on OUTPUT '(' with_result_col_list ')' opt_option  */
#line 38 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGCreateModelStmt *n = makeNode(PGCreateModelStmt);
					(yyvsp[-8].range)->relpersistence = (yyvsp[-11].ival);
					n->model = (yyvsp[-8].range);
					n->model_type = (yyvsp[-10].ival);
					n->model_path = (yyvsp[-6].str);
					n->model_on = (yyvsp[-5].node);
					n->result_set = (yyvsp[-2].list);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* model_type_value: TABULAR  */
#line 54 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                        { (yyval.ival) = 0; }
#line 21331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* model_type_value: LLM  */
#line 55 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                        { (yyval.ival) = 1; }
#line 21337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* model_type_value: GNN  */
#line 56 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                        { (yyval.ival) = 2; }
#line 21343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* model_on: ON TABLE qualified_name opt_feat_col_list  */
#line 61 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGModelOn *n = makeNode(PGModelOn);
					n->rel_name = (yyvsp[-1].range);
					n->rel_feat = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* model_on: ON feat_col_list  */
#line 68 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGModelOn *n = makeNode(PGModelOn);
					n->rel_feat = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* model_on: ON NODES qualified_name opt_feat_col_list EDGES qualified_name opt_feat_col_list  */
#line 74 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGModelOn *n = makeNode(PGModelOn);
					n->rel_name = (yyvsp[-4].range);
					n->rel_feat = (yyvsp[-3].node);
					n->opt_name = (yyvsp[-1].range);
					n->opt_feat = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* opt_feat_col_list: feat_col_list  */
#line 85 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* opt_feat_col_list: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                { (yyval.node) = NULL; }
#line 21389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* feat_col_list: FEATURES '(' name_list_opt_comma ')'  */
#line 91 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGPredictFeatExpr *n = makeNode(PGPredictFeatExpr);
					n->input_set = (yyvsp[-1].list);
					(yyval.node) = (PGNode *) n;
				}
#line 21399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* feat_col_list: FEATURES '*' opt_except_list  */
#line 97 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGPredictFeatExpr *n = makeNode(PGPredictFeatExpr);
					n->exclude_set = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 21409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* with_result_col_list: result_col_list  */
#line 105 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* with_result_col_list: result_col_list ','  */
#line 106 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* with_result_col_list: %empty  */
#line 107 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                        { (yyval.list) = NIL; }
#line 21427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* result_col_list: columnDef  */
#line 112 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* result_col_list: result_col_list ',' columnDef  */
#line 116 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* opt_option: OPTIONS '{' dict_arguments_opt_comma '}'  */
#line 123 "third_party/libpg_query/grammar/statements/create_model.y"
                            { 
					(yyval.list) = (yyvsp[-1].list); 
				}
#line 21451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* opt_option: %empty  */
#line 126 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                        { (yyval.list) = NIL; }
#line 21457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* CommentOnStmt: COMMENT ON comment_on_type_any_name qualified_name IS comment_value  */
#line 8 "third_party/libpg_query/grammar/statements/comment_on.y"
                                {
					PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
					n->object_type = (yyvsp[-3].objtype);
					n->name = (yyvsp[-2].range);
					n->value = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* CommentOnStmt: COMMENT ON COLUMN a_expr IS comment_value  */
#line 16 "third_party/libpg_query/grammar/statements/comment_on.y"
                {
                    PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
                    n->object_type = PG_OBJECT_COLUMN;
                    n->column_expr = (yyvsp[-2].node);
                    n->value = (yyvsp[0].node);
                    (yyval.node) = (PGNode *)n;
                }
#line 21481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* comment_value: Sconst  */
#line 26 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 21487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* comment_value: NULL_P  */
#line 27 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                            { (yyval.node) = makeNullAConst((yylsp[0])); }
#line 21493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* comment_on_type_any_name: TABLE  */
#line 30 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 21499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* comment_on_type_any_name: SEQUENCE  */
#line 31 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 21505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* comment_on_type_any_name: MODEL  */
#line 32 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_MODEL; }
#line 21511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* comment_on_type_any_name: FUNCTION  */
#line 33 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* comment_on_type_any_name: MACRO  */
#line 34 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* comment_on_type_any_name: MACRO TABLE  */
#line 35 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 21529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* comment_on_type_any_name: VIEW  */
#line 36 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 21535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* comment_on_type_any_name: DATABASE  */
#line 37 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 21541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* comment_on_type_any_name: INDEX  */
#line 38 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 21547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* comment_on_type_any_name: SCHEMA  */
#line 39 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 21553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* comment_on_type_any_name: TYPE_P  */
#line 40 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 21559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 21593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* AttachStmt: ATTACH IF_P NOT EXISTS opt_database Sconst opt_database_alias copy_options  */
#line 17 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* DetachStmt: DETACH ColLabel  */
#line 29 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* DetachStmt: DETACH DATABASE ColLabel  */
#line 36 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* DetachStmt: DETACH DATABASE IF_P EXISTS ColLabel  */
#line 43 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* opt_database: DATABASE  */
#line 51 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 21658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* opt_database: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 21664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* opt_database_alias: AS ColId  */
#line 56 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* opt_database_alias: %empty  */
#line 57 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 21676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name table_macro_list  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 21767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name table_macro_list  */
#line 19 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 21781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name table_macro_list  */
#line 30 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 21794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name macro_definition_list  */
#line 40 "third_party/libpg_query/grammar/statements/create_function.y"
             {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
             }
#line 21807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name macro_definition_list  */
#line 50 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 21820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name macro_definition_list  */
#line 60 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 21833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* table_macro_definition: param_list AS TABLE select_no_parens  */
#line 72 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-3].list);
				n->query = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 21844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* table_macro_definition_parens: param_list AS TABLE select_with_parens  */
#line 82 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-3].list);
				n->query = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 21855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* table_macro_list_internal: table_macro_definition_parens  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].node));
			}
#line 21863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* table_macro_list_internal: table_macro_list_internal ',' table_macro_definition_parens  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
			}
#line 21871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* table_macro_list: table_macro_definition  */
#line 103 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].node));
			}
#line 21879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* macro_definition: param_list AS a_expr  */
#line 111 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 21890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* macro_definition_list: macro_definition  */
#line 120 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* macro_definition_list: macro_definition_list ',' macro_definition  */
#line 124 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* param_list: '(' ')'  */
#line 136 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 21914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* param_list: '(' func_arg_list ')'  */
#line 140 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 21922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 21932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 21942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 21952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 21962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* VariableSetStmt: SET VARIABLE_P set_rest  */
#line 35 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_VARIABLE;
					(yyval.node) = (PGNode *) n;
				}
#line 21972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* set_rest: generic_set  */
#line 44 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 21978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* set_rest: var_name FROM CURRENT_P  */
#line 46 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 21989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* set_rest: TIME ZONE zone_value  */
#line 54 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 22004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* set_rest: SCHEMA Sconst  */
#line 65 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 22016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* generic_set: var_name TO var_list  */
#line 77 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 22028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* generic_set: var_name '=' var_list  */
#line 85 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 22040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* var_value: a_expr  */
#line 96 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 22046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* zone_value: Sconst  */
#line 102 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 22054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* zone_value: IDENT  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 22062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* zone_value: ConstInterval Sconst opt_interval  */
#line 110 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 22081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 125 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 22092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* zone_value: NumericOnly  */
#line 131 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 22098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* zone_value: DEFAULT  */
#line 132 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 22104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* zone_value: LOCAL  */
#line 133 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 22110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* var_list: var_value  */
#line 137 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* var_list: var_list ',' var_value  */
#line 138 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 22176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 22219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 22347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 22355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 22378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 22386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 22496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 22532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 22552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 22632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 22720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 22730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 22763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 22775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 22783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 22792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 22801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 22809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 22833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 22839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 22845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 23034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 23040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 23050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 23058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 23088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 23144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 23231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 23237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 23243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 23257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 23267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 23277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 23287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 23297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 23354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 23382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 23388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 23394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 23400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 23406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 23412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 23418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 23442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 23448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 23454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 23460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 23466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 23477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 23506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 23584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 23622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 23628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 23634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 23640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 23653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 23680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 23694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 23714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 23720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 23726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 23732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 23738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 23744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 23750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 23756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 23762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 23774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 23780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 23791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 23803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 23809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 23815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 23821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 23827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 23833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 23839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 23845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 23857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 23919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 23925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 23931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 23943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 23949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 23955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 23967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 23973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 23979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 23985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 23991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 23997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 24020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 24050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 24056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 24062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 24094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 24102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 24114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 24132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 24140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 24152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 24158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 24164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 24170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 24178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 24186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 24195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 24203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 24243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 24254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 24271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 24363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 24387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 24399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 24407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 24415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 24426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 24461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 24472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 24478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 24484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 24490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 24496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = NULL;
					n->repo_is_alias = false;
					n->version = NULL;
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 24510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* LoadStmt: opt_force INSTALL file_name opt_ext_version  */
#line 17 "third_party/libpg_query/grammar/statements/load.y"
                                                                            {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[-1].str);
                    n->repository = NULL;
                    n->repo_is_alias = false;
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-3].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 24524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* LoadStmt: opt_force INSTALL file_name FROM ColId opt_ext_version  */
#line 26 "third_party/libpg_query/grammar/statements/load.y"
                                                                                       {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->repository = (yyvsp[-1].str);
                    n->repo_is_alias = true;
                    n->filename = (yyvsp[-3].str);
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-5].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 24538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* LoadStmt: opt_force INSTALL file_name FROM Sconst opt_ext_version  */
#line 35 "third_party/libpg_query/grammar/statements/load.y"
                                                                                        {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[-3].str);
                    n->repository = (yyvsp[-1].str);
                    n->repo_is_alias = false;
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-5].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 24552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* opt_force: %empty  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.loadinstalltype) = PG_LOAD_TYPE_INSTALL; }
#line 24558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* opt_force: FORCE  */
#line 47 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.loadinstalltype) = PG_LOAD_TYPE_FORCE_INSTALL; }
#line 24564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* file_name: Sconst  */
#line 49 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* file_name: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 24576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* opt_ext_version: %empty  */
#line 53 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = NULL; }
#line 24582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* opt_ext_version: VERSION_P Sconst  */
#line 54 "third_party/libpg_query/grammar/statements/load.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* opt_ext_version: VERSION_P ColId  */
#line 55 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 24594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 24606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* select_with_parens: '(' VariableShowStmt ')'  */
#line 55 "third_party/libpg_query/grammar/statements/select.y"
                    {
		    	(yyval.node) = (yyvsp[-1].node);
			}
#line 24614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* select_no_parens: simple_select  */
#line 72 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* select_no_parens: select_clause sort_clause  */
#line 74 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 24631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 81 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 89 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* select_no_parens: with_clause select_clause  */
#line 97 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 24667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* select_no_parens: with_clause select_clause sort_clause  */
#line 105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 24679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* select_clause: simple_select  */
#line 131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* select_clause: select_with_parens  */
#line 132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 24723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* opt_select: %empty  */
#line 164 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 24732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 175 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 225 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* simple_select: values_clause_opt_comma  */
#line 239 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* simple_select: TABLE relation_expr  */
#line 241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 24835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 24843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 276 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-3]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 316 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 327 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-5]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 350 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					n->location = (yylsp[-3]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* pivot_column_entry: b_expr  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 25017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 401 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 25028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* pivot_column_entry: single_pivot_value  */
#line 407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* pivot_column_list_internal: pivot_column_entry  */
#line 411 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 412 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* pivot_column_list: pivot_column_list_internal  */
#line 416 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* pivot_column_list: pivot_column_list_internal ','  */
#line 417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* with_clause: WITH cte_list  */
#line 432 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 25069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* with_clause: WITH_LA cte_list  */
#line 439 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 25080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* with_clause: WITH RECURSIVE cte_list  */
#line 446 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 25091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* cte_list: common_table_expr  */
#line 455 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* cte_list: cte_list ',' common_table_expr  */
#line 456 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 25117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* opt_materialized: MATERIALIZED  */
#line 472 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 25123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* opt_materialized: NOT MATERIALIZED  */
#line 473 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 25129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* opt_materialized: %empty  */
#line 474 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 25135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* into_clause: INTO OptTempTableName  */
#line 479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 25149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* into_clause: %empty  */
#line 489 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 25155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 498 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 518 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 25224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* OptTempTableName: TABLE qualified_name  */
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 25233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* OptTempTableName: qualified_name  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 25242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* opt_table: TABLE  */
#line 550 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 25248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* opt_table: %empty  */
#line 551 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 25254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* all_or_distinct: ALL  */
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 25260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* all_or_distinct: DISTINCT  */
#line 556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* all_or_distinct: %empty  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* by_name: BY NAME_P  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 25278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* distinct_clause: DISTINCT  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 25284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* opt_all_clause: ALL  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 25296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* opt_all_clause: %empty  */
#line 574 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 578 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_IGNORE_NULLS;}
#line 25308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_RESPECT_NULLS;}
#line 25314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* opt_ignore_nulls: %empty  */
#line 580 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ignorenulls) = PG_DEFAULT_NULLS; }
#line 25320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* opt_sort_clause: sort_clause  */
#line 584 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 25326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* opt_sort_clause: %empty  */
#line 585 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* sort_clause: ORDER BY sortby_list  */
#line 589 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 591 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 25355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* sortby_list: sortby  */
#line 606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 25361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* sortby_list: sortby_list ',' sortby  */
#line 607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 25367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 611 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 25380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 25393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* opt_asc_desc: ASC_P  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 25399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* opt_asc_desc: DESC_P  */
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 25405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* opt_asc_desc: %empty  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 25411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 635 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 25417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 25423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* opt_nulls_order: %empty  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 25429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* select_limit: limit_clause offset_clause  */
#line 641 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 25435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* select_limit: offset_clause limit_clause  */
#line 642 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 25441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* select_limit: limit_clause  */
#line 643 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 25447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* select_limit: offset_clause  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 25453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* opt_select_limit: select_limit  */
#line 648 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* opt_select_limit: %empty  */
#line 649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 25465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* limit_clause: LIMIT select_limit_value  */
#line 654 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 25471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 656 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 25484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 672 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 25490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 25496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* offset_clause: OFFSET select_offset_value  */
#line 679 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 25502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 25508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* sample_count: FCONST '%'  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 25516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* sample_count: ICONST '%'  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 25524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* sample_count: FCONST PERCENT  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 25532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* sample_count: ICONST PERCENT  */
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 25540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* sample_count: ICONST  */
#line 706 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 25548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* sample_count: ICONST ROWS  */
#line 710 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 25556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 25564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* sample_clause: %empty  */
#line 721 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 25570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* opt_sample_func: ColId  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* opt_sample_func: %empty  */
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 25582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 25591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* tablesample_entry: sample_count  */
#line 739 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 25599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 25607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 747 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 25616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 25624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* opt_tablesample_clause: tablesample_clause  */
#line 761 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* opt_tablesample_clause: %empty  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 25636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 25642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* opt_repeatable_clause: %empty  */
#line 768 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 25648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* select_limit_value: a_expr  */
#line 772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* select_limit_value: ALL  */
#line 774 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 25663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* select_limit_value: a_expr '%'  */
#line 779 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 25669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* select_limit_value: FCONST PERCENT  */
#line 781 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 25675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* select_limit_value: ICONST PERCENT  */
#line 783 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 25681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* select_offset_value: a_expr  */
#line 787 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* select_fetch_first_value: c_expr  */
#line 807 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* select_fetch_first_value: '+' I_or_F_const  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* select_fetch_first_value: '-' I_or_F_const  */
#line 811 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 25705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* I_or_F_const: Iconst  */
#line 815 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 25711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* I_or_F_const: FCONST  */
#line 816 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 25717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* row_or_rows: ROW  */
#line 820 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 25723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* row_or_rows: ROWS  */
#line 821 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 25729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* first_or_next: FIRST_P  */
#line 824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 25735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* first_or_next: NEXT  */
#line 825 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 25741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 850 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* group_clause: GROUP_P BY ALL  */
#line 852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 25756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* group_clause: %empty  */
#line 856 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* group_by_list: group_by_item  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* group_by_list: group_by_list ',' group_by_item  */
#line 861 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 25774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* group_by_list_opt_comma: group_by_list  */
#line 865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* group_by_list_opt_comma: group_by_list ','  */
#line 866 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* group_by_item: a_expr  */
#line 870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* group_by_item: empty_grouping_set  */
#line 871 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* group_by_item: cube_clause  */
#line 872 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* group_by_item: rollup_clause  */
#line 873 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* group_by_item: grouping_sets_clause  */
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* empty_grouping_set: '(' ')'  */
#line 879 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 25824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 892 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 25832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 25840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 25848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* grouping_or_grouping_id: GROUPING  */
#line 912 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 25854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* grouping_or_grouping_id: GROUPING_ID  */
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 25860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* having_clause: HAVING a_expr  */
#line 917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* having_clause: %empty  */
#line 918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* qualify_clause: QUALIFY a_expr  */
#line 922 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* qualify_clause: %empty  */
#line 923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* for_locking_clause: for_locking_items  */
#line 927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* for_locking_clause: FOR READ_P ONLY  */
#line 928 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* opt_for_locking_clause: for_locking_clause  */
#line 932 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* opt_for_locking_clause: %empty  */
#line 933 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* for_locking_items: for_locking_item  */
#line 937 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* for_locking_items: for_locking_items for_locking_item  */
#line 938 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 25920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 25932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* for_locking_strength: FOR UPDATE  */
#line 953 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 25938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 25944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* for_locking_strength: FOR SHARE  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 25950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* for_locking_strength: FOR KEY SHARE  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 25956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* locked_rels_list: OF qualified_name_list  */
#line 960 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* locked_rels_list: %empty  */
#line 961 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* opt_nowait_or_skip: NOWAIT  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 25974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 967 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 25980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* opt_nowait_or_skip: %empty  */
#line 968 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 25986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 25996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* values_clause_opt_comma: values_clause  */
#line 992 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* values_clause_opt_comma: values_clause ','  */
#line 993 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* from_clause: FROM from_list_opt_comma  */
#line 1006 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* from_clause: %empty  */
#line 1007 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* from_list: table_ref  */
#line 1011 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* from_list: from_list ',' table_ref  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 26042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* from_list_opt_comma: from_list  */
#line 1016 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* from_list_opt_comma: from_list ','  */
#line 1017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1024 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 26064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1030 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 26076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1038 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 26089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1055 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 26114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1064 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 26127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* table_ref: joined_table  */
#line 1073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 26135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 26144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1082 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 26159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 26174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* table_ref: PREDICT '(' qualified_name ',' table_ref ')' opt_alias_clause  */
#line 1104 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPredictExpr *n = makeNode(PGPredictExpr);
					n->source = (yyvsp[-2].node);
					n->model_name = (yyvsp[-4].range);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 26186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* table_ref: PREDICT '(' qualified_name ',' table_ref ',' table_ref ')' opt_alias_clause  */
#line 1112 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPredictExpr *n = makeNode(PGPredictExpr);
					n->source = (yyvsp[-4].node);
					n->model_name = (yyvsp[-6].range);
					n->opt_source = (yyvsp[-2].node);
					n->has_opt = 1;
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 26200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1124 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 26206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* opt_pivot_group_by: %empty  */
#line 1125 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 26212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1128 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 26218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1129 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 26224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* opt_include_nulls: %empty  */
#line 1130 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 26230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1134 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1142 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 26252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* pivot_header: d_expr  */
#line 1151 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* pivot_header: indirection_expr  */
#line 1152 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1153 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1157 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1165 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 26292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* pivot_value_list: pivot_value  */
#line 1174 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1178 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 26308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* unpivot_header: ColIdOrString  */
#line 1184 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 26314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1185 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 26320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1190 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* unpivot_value_list: unpivot_value  */
#line 1199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1203 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 26347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* joined_table: '(' joined_table ')'  */
#line 1228 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 26355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1232 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1245 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1259 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1299 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 26460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1313 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1327 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1340 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 26514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1355 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 26534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 26544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* alias_clause: AS ColIdOrString  */
#line 1380 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 26553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 26563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* alias_clause: ColId  */
#line 1391 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 26572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* opt_alias_clause: alias_clause  */
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 26578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* opt_alias_clause: %empty  */
#line 1398 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 26584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* func_alias_clause: alias_clause  */
#line 1407 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 26592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1411 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 26600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1415 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 26610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1421 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 26620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* func_alias_clause: %empty  */
#line 1427 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 26628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* join_type: FULL join_outer  */
#line 1432 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 26634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* join_type: LEFT join_outer  */
#line 1433 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 26640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* join_type: RIGHT join_outer  */
#line 1434 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 26646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* join_type: SEMI  */
#line 1435 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 26652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* join_type: ANTI  */
#line 1436 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 26658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* join_type: INNER_P  */
#line 1437 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 26664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* join_outer: OUTER_P  */
#line 1441 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 26670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* join_outer: %empty  */
#line 1442 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1454 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 26682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* join_qual: ON a_expr  */
#line 1455 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* relation_expr: qualified_name  */
#line 1461 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 26699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* relation_expr: qualified_name '*'  */
#line 1468 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 26710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* relation_expr: ONLY qualified_name  */
#line 1475 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 26721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1482 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 26732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* func_table: func_expr_windowless opt_ordinality  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 26747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 26762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1538 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 26768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* rowsfrom_list: rowsfrom_item  */
#line 1542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 26774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1543 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 26780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1546 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* opt_col_def_list: %empty  */
#line 1547 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1550 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 26798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* opt_ordinality: %empty  */
#line 1551 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* where_clause: WHERE a_expr  */
#line 1556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* where_clause: %empty  */
#line 1557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* TableFuncElementList: TableFuncElement  */
#line 1563 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1567 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 26832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1573 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* opt_collate_clause: COLLATE any_name  */
#line 1594 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* opt_collate_clause: %empty  */
#line 1601 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 26872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* colid_type_list: ColId Typename  */
#line 1614 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 26880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1617 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 26888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* opt_Typename: Typename  */
#line 1624 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* opt_Typename: %empty  */
#line 1625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 26900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* Typename: SimpleTypename opt_array_bounds  */
#line 1628 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 26909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 26919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1640 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 26928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1645 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 26938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* Typename: SimpleTypename ARRAY  */
#line 1651 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 26947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1656 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 26957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* Typename: qualified_typename  */
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList((yyvsp[0].list));
				}
#line 26965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1666 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("struct");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
               }
#line 26976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1673 "third_party/libpg_query/grammar/statements/select.y"
                {
				   (yyval.typnam) = SystemTypeName("map");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 26987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1680 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("union");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 26998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* qualified_typename: IDENT '.' IDENT  */
#line 1689 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 27004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* qualified_typename: qualified_typename '.' IDENT  */
#line 1690 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 27010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1695 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 27016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1697 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 27022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* opt_array_bounds: %empty  */
#line 1699 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 27028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* SimpleTypename: GenericType  */
#line 1703 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* SimpleTypename: Numeric  */
#line 1704 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* SimpleTypename: Bit  */
#line 1705 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* SimpleTypename: Character  */
#line 1706 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* SimpleTypename: ConstDatetime  */
#line 1707 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* SimpleTypename: ConstInterval opt_interval  */
#line 1709 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 27067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1714 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 27077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* ConstTypename: Numeric  */
#line 1733 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* ConstTypename: ConstBit  */
#line 1734 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* ConstTypename: ConstCharacter  */
#line 1735 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* ConstTypename: ConstDatetime  */
#line 1736 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* GenericType: type_name_token opt_type_modifiers  */
#line 1748 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1761 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* opt_type_modifiers: %empty  */
#line 1762 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* Numeric: INT_P  */
#line 1769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* Numeric: INTEGER  */
#line 1774 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* Numeric: SMALLINT  */
#line 1779 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* Numeric: BIGINT  */
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* Numeric: REAL  */
#line 1789 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* Numeric: FLOAT_P opt_float  */
#line 1794 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* Numeric: DOUBLE_P PRECISION  */
#line 1799 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1804 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* Numeric: DEC opt_type_modifiers  */
#line 1810 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1816 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* Numeric: BOOLEAN_P  */
#line 1822 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* opt_float: '(' Iconst ')'  */
#line 1829 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 27250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* opt_float: %empty  */
#line 1850 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 27258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* Bit: BitWithLength  */
#line 1860 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* Bit: BitWithoutLength  */
#line 1864 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* ConstBit: BitWithLength  */
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* ConstBit: BitWithoutLength  */
#line 1876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 27291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1884 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* BitWithoutLength: BIT opt_varying  */
#line 1896 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* Character: CharacterWithLength  */
#line 1917 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* Character: CharacterWithoutLength  */
#line 1921 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* ConstCharacter: CharacterWithLength  */
#line 1927 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* ConstCharacter: CharacterWithoutLength  */
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 27361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1944 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 27371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* CharacterWithoutLength: character  */
#line 1952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* character: CHARACTER opt_varying  */
#line 1962 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* character: CHAR_P opt_varying  */
#line 1964 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* character: VARCHAR  */
#line 1966 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 27401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* character: NATIONAL CHARACTER opt_varying  */
#line 1968 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* character: NATIONAL CHAR_P opt_varying  */
#line 1970 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* character: NCHAR opt_varying  */
#line 1972 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* opt_varying: VARYING  */
#line 1976 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 27425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* opt_varying: %empty  */
#line 1977 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1985 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1994 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 2002 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* ConstDatetime: TIME opt_timezone  */
#line 2011 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* ConstInterval: INTERVAL  */
#line 2022 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* opt_timezone: WITH_LA TIME ZONE  */
#line 2029 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 27496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* opt_timezone: WITHOUT TIME ZONE  */
#line 2030 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 27502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* opt_timezone: %empty  */
#line 2031 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* opt_interval: year_keyword  */
#line 2075 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 27514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* opt_interval: month_keyword  */
#line 2077 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 27520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* opt_interval: day_keyword  */
#line 2079 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 27526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* opt_interval: hour_keyword  */
#line 2081 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 27532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* opt_interval: minute_keyword  */
#line 2083 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 27538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* opt_interval: second_keyword  */
#line 2085 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 27544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* opt_interval: millisecond_keyword  */
#line 2087 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 27550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* opt_interval: microsecond_keyword  */
#line 2089 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 27556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* opt_interval: week_keyword  */
#line 2091 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(WEEK), (yylsp[0]))); }
#line 27562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* opt_interval: quarter_keyword  */
#line 2093 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(QUARTER), (yylsp[0]))); }
#line 27568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* opt_interval: decade_keyword  */
#line 2095 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DECADE), (yylsp[0]))); }
#line 27574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* opt_interval: century_keyword  */
#line 2097 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(CENTURY), (yylsp[0]))); }
#line 27580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* opt_interval: millennium_keyword  */
#line 2099 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLENNIUM), (yylsp[0]))); }
#line 27586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* opt_interval: year_keyword TO month_keyword  */
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 27595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* opt_interval: day_keyword TO hour_keyword  */
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 27604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* opt_interval: day_keyword TO minute_keyword  */
#line 2111 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 27614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* opt_interval: day_keyword TO second_keyword  */
#line 2117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2124 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 27634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* opt_interval: hour_keyword TO second_keyword  */
#line 2129 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* opt_interval: minute_keyword TO second_keyword  */
#line 2135 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* opt_interval: %empty  */
#line 2140 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 27659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* a_expr: c_expr  */
#line 2171 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* a_expr: a_expr TYPECAST Typename  */
#line 2174 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 27671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* a_expr: a_expr COLLATE any_name  */
#line 2176 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 27683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2184 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 27693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* a_expr: '+' a_expr  */
#line 2199 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* a_expr: '-' a_expr  */
#line 2201 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 27705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* a_expr: a_expr '+' a_expr  */
#line 2203 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* a_expr: a_expr '-' a_expr  */
#line 2205 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* a_expr: a_expr '*' a_expr  */
#line 2207 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* a_expr: a_expr '/' a_expr  */
#line 2209 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* a_expr: a_expr '%' a_expr  */
#line 2213 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* a_expr: a_expr '^' a_expr  */
#line 2215 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* a_expr: a_expr POWER_OF a_expr  */
#line 2217 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* a_expr: a_expr '<' a_expr  */
#line 2219 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* a_expr: a_expr '>' a_expr  */
#line 2221 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* a_expr: a_expr '=' a_expr  */
#line 2223 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2225 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2227 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2229 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* a_expr: a_expr qual_Op a_expr  */
#line 2232 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* a_expr: qual_Op a_expr  */
#line 2234 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* a_expr: a_expr qual_Op  */
#line 2236 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 27807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* a_expr: a_expr AND a_expr  */
#line 2239 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* a_expr: a_expr OR a_expr  */
#line 2241 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* a_expr: NOT a_expr  */
#line 2243 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 27825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* a_expr: NOT_LA a_expr  */
#line 2245 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 27831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* a_expr: a_expr GLOB a_expr  */
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* a_expr: a_expr LIKE a_expr  */
#line 2252 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2257 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 27860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 27869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2269 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 27880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* a_expr: a_expr ILIKE a_expr  */
#line 2276 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 27900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2288 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 27909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2293 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 27920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2301 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 27932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 27944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2317 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 27956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 27968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* a_expr: a_expr IS NULL_P  */
#line 2343 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* a_expr: a_expr ISNULL  */
#line 2351 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* a_expr: a_expr IS NOT NULL_P  */
#line 2359 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 28004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* a_expr: a_expr NOT NULL_P  */
#line 2367 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 28016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* a_expr: a_expr NOTNULL  */
#line 2375 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2383 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 28040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2391 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 28048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* a_expr: row OVERLAPS row  */
#line 2395 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 28068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* a_expr: a_expr IS TRUE_P  */
#line 2411 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2419 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* a_expr: a_expr IS FALSE_P  */
#line 2427 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* a_expr: a_expr IS UNKNOWN  */
#line 2443 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2451 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 28148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2463 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 28156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2471 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 28172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2475 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 28184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2483 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 28196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 28208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2499 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 28220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* a_expr: a_expr IN_P in_expr  */
#line 2507 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 28244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 28270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 28285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2560 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 28296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* a_expr: DEFAULT  */
#line 2567 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* a_expr: '*' COLUMNS '(' a_expr ')'  */
#line 2581 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->unpacked = true;
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 28327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2590 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 28339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2598 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 28351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2606 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 28364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* b_expr: c_expr  */
#line 2626 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* b_expr: b_expr TYPECAST Typename  */
#line 2628 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 28376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* b_expr: '+' b_expr  */
#line 2630 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* b_expr: '-' b_expr  */
#line 2632 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 28388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* b_expr: b_expr '+' b_expr  */
#line 2634 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* b_expr: b_expr '-' b_expr  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* b_expr: b_expr '*' b_expr  */
#line 2638 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* b_expr: b_expr '/' b_expr  */
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2642 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* b_expr: b_expr '%' b_expr  */
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* b_expr: b_expr '^' b_expr  */
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* b_expr: b_expr POWER_OF b_expr  */
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* b_expr: b_expr '<' b_expr  */
#line 2650 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* b_expr: b_expr '>' b_expr  */
#line 2652 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* b_expr: b_expr '=' b_expr  */
#line 2654 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2656 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2658 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* b_expr: b_expr qual_Op b_expr  */
#line 2662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* b_expr: qual_Op b_expr  */
#line 2664 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* b_expr: b_expr qual_Op  */
#line 2666 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 28490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2668 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 28498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 28506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2676 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2680 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 28522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* c_expr: indirection_expr_or_a_expr opt_extended_indirection  */
#line 2695 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 28538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* d_expr: columnref_opt_indirection  */
#line 2708 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* d_expr: AexprConst  */
#line 2709 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* d_expr: select_with_parens  */
#line 2711 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* d_expr: select_with_parens indirection  */
#line 2722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 28593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* d_expr: EXISTS select_with_parens  */
#line 2746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 28608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2757 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 28619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* indirection_expr_or_a_expr: '(' a_expr ')'  */
#line 2767 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 28627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* indirection_expr_or_a_expr: indirection_expr  */
#line 2771 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* indirection_expr_or_a_expr: row  */
#line 2774 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 28644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* indirection_expr: '?'  */
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 28652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* indirection_expr: PARAM  */
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 28663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* indirection_expr: struct_expr  */
#line 2793 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* indirection_expr: map_expr  */
#line 2797 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* indirection_expr: func_expr  */
#line 2801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* indirection_expr: case_expr  */
#line 2805 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* indirection_expr: list_expr  */
#line 2806 "third_party/libpg_query/grammar/statements/select.y"
                                     {
                (yyval.node) = (yyvsp[0].node);
			}
#line 28701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* indirection_expr: list_comprehension  */
#line 2809 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 28709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* indirection_expr: ARRAY select_with_parens  */
#line 2813 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* indirection_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2823 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 28734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* indirection_expr: '#' ICONST  */
#line 2829 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 28745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* indirection_expr: '$' ColLabel  */
#line 2836 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 28753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* list_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2841 "third_party/libpg_query/grammar/statements/select.y"
                                            {
                PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
                (yyval.node) = (PGNode *) n;
            }
#line 28762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2848 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 28771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* map_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2855 "third_party/libpg_query/grammar/statements/select.y"
                {
                    PGList *key_list = NULL;
                    PGList *value_list = NULL;
                    PGListCell *lc;
                    PGList *entry_list = (yyvsp[-1].list);
                    foreach(lc, entry_list)
                    {
                        PGList *l = (PGList *) lc->data.ptr_value;
                        key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
                        value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
                    }
                    PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
                    PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
                    PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
                    (yyval.node) = (PGNode *) f;
                }
#line 28792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* func_application: func_name '(' ')'  */
#line 2875 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 28800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2879 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 28811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 28823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2894 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 28835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2902 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 28850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2933 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 28902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* func_expr: func_expr_common_subexpr  */
#line 2969 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* func_expr_windowless: func_application  */
#line 2979 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2980 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2988 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 28930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2994 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 28936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2996 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 28942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2998 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 3002 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 3011 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position_inverse(A, B) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("__internal_position_operator"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 3016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 3023 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 29002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 3038 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 3045 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 3049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 3053 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 3057 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 29045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 3061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 29056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* list_comprehension_lhs: columnrefList  */
#line 3071 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
			(yyval.node) = (PGNode *) n;
		}
#line 29065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* list_comprehension: '[' a_expr FOR list_comprehension_lhs IN_P a_expr ']'  */
#line 3079 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = (yyvsp[-3].node);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 29078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* list_comprehension: '[' a_expr FOR list_comprehension_lhs IN_P c_expr IF_P a_expr ']'  */
#line 3088 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = (yyvsp[-5].node);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = (yyvsp[-5].node);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 29097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3109 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* within_group_clause: %empty  */
#line 3110 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3114 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 29115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3115 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 29121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* filter_clause: %empty  */
#line 3116 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* export_clause: EXPORT_STATE  */
#line 3120 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 29133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* export_clause: %empty  */
#line 3121 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 29139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* window_clause: WINDOW window_definition_list  */
#line 3128 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* window_clause: %empty  */
#line 3129 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* window_definition_list: window_definition  */
#line 3133 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 29157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3135 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 29163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* window_definition: ColId AS window_specification  */
#line 3140 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 29173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* over_clause: OVER window_specification  */
#line 3148 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 29179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* over_clause: OVER ColId  */
#line 3150 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 29196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* over_clause: %empty  */
#line 3163 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 29202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3168 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 29220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* opt_existing_window_name: ColId  */
#line 3193 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* opt_existing_window_name: %empty  */
#line 3194 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 29232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3197 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* opt_partition_clause: %empty  */
#line 3198 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3207 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 29256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3215 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 29268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 29280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* opt_frame_clause: %empty  */
#line 3231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* frame_extent: frame_bound  */
#line 3242 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 29315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 29357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3315 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* frame_bound: CURRENT_P ROW  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* frame_bound: a_expr PRECEDING  */
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* frame_bound: a_expr FOLLOWING  */
#line 3342 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3353 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 29428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3354 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 29434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3355 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 29440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3356 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 29446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* opt_window_exclusion_clause: %empty  */
#line 3357 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 29452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* qualified_row: ROW '(' ')'  */
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 29464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* row: qualified_row  */
#line 3375 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 29470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* row: '(' expr_list ',' a_expr ')'  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 29476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 29489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* dict_arguments: dict_arg  */
#line 3390 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3391 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* dict_arguments_opt_comma: dict_arguments  */
#line 3395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* map_arg: a_expr ':' a_expr  */
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 29521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* map_arguments: map_arg  */
#line 3407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* map_arguments: map_arguments ',' map_arg  */
#line 3408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* map_arguments_opt_comma: map_arguments  */
#line 3413 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* map_arguments_opt_comma: map_arguments ','  */
#line 3414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* opt_map_arguments_opt_comma: %empty  */
#line 3420 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 29557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* sub_type: ANY  */
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 29563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* sub_type: SOME  */
#line 3424 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 29569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* sub_type: ALL  */
#line 3425 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 29575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* all_Op: Op  */
#line 3428 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* all_Op: MathOp  */
#line 3429 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 29587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* MathOp: '+'  */
#line 3432 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 29593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* MathOp: '-'  */
#line 3433 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 29599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* MathOp: '*'  */
#line 3434 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 29605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* MathOp: '/'  */
#line 3435 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 29611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* MathOp: INTEGER_DIVISION  */
#line 3436 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 29617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* MathOp: '%'  */
#line 3437 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 29623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* MathOp: '^'  */
#line 3438 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 29629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* MathOp: POWER_OF  */
#line 3439 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 29635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* MathOp: '<'  */
#line 3440 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 29641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* MathOp: '>'  */
#line 3441 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 29647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* MathOp: '='  */
#line 3442 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 29653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* MathOp: LESS_EQUALS  */
#line 3443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 29659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* MathOp: GREATER_EQUALS  */
#line 3444 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 29665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* MathOp: NOT_EQUALS  */
#line 3445 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 29671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* qual_Op: Op  */
#line 3449 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3451 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* qual_all_Op: all_Op  */
#line 3456 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3458 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* subquery_Op: all_Op  */
#line 3463 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3465 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* subquery_Op: LIKE  */
#line 3467 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 29713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* subquery_Op: NOT_LA LIKE  */
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 29719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* subquery_Op: GLOB  */
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 29725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* subquery_Op: NOT_LA GLOB  */
#line 3473 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 29731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* subquery_Op: ILIKE  */
#line 3475 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 29737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* subquery_Op: NOT_LA ILIKE  */
#line 3477 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 29743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* any_operator: all_Op  */
#line 3491 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* any_operator: ColId '.' any_operator  */
#line 3493 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 29755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* c_expr_list: c_expr  */
#line 3498 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3502 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* c_expr_list_opt_comma: c_expr_list  */
#line 3509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* expr_list: a_expr  */
#line 3520 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* expr_list: expr_list ',' a_expr  */
#line 3524 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* expr_list_opt_comma: expr_list  */
#line 3531 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* expr_list_opt_comma: expr_list ','  */
#line 3536 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3543 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* opt_expr_list_opt_comma: %empty  */
#line 3547 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 29835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* func_arg_list: func_arg_expr  */
#line 3556 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3560 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* func_arg_expr: a_expr  */
#line 3566 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 29859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3570 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 29872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 29885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* type_list: Typename  */
#line 3589 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 29891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* type_list: type_list ',' Typename  */
#line 3590 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 29897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* extract_list: extract_arg FROM a_expr  */
#line 3595 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 29905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* extract_list: %empty  */
#line 3598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* extract_arg: IDENT  */
#line 3605 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* extract_arg: year_keyword  */
#line 3606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 29923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* extract_arg: month_keyword  */
#line 3607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 29929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* extract_arg: day_keyword  */
#line 3608 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 29935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* extract_arg: hour_keyword  */
#line 3609 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 29941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* extract_arg: minute_keyword  */
#line 3610 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 29947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* extract_arg: second_keyword  */
#line 3611 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 29953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* extract_arg: millisecond_keyword  */
#line 3612 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 29959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* extract_arg: microsecond_keyword  */
#line 3613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 29965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* extract_arg: week_keyword  */
#line 3614 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "week"; }
#line 29971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* extract_arg: quarter_keyword  */
#line 3615 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "quarter"; }
#line 29977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* extract_arg: decade_keyword  */
#line 3616 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "decade"; }
#line 29983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* extract_arg: century_keyword  */
#line 3617 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "century"; }
#line 29989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* extract_arg: millennium_keyword  */
#line 3618 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millennium"; }
#line 29995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* extract_arg: Sconst  */
#line 3619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3630 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3634 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* overlay_placing: PLACING a_expr  */
#line 3641 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 30023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* position_list: b_expr IN_P b_expr  */
#line 3647 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node)); }
#line 30029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* position_list: %empty  */
#line 3648 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* substr_list: a_expr substr_from substr_for  */
#line 3665 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* substr_list: a_expr substr_for substr_from  */
#line 3669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 30052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* substr_list: a_expr substr_from  */
#line 3674 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* substr_list: a_expr substr_for  */
#line 3678 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 30079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* substr_list: expr_list  */
#line 3693 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 30087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* substr_list: %empty  */
#line 3697 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 30093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* substr_from: FROM a_expr  */
#line 3701 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* substr_for: FOR a_expr  */
#line 3704 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3707 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 30111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* trim_list: FROM expr_list_opt_comma  */
#line 3708 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* trim_list: expr_list_opt_comma  */
#line 3709 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* in_expr: select_with_parens  */
#line 3713 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 30134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3719 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 30140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* in_expr: indirection_expr  */
#line 3721 "third_party/libpg_query/grammar/statements/select.y"
                                           { (yyval.node) = (PGNode *)(yyvsp[0].node); }
#line 30146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3732 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 30160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* when_clause_list: when_clause  */
#line 3745 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 30166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* when_clause_list: when_clause_list when_clause  */
#line 3746 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 30184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* case_default: ELSE a_expr  */
#line 3761 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* case_default: %empty  */
#line 3762 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* case_arg: a_expr  */
#line 3765 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* case_arg: %empty  */
#line 3766 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* columnrefList: columnref  */
#line 3770 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 30214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* columnrefList: columnrefList ',' columnref  */
#line 3771 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 30220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* columnref: ColId  */
#line 3775 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
		}
#line 30228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* columnref_opt_indirection: ColId  */
#line 3781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 30236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* columnref_opt_indirection: ColId indirection  */
#line 3785 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 30244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* indirection_el: '[' a_expr ']'  */
#line 3792 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3800 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3807 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 30281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3815 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* opt_slice_bound: a_expr  */
#line 3825 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* opt_slice_bound: %empty  */
#line 3826 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* opt_indirection: %empty  */
#line 3831 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* opt_indirection: opt_indirection indirection_el  */
#line 3832 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* opt_func_arguments: %empty  */
#line 3836 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 30323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* opt_func_arguments: '(' ')'  */
#line 3837 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 30329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3838 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3843 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 30348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* extended_indirection_el: '[' a_expr ']'  */
#line 3852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3860 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3867 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 30385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3876 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* opt_extended_indirection: %empty  */
#line 3891 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 30403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3892 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3908 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* opt_target_list_opt_comma: %empty  */
#line 3909 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 30421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* target_list: target_el  */
#line 3913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 30427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* target_list: target_list ',' target_el  */
#line 3914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 30433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* target_list_opt_comma: target_list  */
#line 3918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* target_list_opt_comma: target_list ','  */
#line 3919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* target_el: a_expr AS ColLabelOrString  */
#line 3923 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 30457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* target_el: a_expr IDENT  */
#line 3939 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 30469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* target_el: a_expr  */
#line 3947 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 30481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* except_list: EXCLUDE ColId  */
#line 3957 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* opt_except_list: except_list  */
#line 3960 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* opt_except_list: %empty  */
#line 3961 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 30505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* replace_list_el: a_expr AS ColId  */
#line 3964 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 30511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* replace_list: replace_list_el  */
#line 3968 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* replace_list: replace_list ',' replace_list_el  */
#line 3969 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 30523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* replace_list_opt_comma: replace_list  */
#line 3973 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* replace_list_opt_comma: replace_list ','  */
#line 3974 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3977 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* opt_replace_list: REPLACE replace_list_el  */
#line 3978 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* opt_replace_list: %empty  */
#line 3979 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 30553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* qualified_name_list: qualified_name  */
#line 3989 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 30559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3990 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 30565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* name_list: name  */
#line 3995 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* name_list: name_list ',' name  */
#line 3997 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 30577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* name_list_opt_comma: name_list  */
#line 4002 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* name_list_opt_comma: name_list ','  */
#line 4003 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 4007 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 4008 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* name: ColIdOrString  */
#line 4011 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* func_name: function_name_token  */
#line 4023 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* func_name: ColId indirection  */
#line 4026 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 30622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* AexprConst: Iconst  */
#line 4037 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 30630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* AexprConst: FCONST  */
#line 4041 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* AexprConst: Sconst opt_indirection  */
#line 4045 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 30654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* AexprConst: BCONST  */
#line 4057 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* AexprConst: XCONST  */
#line 4061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* AexprConst: func_name Sconst  */
#line 4070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 4077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].ignorenulls) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* AexprConst: ConstTypename Sconst  */
#line 4115 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 30736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4119 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 30744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4123 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 30752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4127 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 30760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* AexprConst: TRUE_P  */
#line 4131 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 30768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* AexprConst: FALSE_P  */
#line 4135 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 30776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* AexprConst: NULL_P  */
#line 4139 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 30784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* Iconst: ICONST  */
#line 4144 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 30790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* type_function_name: IDENT  */
#line 4161 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* type_function_name: unreserved_keyword  */
#line 4162 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* type_function_name: type_func_name_keyword  */
#line 4163 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* function_name_token: IDENT  */
#line 4166 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* function_name_token: unreserved_keyword  */
#line 4167 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* function_name_token: func_name_keyword  */
#line 4168 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* type_name_token: IDENT  */
#line 4171 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* type_name_token: unreserved_keyword  */
#line 4172 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* type_name_token: type_name_keyword  */
#line 4173 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* any_name: ColId  */
#line 4176 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* any_name: ColId attrs  */
#line 4177 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 30856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* attrs: '.' attr_name  */
#line 4181 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* attrs: attrs '.' attr_name  */
#line 4183 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 30868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4187 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* opt_name_list: %empty  */
#line 4188 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* ColLabelOrString: ColLabel  */
#line 4195 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* ColLabelOrString: SCONST  */
#line 4196 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 30907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 30922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 31002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 31016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* drop_type_any_name: TABLE  */
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 31022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* drop_type_any_name: SEQUENCE  */
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 31028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* drop_type_any_name: MODEL  */
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_MODEL; }
#line 31034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* drop_type_any_name: FUNCTION  */
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 31040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* drop_type_any_name: MACRO  */
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 31046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* drop_type_any_name: MACRO TABLE  */
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 31052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* drop_type_any_name: VIEW  */
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 31058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 31064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* drop_type_any_name: INDEX  */
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 31070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* drop_type_any_name: FOREIGN TABLE  */
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 31076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* drop_type_any_name: COLLATION  */
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 31082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* drop_type_any_name: CONVERSION_P  */
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 31088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* drop_type_any_name: SCHEMA  */
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 31094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* drop_type_any_name: STATISTICS  */
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 31100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 31106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 88 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 31112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 89 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 31118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 90 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 31124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* drop_type_any_name: TYPE_P  */
#line 91 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 31130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* drop_type_name: ACCESS METHOD  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 31136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* drop_type_name: EVENT TRIGGER  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 31142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* drop_type_name: EXTENSION  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 31148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 31154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* drop_type_name: PUBLICATION  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 31160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* drop_type_name: SERVER  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 31166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* any_name_list: any_name  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 31172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* any_name_list: any_name_list ',' any_name  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 31178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* opt_drop_behavior: CASCADE  */
#line 112 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 31184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* opt_drop_behavior: RESTRICT  */
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 31190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* opt_drop_behavior: %empty  */
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 31196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* drop_type_name_on_any_name: POLICY  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 31202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* drop_type_name_on_any_name: RULE  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 31208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* drop_type_name_on_any_name: TRIGGER  */
#line 121 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 31214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 31227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 31240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 31259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 31265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 31271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 31279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 31287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 31296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 31305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 31314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 31323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* VariableResetStmt: RESET VARIABLE_P reset_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_VARIABLE;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 31332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* generic_reset: var_name  */
#line 32 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 31343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* generic_reset: ALL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 31353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* reset_rest: generic_reset  */
#line 48 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 31359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* reset_rest: TIME ZONE  */
#line 50 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 31370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 57 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 31381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 31395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 31405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 31416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 31426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 31437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 31447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 31455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 31464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 31470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 31476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 31482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 31494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 31506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 31514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 31520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 31526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 31538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 31547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 31572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 31580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1464: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 31588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1465: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 31596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1466: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 31609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1467: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 31622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1468: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 31630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1469: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 31645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1470: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 31660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1471: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 31675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1472: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1473: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 31687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1474: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 31693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1475: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 31699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1476: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 31705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1477: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 31711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1478: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1479: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 31723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1480: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1481: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 31735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1482: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 31741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1483: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 31747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1484: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1485: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 31759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1486: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 31765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1487: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 31771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1488: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 31777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1489: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 31783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1490: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 31795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1491: /* DropSecretStmt: DROP opt_persist SECRET ColId opt_storage_drop_specifier  */
#line 8 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                {
					PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
					n->persist_type = (yyvsp[-3].str);
					n->secret_name = (yyvsp[-1].str);
					n->secret_storage = (yyvsp[0].str);
					n->missing_ok  = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* DropSecretStmt: DROP opt_persist SECRET IF_P EXISTS ColId opt_storage_drop_specifier  */
#line 17 "third_party/libpg_query/grammar/statements/drop_secret.y"
                {
                    PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
                    n->persist_type = (yyvsp[-5].str);
                    n->secret_name = (yyvsp[-1].str);
                    n->secret_storage = (yyvsp[0].str);
                    n->missing_ok  = true;
                    (yyval.node) = (PGNode *)n;
                }
#line 31821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* opt_storage_drop_specifier: %empty  */
#line 28 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 31827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* opt_storage_drop_specifier: FROM IDENT  */
#line 29 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 31833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 31844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 31858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 31869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 31880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 31886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 31892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 31898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 31904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 31910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1536: /* NonReservedWord: IDENT  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1537: /* NonReservedWord: unreserved_keyword  */
#line 93 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1538: /* NonReservedWord: other_keyword  */
#line 94 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1539: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1540: /* NonReservedWord_or_Sconst: Sconst  */
#line 100 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1541: /* explain_option_list: explain_option_elem  */
#line 106 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 31948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1542: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 110 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 31956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1543: /* analyze_keyword: ANALYZE  */
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 31962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1544: /* analyze_keyword: ANALYSE  */
#line 118 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 31968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1545: /* opt_boolean_or_string: TRUE_P  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 31974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1546: /* opt_boolean_or_string: FALSE_P  */
#line 124 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 31980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1547: /* opt_boolean_or_string: ON  */
#line 125 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 31986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1548: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 131 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1549: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 137 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 32000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1550: /* explain_option_name: NonReservedWord  */
#line 144 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 32006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1551: /* explain_option_name: analyze_keyword  */
#line 145 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 32012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1552: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 32026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1553: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 32040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1554: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 32048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1555: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 32059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1556: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 32070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1557: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 32076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1558: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 32082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1559: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 32088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1560: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 32094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 32098 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 74 "third_party/libpg_query/grammar/statements/delete.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	if (stmt->type != T_PGSelectStmt) {
		ereport(ERROR,
				(errcode(PG_ERRCODE_SYNTAX_ERROR),
						errmsg("DESCRIBE/SHOW/SUMMARIZE with CTE/ORDER BY/... not allowed - wrap the statement in a subquery instead"),
						parser_errposition(exprLocation((PGNode *) stmt))));
	}
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = larg;
	n->rarg = rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make1(makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
